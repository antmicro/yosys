diff --git a/hw/ip/aes/rtl/aes_cipher_core.sv b/hw/ip/aes/rtl/aes_cipher_core.sv
index ed35dc5ef..d1b6b560f 100644
--- a/hw/ip/aes/rtl/aes_cipher_core.sv
+++ b/hw/ip/aes/rtl/aes_cipher_core.sv
@@ -40,24 +40,24 @@ module aes_cipher_core #(
   input  logic          [63:0] prng_data_i,
 
   // I/O data & initial key
-  input  logic [3:0][3:0][7:0] state_init_i,
+  input  logic [127:0] state_init_i,
   input  logic     [7:0][31:0] key_init_i,
-  output logic [3:0][3:0][7:0] state_o
+  output logic [127:0] state_o
 );
 
   import aes_pkg::*;
 
   // Signals
-  logic [3:0][3:0][7:0] state_d;
-  logic [3:0][3:0][7:0] state_q;
+  logic [127:0] state_d;
+  logic [127:0] state_q;
   logic                 state_we;
   state_sel_e           state_sel;
 
-  logic [3:0][3:0][7:0] sub_bytes_out;
-  logic [3:0][3:0][7:0] shift_rows_out;
-  logic [3:0][3:0][7:0] mix_columns_out;
-  logic [3:0][3:0][7:0] add_round_key_in;
-  logic [3:0][3:0][7:0] add_round_key_out;
+  logic [127:0] sub_bytes_out;
+  logic [127:0] shift_rows_out;
+  logic [127:0] mix_columns_out;
+  logic [127:0] add_round_key_in;
+  logic [127:0] add_round_key_out;
   add_rk_sel_e          add_round_key_in_sel;
 
   logic     [7:0][31:0] key_full_d;
@@ -75,9 +75,9 @@ module aes_cipher_core #(
   logic           [3:0] key_expand_round;
   key_words_sel_e       key_words_sel;
   logic     [3:0][31:0] key_words;
-  logic [3:0][3:0][7:0] key_bytes;
-  logic [3:0][3:0][7:0] key_mix_columns_out;
-  logic [3:0][3:0][7:0] round_key;
+  logic [127:0] key_bytes;
+  logic [127:0] key_mix_columns_out;
+  logic [127:0] round_key;
   round_key_sel_e       round_key_sel;
 
   //////////
@@ -103,19 +103,19 @@ module aes_cipher_core #(
   // Cipher data path
   aes_sub_bytes #(
     .SBoxImpl ( SBoxImpl )
-  ) aes_sub_bytes (
+  ) u_aes_sub_bytes (
     .op_i   ( op_i          ),
     .data_i ( state_q       ),
     .data_o ( sub_bytes_out )
   );
 
-  aes_shift_rows aes_shift_rows (
+  aes_shift_rows u_aes_shift_rows (
     .op_i   ( op_i           ),
     .data_i ( sub_bytes_out  ),
     .data_o ( shift_rows_out )
   );
 
-  aes_mix_columns aes_mix_columns (
+  aes_mix_columns u_aes_mix_columns (
     .op_i   ( op_i            ),
     .data_i ( shift_rows_out  ),
     .data_o ( mix_columns_out )
@@ -172,7 +172,7 @@ module aes_cipher_core #(
   aes_key_expand #(
     .AES192Enable ( AES192Enable ),
     .SBoxImpl     ( SBoxImpl     )
-  ) aes_key_expand (
+  ) u_aes_key_expand (
     .clk_i     ( clk_i            ),
     .rst_ni    ( rst_ni           ),
     .op_i      ( key_expand_op    ),
@@ -197,7 +197,7 @@ module aes_cipher_core #(
   // Convert words to bytes (every key word contains one column)
   assign key_bytes = aes_transpose(key_words);
 
-  aes_mix_columns aes_key_mix_columns (
+  aes_mix_columns u_aes_key_mix_columns (
     .op_i   ( CIPH_INV            ),
     .data_i ( key_bytes           ),
     .data_o ( key_mix_columns_out )
@@ -216,7 +216,7 @@ module aes_cipher_core #(
   /////////////
 
   // Control
-  aes_cipher_control aes_cipher_control (
+  aes_cipher_control u_aes_cipher_control (
     .clk_i                  ( clk_i                ),
     .rst_ni                 ( rst_ni               ),
 
diff --git a/hw/ip/aes/rtl/aes_key_expand.sv b/hw/ip/aes/rtl/aes_key_expand.sv
index c030089b7..65f0bdc94 100644
--- a/hw/ip/aes/rtl/aes_key_expand.sv
+++ b/hw/ip/aes/rtl/aes_key_expand.sv
@@ -191,7 +191,7 @@ module aes_key_expand #(
 
   // To reduce muxing resources, we re-use existing
   // connections for unused words and default cases.
-  always_comb begin : drive_regular
+  always begin : drive_regular
     unique case (key_len_i)
 
       /////////////
diff --git a/hw/ip/aes/rtl/aes_mix_columns.sv b/hw/ip/aes/rtl/aes_mix_columns.sv
index 3aee014a2..222464474 100644
--- a/hw/ip/aes/rtl/aes_mix_columns.sv
+++ b/hw/ip/aes/rtl/aes_mix_columns.sv
@@ -6,15 +6,15 @@
 
 module aes_mix_columns (
   input  aes_pkg::ciph_op_e    op_i,
-  input  logic [3:0][3:0][7:0] data_i,
-  output logic [3:0][3:0][7:0] data_o
+  input  logic [127:0] data_i,
+  output logic [127:0] data_o
 );
 
   import aes_pkg::*;
 
   // Transpose to operate on columns
-  logic [3:0][3:0][7:0] data_i_transposed;
-  logic [3:0][3:0][7:0] data_o_transposed;
+  logic [127:0] data_i_transposed;
+  logic [127:0] data_o_transposed;
 
   assign data_i_transposed = aes_transpose(data_i);
 
diff --git a/hw/ip/aes/rtl/aes_pkg.sv b/hw/ip/aes/rtl/aes_pkg.sv
index ddc3b7992..6d4e2a759 100644
--- a/hw/ip/aes/rtl/aes_pkg.sv
+++ b/hw/ip/aes/rtl/aes_pkg.sv
@@ -165,12 +165,12 @@ function automatic logic [31:0] aes_circ_byte_shift(logic [31:0] in, logic [1:0]
 endfunction
 
 // Transpose state matrix
-function automatic logic [3:0][3:0][7:0] aes_transpose(logic [3:0][3:0][7:0] in);
-  logic [3:0][3:0][7:0] transpose;
+function automatic logic [127:0] aes_transpose(logic [127:0] in);
+  logic [127:0] transpose;
   transpose = '0;
   for (int j=0; j<4; j++) begin
     for (int i=0; i<4; i++) begin
-      transpose[i][j] = in[j][i];
+      transpose[((i * 4) + j) * 8+:8] = in[((j * 4) + i) * 8+:8];
     end
   end
   return transpose;
diff --git a/hw/ip/aes/rtl/aes_prng.sv b/hw/ip/aes/rtl/aes_prng.sv
index 08e2a94e6..a94dbdd43 100644
--- a/hw/ip/aes/rtl/aes_prng.sv
+++ b/hw/ip/aes/rtl/aes_prng.sv
@@ -23,7 +23,7 @@ module aes_prng (
   input  logic        entropy_ack_i,
   input  logic [63:0] entropy_i
 );
-
+  import prim_cipher_pkg::*;
   localparam int unsigned DATA_WIDTH = 64;
 
   logic                  seed_en;
@@ -58,7 +58,7 @@ module aes_prng (
   );
 
   // "Scramble" the LFSR state.
-  assign scrambled = prim_cipher_pkg::sbox4_64bit(lfsr_state, prim_cipher_pkg::PRINCE_SBOX4);
-  assign data_o    = prim_cipher_pkg::perm_64bit(scrambled, prim_cipher_pkg::PRESENT_PERM64);
+  assign scrambled = sbox4_64bit(lfsr_state, PRINCE_SBOX4);
+  assign data_o    = perm_64bit(scrambled, PRESENT_PERM64);
 
 endmodule
diff --git a/hw/ip/aes/rtl/aes_shift_rows.sv b/hw/ip/aes/rtl/aes_shift_rows.sv
index b33b570a0..ef9eea32b 100644
--- a/hw/ip/aes/rtl/aes_shift_rows.sv
+++ b/hw/ip/aes/rtl/aes_shift_rows.sv
@@ -6,24 +6,24 @@
 
 module aes_shift_rows (
   input  aes_pkg::ciph_op_e    op_i,
-  input  logic [3:0][3:0][7:0] data_i,
-  output logic [3:0][3:0][7:0] data_o
+  input  logic [127:0] data_i,
+  output logic [127:0] data_o
 );
 
   import aes_pkg::*;
 
   // Row 0 is left untouched
-  assign data_o[0] = data_i[0];
+  assign data_o[0] = data_i[0+:32];
 
   // Row 2 does not depend on op_i
-  assign data_o[2] = aes_circ_byte_shift(data_i[2], 2'h2);
+  assign data_o[2] = aes_circ_byte_shift(data_i[64+:32], 2'h2);
 
   // Row 1
-  assign data_o[1] = (op_i == CIPH_FWD) ? aes_circ_byte_shift(data_i[1], 2'h3)
-                                        : aes_circ_byte_shift(data_i[1], 2'h1);
+  assign data_o[1] = (op_i == CIPH_FWD) ? aes_circ_byte_shift(data_i[32+:32], 2'h3)
+                                        : aes_circ_byte_shift(data_i[32+:32], 2'h1);
 
   // Row 3
-  assign data_o[3] = (op_i == CIPH_FWD) ? aes_circ_byte_shift(data_i[3], 2'h1)
-                                        : aes_circ_byte_shift(data_i[3], 2'h3);
+  assign data_o[3] = (op_i == CIPH_FWD) ? aes_circ_byte_shift(data_i[96+:32], 2'h1)
+                                        : aes_circ_byte_shift(data_i[96+:32], 2'h3);
 
 endmodule
diff --git a/hw/ip/aes/rtl/aes_sub_bytes.sv b/hw/ip/aes/rtl/aes_sub_bytes.sv
index 1d3e5c3a9..081c718f9 100644
--- a/hw/ip/aes/rtl/aes_sub_bytes.sv
+++ b/hw/ip/aes/rtl/aes_sub_bytes.sv
@@ -8,8 +8,8 @@ module aes_sub_bytes #(
   parameter SBoxImpl = "lut"
 ) (
   input  aes_pkg::ciph_op_e    op_i,
-  input  logic [3:0][3:0][7:0] data_i,
-  output logic [3:0][3:0][7:0] data_o
+  input  logic [127:0] data_i,
+  output logic [127:0] data_o
 );
 
   // Individually substitute bytes
@@ -19,8 +19,8 @@ module aes_sub_bytes #(
         .SBoxImpl ( SBoxImpl )
       ) aes_sbox_ij (
         .op_i   ( op_i         ),
-        .data_i ( data_i[i][j] ),
-        .data_o ( data_o[i][j] )
+        .data_i ( data_i[((i * 4) + j) * 8+:8] ),
+        .data_o ( data_o[((i * 4) + j) * 8+:8] )
       );
     end
   end
diff --git a/hw/ip/alert_handler/rtl/alert_pkg.sv b/hw/ip/alert_handler/rtl/alert_pkg.sv
index 5324b4978..fb9e8de6c 100644
--- a/hw/ip/alert_handler/rtl/alert_pkg.sv
+++ b/hw/ip/alert_handler/rtl/alert_pkg.sv
@@ -5,24 +5,20 @@
 
 package alert_pkg;
 
-  // these localparams are generated based on the system top-level configuration
-  localparam int unsigned      NAlerts   = alert_handler_reg_pkg::NAlerts;   // maximum 252
-  localparam int unsigned      EscCntDw  = alert_handler_reg_pkg::EscCntDw;  // maximum 32
-  localparam int unsigned      AccuCntDw = alert_handler_reg_pkg::AccuCntDw; // maximum 32
-  // seed for the ping timer (must be nonzero!)
-  localparam logic [31:0]      LfsrSeed  = alert_handler_reg_pkg::LfsrSeed;
-  // enable async transitions for specific RX/TX pairs
-  localparam bit [NAlerts-1:0] AsyncOn   = alert_handler_reg_pkg::AsyncOn;
-
-  // common constants, do not change
-  localparam int unsigned N_CLASSES   = alert_handler_reg_pkg::N_CLASSES;
-  localparam int unsigned N_ESC_SEV   = alert_handler_reg_pkg::N_ESC_SEV;
-  localparam int unsigned N_PHASES    = alert_handler_reg_pkg::N_PHASES;
-  localparam int unsigned N_LOC_ALERT = alert_handler_reg_pkg::N_LOC_ALERT;
-
-  localparam int unsigned PING_CNT_DW = alert_handler_reg_pkg::PING_CNT_DW;
-  localparam int unsigned PHASE_DW    = alert_handler_reg_pkg::PHASE_DW;
-  localparam int unsigned CLASS_DW    = alert_handler_reg_pkg::CLASS_DW;
+  // copied from alert_handler_reg_pkg as it is currently unparsable by
+  // yosys/surelog
+  parameter int NAlerts = 5;
+  parameter int EscCntDw = 32;
+  parameter int AccuCntDw = 16;
+  parameter int LfsrSeed = 2147483647;
+  parameter logic [NAlerts-1:0] AsyncOn = 5'b00000;
+  parameter int N_CLASSES = 4;
+  parameter int N_ESC_SEV = 4;
+  parameter int N_PHASES = 4;
+  parameter int N_LOC_ALERT = 4;
+  parameter int PING_CNT_DW = 24;
+  parameter int PHASE_DW = 2;
+  parameter int CLASS_DW = 2;
 
   // do not change the phase encoding
   typedef enum logic [2:0] {Idle = 3'b000, Timeout = 3'b001, Terminal = 3'b011,
@@ -68,9 +64,9 @@ package alert_pkg;
     logic [N_CLASSES-1:0]                              class_clr;          // clears esc/accu
     logic [N_CLASSES-1:0][AccuCntDw-1:0]               class_accum_thresh; // accum esc threshold
     logic [N_CLASSES-1:0][EscCntDw-1:0]                class_timeout_cyc;  // interrupt timeout
-    logic [N_CLASSES-1:0][N_PHASES-1:0][EscCntDw-1:0]  class_phase_cyc;    // length of phases 0..3
+    logic [511:0]  class_phase_cyc;    // length of phases 0..3
     logic [N_CLASSES-1:0][N_ESC_SEV-1:0]               class_esc_en;       // esc signal enables
-    logic [N_CLASSES-1:0][N_ESC_SEV-1:0][PHASE_DW-1:0] class_esc_map;      // esc signal/phase map
+    logic [31:0] class_esc_map;      // esc signal/phase map
   } reg2hw_wrap_t;
 
 endpackage : alert_pkg
diff --git a/hw/ip/flash_ctrl/rtl/flash_phy.sv b/hw/ip/flash_ctrl/rtl/flash_phy.sv
index 28ad2a12a..af2b735dd 100644
--- a/hw/ip/flash_ctrl/rtl/flash_phy.sv
+++ b/hw/ip/flash_ctrl/rtl/flash_phy.sv
@@ -21,7 +21,7 @@ module flash_phy import flash_ctrl_pkg::*; (
   input flash_req_t flash_ctrl_i,
   output flash_rsp_t flash_ctrl_o
 );
-
+  import flash_phy_pkg::*;
   // Flash macro outstanding refers to how many reads we allow a macro to move ahead of an
   // in order blocking read. Since the data cannot be returned out of order, this simply
   // does the reads in advance and store them in a FIFO
@@ -46,7 +46,7 @@ module flash_phy import flash_ctrl_pkg::*; (
   logic [NumBanks-1:0]  host_rsp_avail;
   logic [NumBanks-1:0]  host_rsp_vld;
   logic [NumBanks-1:0]  host_rsp_ack;
-  logic [BusWidth-1:0]  host_rsp_data [NumBanks];
+  logic [0:NumBanks-1][BusWidth-1:0]  host_rsp_data;
   logic                 seq_fifo_rdy;
   logic                 seq_fifo_pending;
 
@@ -59,7 +59,7 @@ module flash_phy import flash_ctrl_pkg::*; (
   logic [NumBanks-1:0]  init_busy;
 
   // common interface
-  logic [BusWidth-1:0] rd_data [NumBanks];
+  logic [0:NumBanks-1][BusWidth-1:0] rd_data;
 
   // select which bank each is operating on
   assign host_bank_sel = host_req_i ? host_addr_i[BusAddrW-1 -: BankW] : '0;
diff --git a/hw/ip/hmac/rtl/hmac.sv b/hw/ip/hmac/rtl/hmac.sv
index 043829d21..2ddee7f3a 100644
--- a/hw/ip/hmac/rtl/hmac.sv
+++ b/hw/ip/hmac/rtl/hmac.sv
@@ -30,11 +30,13 @@ module hmac
   /////////////////////////
   // Signal declarations //
   /////////////////////////
-  hmac_reg2hw_t reg2hw;
-  hmac_hw2reg_t hw2reg;
+  wire [320:0] reg2hw;
+  wire [627:0] hw2reg;
+  //hmac_reg2hw_t reg2hw;
+  //hmac_hw2reg_t hw2reg;
 
-  tlul_pkg::tl_h2d_t  tl_win_h2d[1];
-  tlul_pkg::tl_d2h_t  tl_win_d2h[1];
+  tlul_pkg::tl_h2d_t  tl_win_h2d;
+  tlul_pkg::tl_d2h_t  tl_win_d2h;
 
   logic [255:0] secret_key;
 
@@ -67,8 +69,10 @@ module hmac
   logic        packer_flush_done;
 
   logic        reg_fifo_wvalid;
-  sha_word_t   reg_fifo_wdata;
-  sha_word_t   reg_fifo_wmask;
+  wire [31:0] reg_fifo_wdata;
+  wire [31:0] reg_fifo_wmask;
+  //sha_word_t   reg_fifo_wdata;
+  //sha_word_t   reg_fifo_wmask;
   logic        hmac_fifo_wsel;
   logic        hmac_fifo_wvalid;
   logic [2:0]  hmac_fifo_wdata_sel;
@@ -97,7 +101,8 @@ module hmac
   err_code_e   err_code;
   logic        err_valid;
 
-  sha_word_t [7:0] digest;
+  wire [255:0] digest;
+  //sha_word_t [7:0] digest;
 
   hmac_reg2hw_cfg_reg_t cfg_reg;
   logic                 cfg_block;  // Prevent changing config
@@ -106,33 +111,33 @@ module hmac
   ///////////////////////
   // Connect registers //
   ///////////////////////
-  assign hw2reg.status.fifo_full.d  = fifo_full;
-  assign hw2reg.status.fifo_empty.d = fifo_empty;
-  assign hw2reg.status.fifo_depth.d = fifo_depth;
+  assign hw2reg[616]  = fifo_full;
+  assign hw2reg[617] = fifo_empty;
+  assign hw2reg[615-:5] = fifo_depth;
 
   // secret key
-  assign wipe_secret = reg2hw.wipe_secret.qe;
-  assign wipe_v      = reg2hw.wipe_secret.q;
+  assign wipe_secret = reg2hw[264];
+  assign wipe_v      = reg2hw[296-:32];
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      secret_key <= '0;
+      secret_key <= {256 {1'b0}};
     end else if (wipe_secret) begin
       secret_key <= secret_key ^ {8{wipe_v}};
     end else if (!cfg_block) begin
       // Allow updating secret key only when the engine is in Idle.
       for (int i = 0; i < 8; i++) begin
-        if (reg2hw.key[7-i].qe) begin
-          secret_key[32*i+:32] <= reg2hw.key[7-i].q;
+        if (reg2hw[(7 - i) * 33]) begin
+          secret_key[32*i+:32] <= reg2hw[((7 - i) * 33) + 32-:32];
         end
       end
     end
   end
 
   for (genvar i = 0; i < 8; i++) begin : gen_key_digest
-    assign hw2reg.key[7-i].d      = '0;
+    assign hw2reg[322 + (((7 - i) * 32) + 31)-:32]      = {32{1'b0}};
     // digest
-    assign hw2reg.digest[i].d = conv_endian(digest[i], digest_swap);
+    assign hw2reg[66 + ((i * 32) + 31)-:32] = conv_endian(digest[i * 32+:32], digest_swap);
   end
 
   logic [3:0] unused_cfg_qe;
@@ -144,17 +149,17 @@ module hmac
   assign hmac_en     = cfg_reg.hmac_en.q;
   assign endian_swap = cfg_reg.endian_swap.q;
   assign digest_swap = cfg_reg.digest_swap.q;
-  assign hw2reg.cfg.hmac_en.d     = cfg_reg.hmac_en.q;
-  assign hw2reg.cfg.sha_en.d      = cfg_reg.sha_en.q;
-  assign hw2reg.cfg.endian_swap.d = cfg_reg.endian_swap.q;
-  assign hw2reg.cfg.digest_swap.d = cfg_reg.digest_swap.q;
+  assign hw2reg[621]     = cfg_reg.hmac_en.q;
+  assign hw2reg[620]      = cfg_reg.sha_en.q;
+  assign hw2reg[619] = cfg_reg.endian_swap.q;
+  assign hw2reg[618] = cfg_reg.digest_swap.q;
 
-  assign reg_hash_start   = reg2hw.cmd.hash_start.qe   & reg2hw.cmd.hash_start.q;
-  assign reg_hash_process = reg2hw.cmd.hash_process.qe & reg2hw.cmd.hash_process.q;
+  assign reg_hash_start   = reg2hw[299]   & reg2hw[300];
+  assign reg_hash_process = reg2hw[297] & reg2hw[298];
 
   // Error code register
-  assign hw2reg.err_code.de = err_valid;
-  assign hw2reg.err_code.d  = err_code;
+  assign hw2reg[578] = err_valid;
+  assign hw2reg[610-:32]  = err_code;
 
   /////////////////////
   // Control signals //
@@ -163,7 +168,7 @@ module hmac
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      cfg_block <= '0;
+      cfg_block <= 1'b0;
     end else if (hash_start) begin
       cfg_block <= 1'b 1;
     end else if (reg_hash_done) begin
@@ -173,16 +178,16 @@ module hmac
   // Hold the configuration during the process
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      cfg_reg <= '{endian_swap: '{q: 1'b1, qe: 1'b0}, default:'0};
-    end else if (!cfg_block && reg2hw.cfg.hmac_en.qe) begin
-      cfg_reg <= reg2hw.cfg ;
+      cfg_reg <= 8'b00001000;
+    end else if (!cfg_block && reg2hw[307]) begin
+      cfg_reg <= reg2hw[308-:8];
     end
   end
 
   // Open up the MSG_FIFO from the TL-UL port when it is ready
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      msg_allowed <= '0;
+      msg_allowed <= 1'b0;
     end else if (hash_start) begin
       msg_allowed <= 1'b 1;
     end else if (packer_flush_done) begin
@@ -195,7 +200,7 @@ module hmac
   logic fifo_empty_q, fifo_empty_event;
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      fifo_empty_q <= '1; // By default, it is empty
+      fifo_empty_q <= 1'b1; // By default, it is empty
     end else if (!hmac_fifo_wsel) begin
       fifo_empty_q <= fifo_empty;
     end
@@ -206,35 +211,35 @@ module hmac
   assign event_intr = {err_valid, fifo_empty_event, reg_hash_done};
 
   // instantiate interrupt hardware primitive
-  prim_intr_hw #(.Width(1)) intr_hw_hmac_done (
-    .event_intr_i           (event_intr[0]),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.hmac_done.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.hmac_done.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.hmac_done.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.hmac_done.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.hmac_done.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.hmac_done.d),
-    .intr_o                 (intr_hmac_done_o)
+  prim_intr_hw #(.Width(1)) intr_hw_hmac_done(
+          .event_intr_i(event_intr[0]),
+          .reg2hw_intr_enable_q_i(reg2hw[317]),
+          .reg2hw_intr_test_q_i(reg2hw[314]),
+          .reg2hw_intr_test_qe_i(reg2hw[313]),
+          .reg2hw_intr_state_q_i(reg2hw[320]),
+          .hw2reg_intr_state_de_o(hw2reg[626]),
+          .hw2reg_intr_state_d_o(hw2reg[627]),
+          .intr_o(intr_hmac_done_o)
   );
-  prim_intr_hw #(.Width(1)) intr_hw_fifo_empty (
-    .event_intr_i           (event_intr[1]),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.fifo_empty.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.fifo_empty.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.fifo_empty.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.fifo_empty.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.fifo_empty.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.fifo_empty.d),
-    .intr_o                 (intr_fifo_empty_o)
+  prim_intr_hw #(.Width(1)) intr_hw_fifo_empty(
+          .event_intr_i(event_intr[1]),
+          .reg2hw_intr_enable_q_i(reg2hw[316]),
+          .reg2hw_intr_test_q_i(reg2hw[312]),
+          .reg2hw_intr_test_qe_i(reg2hw[311]),
+          .reg2hw_intr_state_q_i(reg2hw[319]),
+          .hw2reg_intr_state_de_o(hw2reg[624]),
+          .hw2reg_intr_state_d_o(hw2reg[625]),
+          .intr_o(intr_fifo_empty_o)
   );
-  prim_intr_hw #(.Width(1)) intr_hw_hmac_err (
-    .event_intr_i           (event_intr[2]),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.hmac_err.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.hmac_err.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.hmac_err.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.hmac_err.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.hmac_err.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.hmac_err.d),
-    .intr_o                 (intr_hmac_err_o)
+  prim_intr_hw #(.Width(1)) intr_hw_hmac_err(
+          .event_intr_i(event_intr[2]),
+          .reg2hw_intr_enable_q_i(reg2hw[315]),
+          .reg2hw_intr_test_q_i(reg2hw[310]),
+          .reg2hw_intr_test_qe_i(reg2hw[309]),
+          .reg2hw_intr_state_q_i(reg2hw[318]),
+          .hw2reg_intr_state_de_o(hw2reg[622]),
+          .hw2reg_intr_state_d_o(hw2reg[623]),
+          .intr_o(intr_hmac_err_o)
   );
 
   ///////////////
@@ -242,20 +247,18 @@ module hmac
   ///////////////
 
   assign msg_fifo_rvalid = msg_fifo_req & ~msg_fifo_we;
-  assign msg_fifo_rdata  = '1;  // Return all F
-  assign msg_fifo_rerror = '1;  // Return error for read access
+  assign msg_fifo_rdata  = {32{1'b1}};  // Return all F
+  assign msg_fifo_rerror = {2{1'b1}};  // Return error for read access
   assign msg_fifo_gnt    = msg_fifo_req & ~hmac_fifo_wsel & packer_ready;
 
   // FIFO control
-  sha_fifo_t reg_fifo_wentry;
-  assign reg_fifo_wentry.data = conv_endian(reg_fifo_wdata, 1'b1); // always convert
-  assign reg_fifo_wentry.mask = {reg_fifo_wmask[0],  reg_fifo_wmask[8],
-                                 reg_fifo_wmask[16], reg_fifo_wmask[24]};
+  wire [35:0] reg_fifo_wentry;
+  assign reg_fifo_wentry[35-:32] = conv_endian(reg_fifo_wdata, 1'b1);
+  assign reg_fifo_wentry[3-:4] = {reg_fifo_wmask[0], reg_fifo_wmask[8], reg_fifo_wmask[16], reg_fifo_wmask[24]};
   assign fifo_full   = ~fifo_wready;
   assign fifo_empty  = ~fifo_rvalid;
   assign fifo_wvalid = (hmac_fifo_wsel && fifo_wready) ? hmac_fifo_wvalid : reg_fifo_wvalid;
-  assign fifo_wdata  = (hmac_fifo_wsel) ? '{data: digest[hmac_fifo_wdata_sel], mask: '1}
-                                       : reg_fifo_wentry;
+  assign fifo_wdata = (hmac_fifo_wsel ? {digest[hmac_fifo_wdata_sel * 32+:32], {4{1'b1}}} : reg_fifo_wentry);
 
   prim_fifo_sync #(
     .Width   ($bits(sha_fifo_t)),
@@ -287,8 +290,8 @@ module hmac
   ) u_tlul_adapter (
     .clk_i,
     .rst_ni,
-    .tl_i   (tl_win_h2d[0]),
-    .tl_o   (tl_win_d2h[0]),
+    .tl_i   (tl_win_h2d),
+    .tl_o   (tl_win_d2h),
 
     .req_o    (msg_fifo_req   ),
     .gnt_i    (msg_fifo_gnt   ),
@@ -309,7 +312,7 @@ module hmac
   logic [$clog2(32+1)-1:0] wmask_ones;
 
   always_comb begin
-    wmask_ones = '0;
+    wmask_ones = {6{1'b0}};
     for (int i = 0 ; i < 32 ; i++) begin
       wmask_ones = wmask_ones + msg_fifo_wmask[i];
     end
@@ -318,18 +321,18 @@ module hmac
   // Calculate written message
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      message_length <= '0;
+      message_length <= {64 {1'b0}};
     end else if (hash_start) begin
-      message_length <= '0;
+      message_length <= {64 {1'b0}};
     end else if (msg_write && sha_en && packer_ready) begin
       message_length <= message_length + 64'(wmask_ones);
     end
   end
 
-  assign hw2reg.msg_length_upper.de = 1'b1;
-  assign hw2reg.msg_length_upper.d = message_length[63:32];
-  assign hw2reg.msg_length_lower.de = 1'b1;
-  assign hw2reg.msg_length_lower.d = message_length[31:0];
+  assign hw2reg[0] = 1'b1;
+  assign hw2reg[32-:32] = message_length[63:32];
+  assign hw2reg[33] = 1'b1;
+  assign hw2reg[65-:32] = message_length[31:0];
 
 
   // Convert endian here
@@ -445,11 +448,11 @@ module hmac
   assign hash_start_active = reg_hash_start & cfg_block;
   assign msg_push_not_allowed = msg_fifo_req & ~msg_allowed;
 
-  always_comb begin
+  always begin
     update_seckey_inprocess = 1'b0;
     if (cfg_block) begin
       for (int i = 0 ; i < 8 ; i++) begin
-        if (reg2hw.key[i].qe) begin
+        if (reg2hw[i * 33]) begin
           update_seckey_inprocess = update_seckey_inprocess | 1'b1;
         end
       end
@@ -462,7 +465,7 @@ module hmac
   // This ensures only the first event of the series of events can be seen to sw.
   // It is recommended that the software reads ERR_CODE register when interrupt
   // is pending to avoid any race conditions.
-  assign err_valid = ~reg2hw.intr_state.hmac_err.q &
+  assign err_valid = ~reg2hw[318] &
                    ( msg_push_sha_disabled | hash_start_sha_disabled
                    | update_seckey_inprocess | hash_start_active
                    | msg_push_not_allowed );
diff --git a/hw/ip/hmac/rtl/hmac_core.sv b/hw/ip/hmac/rtl/hmac_core.sv
index a1c9515db..52ddaa910 100644
--- a/hw/ip/hmac/rtl/hmac_core.sv
+++ b/hw/ip/hmac/rtl/hmac_core.sv
@@ -111,12 +111,25 @@ module hmac_core import hmac_pkg::*; (
   assign fifo_rready  = (hmac_en) ? (st_q == StMsg) & sha_rready : sha_rready ;
   // sha_rvalid is controlled by State Machine below.
   assign sha_rvalid = (!hmac_en) ? fifo_rvalid : hmac_sha_rvalid ;
-  assign sha_rdata =
+  if (!hmac_en) begin
+    assign sha_rdata = fifo_rdata;
+  end else if (sel_rdata == SelIPad) begin
+    assign sha_rdata.data = i_pad[(BlockSize-1)-32*pad_index-:32];
+    assign sha_rdata.mask = {WordByte{1'b1}};
+  end else if (sel_rdata == SelOPad) begin
+    assign sha_rdata.data = o_pad[(BlockSize-1)-32*pad_index-:32];
+    assign sha_rdata.mask = {WordByte{1'b1}};
+  end else if (sel_rdata == SelFifo) begin
+    assign sha_rdata = fifo_rdata;
+  end else begin
+    assign sha_rdata = '{default: '0};
+  end
+  /*assign sha_rdata =
     (!hmac_en)             ? fifo_rdata                                               :
     (sel_rdata == SelIPad) ? '{data: i_pad[(BlockSize-1)-32*pad_index-:32], mask: '1} :
     (sel_rdata == SelOPad) ? '{data: o_pad[(BlockSize-1)-32*pad_index-:32], mask: '1} :
     (sel_rdata == SelFifo) ? fifo_rdata                                               :
-    '{default: '0};
+    '{default: '0};*/
 
   assign sha_message_length = (!hmac_en)                 ? message_length             :
                               (sel_msglen == SelIPadMsg) ? message_length + BlockSize :
diff --git a/hw/ip/hmac/rtl/hmac_reg_top.sv b/hw/ip/hmac/rtl/hmac_reg_top.sv
index b11dc5747..bccfe829d 100644
--- a/hw/ip/hmac/rtl/hmac_reg_top.sv
+++ b/hw/ip/hmac/rtl/hmac_reg_top.sv
@@ -19,8 +19,10 @@ module hmac_reg_top (
   input  tlul_pkg::tl_d2h_t tl_win_i  [1],
 
   // To HW
-  output hmac_reg_pkg::hmac_reg2hw_t reg2hw, // Write
-  input  hmac_reg_pkg::hmac_hw2reg_t hw2reg, // Read
+  output wire [320:0] reg2hw,
+  input wire [627:0] hw2reg,
+  //output hmac_reg_pkg::hmac_reg2hw_t reg2hw, // Write
+  //input  hmac_reg_pkg::hmac_hw2reg_t hw2reg, // Read
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -210,701 +212,429 @@ module hmac_reg_top (
 
   //   F[hmac_done]: 0:0
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_hmac_done (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_hmac_done_we),
-    .wd     (intr_state_hmac_done_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.hmac_done.de),
-    .d      (hw2reg.intr_state.hmac_done.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.hmac_done.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_hmac_done_qs)
+          .DW(1),
+          .SWACCESS("W1C"),
+          .RESVAL(1'h0)
+  ) u_intr_state_hmac_done(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(intr_state_hmac_done_we),
+          .wd(intr_state_hmac_done_wd),
+          .de(hw2reg[626]),
+          .d(hw2reg[627]),
+          .qe(),
+          .q(reg2hw[320]),
+          .qs(intr_state_hmac_done_qs)
   );
-
-
-  //   F[fifo_empty]: 1:1
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_fifo_empty (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_fifo_empty_we),
-    .wd     (intr_state_fifo_empty_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.fifo_empty.de),
-    .d      (hw2reg.intr_state.fifo_empty.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.fifo_empty.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_fifo_empty_qs)
+          .DW(1),
+          .SWACCESS("W1C"),
+          .RESVAL(1'h0)
+  ) u_intr_state_fifo_empty(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(intr_state_fifo_empty_we),
+          .wd(intr_state_fifo_empty_wd),
+          .de(hw2reg[624]),
+          .d(hw2reg[625]),
+          .qe(),
+          .q(reg2hw[319]),
+          .qs(intr_state_fifo_empty_qs)
   );
-
-
-  //   F[hmac_err]: 2:2
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_hmac_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_hmac_err_we),
-    .wd     (intr_state_hmac_err_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.hmac_err.de),
-    .d      (hw2reg.intr_state.hmac_err.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.hmac_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_hmac_err_qs)
+          .DW(1),
+          .SWACCESS("W1C"),
+          .RESVAL(1'h0)
+  ) u_intr_state_hmac_err(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(intr_state_hmac_err_we),
+          .wd(intr_state_hmac_err_wd),
+          .de(hw2reg[622]),
+          .d(hw2reg[623]),
+          .qe(),
+          .q(reg2hw[318]),
+          .qs(intr_state_hmac_err_qs)
   );
-
-
-  // R[intr_enable]: V(False)
-
-  //   F[hmac_done]: 0:0
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_hmac_done (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_hmac_done_we),
-    .wd     (intr_enable_hmac_done_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.hmac_done.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_hmac_done_qs)
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_intr_enable_hmac_done(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(intr_enable_hmac_done_we),
+          .wd(intr_enable_hmac_done_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[317]),
+          .qs(intr_enable_hmac_done_qs)
   );
-
-
-  //   F[fifo_empty]: 1:1
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_fifo_empty (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_fifo_empty_we),
-    .wd     (intr_enable_fifo_empty_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.fifo_empty.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_fifo_empty_qs)
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_intr_enable_fifo_empty(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(intr_enable_fifo_empty_we),
+          .wd(intr_enable_fifo_empty_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[316]),
+          .qs(intr_enable_fifo_empty_qs)
   );
-
-
-  //   F[hmac_err]: 2:2
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_hmac_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_hmac_err_we),
-    .wd     (intr_enable_hmac_err_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.hmac_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_hmac_err_qs)
-  );
-
-
-  // R[intr_test]: V(True)
-
-  //   F[hmac_done]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_hmac_done (
-    .re     (1'b0),
-    .we     (intr_test_hmac_done_we),
-    .wd     (intr_test_hmac_done_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.hmac_done.qe),
-    .q      (reg2hw.intr_test.hmac_done.q ),
-    .qs     ()
-  );
-
-
-  //   F[fifo_empty]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_fifo_empty (
-    .re     (1'b0),
-    .we     (intr_test_fifo_empty_we),
-    .wd     (intr_test_fifo_empty_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.fifo_empty.qe),
-    .q      (reg2hw.intr_test.fifo_empty.q ),
-    .qs     ()
-  );
-
-
-  //   F[hmac_err]: 2:2
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_hmac_err (
-    .re     (1'b0),
-    .we     (intr_test_hmac_err_we),
-    .wd     (intr_test_hmac_err_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.hmac_err.qe),
-    .q      (reg2hw.intr_test.hmac_err.q ),
-    .qs     ()
-  );
-
-
-  // R[cfg]: V(True)
-
-  //   F[hmac_en]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_cfg_hmac_en (
-    .re     (cfg_hmac_en_re),
-    .we     (cfg_hmac_en_we),
-    .wd     (cfg_hmac_en_wd),
-    .d      (hw2reg.cfg.hmac_en.d),
-    .qre    (),
-    .qe     (reg2hw.cfg.hmac_en.qe),
-    .q      (reg2hw.cfg.hmac_en.q ),
-    .qs     (cfg_hmac_en_qs)
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_intr_enable_hmac_err(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(intr_enable_hmac_err_we),
+          .wd(intr_enable_hmac_err_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[315]),
+          .qs(intr_enable_hmac_err_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_hmac_done(
+          .re(1'b0),
+          .we(intr_test_hmac_done_we),
+          .wd(intr_test_hmac_done_wd),
+          .d(1'b0),
+          .qre(),
+          .qe(reg2hw[313]),
+          .q(reg2hw[314]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_fifo_empty(
+          .re(1'b0),
+          .we(intr_test_fifo_empty_we),
+          .wd(intr_test_fifo_empty_wd),
+          .d(1'b0),
+          .qre(),
+          .qe(reg2hw[311]),
+          .q(reg2hw[312]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_intr_test_hmac_err(
+          .re(1'b0),
+          .we(intr_test_hmac_err_we),
+          .wd(intr_test_hmac_err_wd),
+          .d(1'b0),
+          .qre(),
+          .qe(reg2hw[309]),
+          .q(reg2hw[310]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_cfg_hmac_en(
+          .re(cfg_hmac_en_re),
+          .we(cfg_hmac_en_we),
+          .wd(cfg_hmac_en_wd),
+          .d(hw2reg[621]),
+          .qre(),
+          .qe(reg2hw[307]),
+          .q(reg2hw[308]),
+          .qs(cfg_hmac_en_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_cfg_sha_en(
+          .re(cfg_sha_en_re),
+          .we(cfg_sha_en_we),
+          .wd(cfg_sha_en_wd),
+          .d(hw2reg[620]),
+          .qre(),
+          .qe(reg2hw[305]),
+          .q(reg2hw[306]),
+          .qs(cfg_sha_en_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_cfg_endian_swap(
+          .re(cfg_endian_swap_re),
+          .we(cfg_endian_swap_we),
+          .wd(cfg_endian_swap_wd),
+          .d(hw2reg[619]),
+          .qre(),
+          .qe(reg2hw[303]),
+          .q(reg2hw[304]),
+          .qs(cfg_endian_swap_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_cfg_digest_swap(
+          .re(cfg_digest_swap_re),
+          .we(cfg_digest_swap_we),
+          .wd(cfg_digest_swap_wd),
+          .d(hw2reg[618]),
+          .qre(),
+          .qe(reg2hw[301]),
+          .q(reg2hw[302]),
+          .qs(cfg_digest_swap_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_cmd_hash_start(
+          .re(1'b0),
+          .we(cmd_hash_start_we),
+          .wd(cmd_hash_start_wd),
+          .d(1'b0),
+          .qre(),
+          .qe(reg2hw[299]),
+          .q(reg2hw[300]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_cmd_hash_process(
+          .re(1'b0),
+          .we(cmd_hash_process_we),
+          .wd(cmd_hash_process_wd),
+          .d(1'b0),
+          .qre(),
+          .qe(reg2hw[297]),
+          .q(reg2hw[298]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(1)) u_status_fifo_empty(
+          .re(status_fifo_empty_re),
+          .we(1'b0),
+          .wd(1'b0),
+          .d(hw2reg[617]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(status_fifo_empty_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_status_fifo_full(
+          .re(status_fifo_full_re),
+          .we(1'b0),
+          .wd(1'b0),
+          .d(hw2reg[616]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(status_fifo_full_qs)
+  );
+  prim_subreg_ext #(.DW(5)) u_status_fifo_depth(
+          .re(status_fifo_depth_re),
+          .we(1'b0),
+          .wd({5 {1'b0}}),
+          .d(hw2reg[615-:5]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(status_fifo_depth_qs)
   );
-
-
-  //   F[sha_en]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_cfg_sha_en (
-    .re     (cfg_sha_en_re),
-    .we     (cfg_sha_en_we),
-    .wd     (cfg_sha_en_wd),
-    .d      (hw2reg.cfg.sha_en.d),
-    .qre    (),
-    .qe     (reg2hw.cfg.sha_en.qe),
-    .q      (reg2hw.cfg.sha_en.q ),
-    .qs     (cfg_sha_en_qs)
-  );
-
-
-  //   F[endian_swap]: 2:2
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_cfg_endian_swap (
-    .re     (cfg_endian_swap_re),
-    .we     (cfg_endian_swap_we),
-    .wd     (cfg_endian_swap_wd),
-    .d      (hw2reg.cfg.endian_swap.d),
-    .qre    (),
-    .qe     (reg2hw.cfg.endian_swap.qe),
-    .q      (reg2hw.cfg.endian_swap.q ),
-    .qs     (cfg_endian_swap_qs)
-  );
-
-
-  //   F[digest_swap]: 3:3
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_cfg_digest_swap (
-    .re     (cfg_digest_swap_re),
-    .we     (cfg_digest_swap_we),
-    .wd     (cfg_digest_swap_wd),
-    .d      (hw2reg.cfg.digest_swap.d),
-    .qre    (),
-    .qe     (reg2hw.cfg.digest_swap.qe),
-    .q      (reg2hw.cfg.digest_swap.q ),
-    .qs     (cfg_digest_swap_qs)
-  );
-
-
-  // R[cmd]: V(True)
-
-  //   F[hash_start]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_cmd_hash_start (
-    .re     (1'b0),
-    .we     (cmd_hash_start_we),
-    .wd     (cmd_hash_start_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.cmd.hash_start.qe),
-    .q      (reg2hw.cmd.hash_start.q ),
-    .qs     ()
-  );
-
-
-  //   F[hash_process]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_cmd_hash_process (
-    .re     (1'b0),
-    .we     (cmd_hash_process_we),
-    .wd     (cmd_hash_process_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.cmd.hash_process.qe),
-    .q      (reg2hw.cmd.hash_process.q ),
-    .qs     ()
-  );
-
-
-  // R[status]: V(True)
-
-  //   F[fifo_empty]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_status_fifo_empty (
-    .re     (status_fifo_empty_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.status.fifo_empty.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (status_fifo_empty_qs)
-  );
-
-
-  //   F[fifo_full]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_status_fifo_full (
-    .re     (status_fifo_full_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.status.fifo_full.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (status_fifo_full_qs)
-  );
-
-
-  //   F[fifo_depth]: 8:4
-  prim_subreg_ext #(
-    .DW    (5)
-  ) u_status_fifo_depth (
-    .re     (status_fifo_depth_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.status.fifo_depth.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (status_fifo_depth_qs)
-  );
-
-
-  // R[err_code]: V(False)
-
   prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RO"),
-    .RESVAL  (32'h0)
-  ) u_err_code (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.err_code.de),
-    .d      (hw2reg.err_code.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (err_code_qs)
-  );
-
-
-  // R[wipe_secret]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_wipe_secret (
-    .re     (1'b0),
-    .we     (wipe_secret_we),
-    .wd     (wipe_secret_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.wipe_secret.qe),
-    .q      (reg2hw.wipe_secret.q ),
-    .qs     ()
-  );
-
-
-
-  // Subregister 0 of Multireg key
-  // R[key0]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key0 (
-    .re     (1'b0),
-    .we     (key0_we),
-    .wd     (key0_wd),
-    .d      (hw2reg.key[0].d),
-    .qre    (),
-    .qe     (reg2hw.key[0].qe),
-    .q      (reg2hw.key[0].q ),
-    .qs     ()
-  );
-
-  // Subregister 1 of Multireg key
-  // R[key1]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key1 (
-    .re     (1'b0),
-    .we     (key1_we),
-    .wd     (key1_wd),
-    .d      (hw2reg.key[1].d),
-    .qre    (),
-    .qe     (reg2hw.key[1].qe),
-    .q      (reg2hw.key[1].q ),
-    .qs     ()
-  );
-
-  // Subregister 2 of Multireg key
-  // R[key2]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key2 (
-    .re     (1'b0),
-    .we     (key2_we),
-    .wd     (key2_wd),
-    .d      (hw2reg.key[2].d),
-    .qre    (),
-    .qe     (reg2hw.key[2].qe),
-    .q      (reg2hw.key[2].q ),
-    .qs     ()
-  );
-
-  // Subregister 3 of Multireg key
-  // R[key3]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key3 (
-    .re     (1'b0),
-    .we     (key3_we),
-    .wd     (key3_wd),
-    .d      (hw2reg.key[3].d),
-    .qre    (),
-    .qe     (reg2hw.key[3].qe),
-    .q      (reg2hw.key[3].q ),
-    .qs     ()
-  );
-
-  // Subregister 4 of Multireg key
-  // R[key4]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key4 (
-    .re     (1'b0),
-    .we     (key4_we),
-    .wd     (key4_wd),
-    .d      (hw2reg.key[4].d),
-    .qre    (),
-    .qe     (reg2hw.key[4].qe),
-    .q      (reg2hw.key[4].q ),
-    .qs     ()
-  );
-
-  // Subregister 5 of Multireg key
-  // R[key5]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key5 (
-    .re     (1'b0),
-    .we     (key5_we),
-    .wd     (key5_wd),
-    .d      (hw2reg.key[5].d),
-    .qre    (),
-    .qe     (reg2hw.key[5].qe),
-    .q      (reg2hw.key[5].q ),
-    .qs     ()
-  );
-
-  // Subregister 6 of Multireg key
-  // R[key6]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key6 (
-    .re     (1'b0),
-    .we     (key6_we),
-    .wd     (key6_wd),
-    .d      (hw2reg.key[6].d),
-    .qre    (),
-    .qe     (reg2hw.key[6].qe),
-    .q      (reg2hw.key[6].q ),
-    .qs     ()
-  );
-
-  // Subregister 7 of Multireg key
-  // R[key7]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_key7 (
-    .re     (1'b0),
-    .we     (key7_we),
-    .wd     (key7_wd),
-    .d      (hw2reg.key[7].d),
-    .qre    (),
-    .qe     (reg2hw.key[7].qe),
-    .q      (reg2hw.key[7].q ),
-    .qs     ()
+          .DW(32),
+          .SWACCESS("RO"),
+          .RESVAL(32'h00000000)
+  ) u_err_code(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .de(hw2reg[578]),
+          .d(hw2reg[610-:32]),
+          .qe(),
+          .q(),
+          .qs(err_code_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_wipe_secret(
+          .re(1'b0),
+          .we(wipe_secret_we),
+          .wd(wipe_secret_wd),
+          .d({32 {1'b0}}),
+          .qre(),
+          .qe(reg2hw[264]),
+          .q(reg2hw[296-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key0(
+          .re(1'b0),
+          .we(key0_we),
+          .wd(key0_wd),
+          .d(hw2reg[353-:32]),
+          .qre(),
+          .qe(reg2hw[0]),
+          .q(reg2hw[32-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key1(
+          .re(1'b0),
+          .we(key1_we),
+          .wd(key1_wd),
+          .d(hw2reg[385-:32]),
+          .qre(),
+          .qe(reg2hw[33]),
+          .q(reg2hw[65-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key2(
+          .re(1'b0),
+          .we(key2_we),
+          .wd(key2_wd),
+          .d(hw2reg[417-:32]),
+          .qre(),
+          .qe(reg2hw[66]),
+          .q(reg2hw[98-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key3(
+          .re(1'b0),
+          .we(key3_we),
+          .wd(key3_wd),
+          .d(hw2reg[449-:32]),
+          .qre(),
+          .qe(reg2hw[99]),
+          .q(reg2hw[131-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key4(
+          .re(1'b0),
+          .we(key4_we),
+          .wd(key4_wd),
+          .d(hw2reg[481-:32]),
+          .qre(),
+          .qe(reg2hw[132]),
+          .q(reg2hw[164-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key5(
+          .re(1'b0),
+          .we(key5_we),
+          .wd(key5_wd),
+          .d(hw2reg[513-:32]),
+          .qre(),
+          .qe(reg2hw[165]),
+          .q(reg2hw[197-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key6(
+          .re(1'b0),
+          .we(key6_we),
+          .wd(key6_wd),
+          .d(hw2reg[545-:32]),
+          .qre(),
+          .qe(reg2hw[198]),
+          .q(reg2hw[230-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_key7(
+          .re(1'b0),
+          .we(key7_we),
+          .wd(key7_wd),
+          .d(hw2reg[577-:32]),
+          .qre(),
+          .qe(reg2hw[231]),
+          .q(reg2hw[263-:32]),
+          .qs()
+  );
+  prim_subreg_ext #(.DW(32)) u_digest0(
+          .re(digest0_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[97-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest0_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest1(
+          .re(digest1_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[129-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest1_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest2(
+          .re(digest2_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[161-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest2_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest3(
+          .re(digest3_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[193-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest3_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest4(
+          .re(digest4_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[225-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest4_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest5(
+          .re(digest5_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[257-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest5_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest6(
+          .re(digest6_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[289-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest6_qs)
+  );
+  prim_subreg_ext #(.DW(32)) u_digest7(
+          .re(digest7_re),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .d(hw2reg[321-:32]),
+          .qre(),
+          .qe(),
+          .q(),
+          .qs(digest7_qs)
   );
-
-
-
-  // Subregister 0 of Multireg digest
-  // R[digest0]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest0 (
-    .re     (digest0_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[0].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest0_qs)
-  );
-
-  // Subregister 1 of Multireg digest
-  // R[digest1]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest1 (
-    .re     (digest1_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[1].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest1_qs)
-  );
-
-  // Subregister 2 of Multireg digest
-  // R[digest2]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest2 (
-    .re     (digest2_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[2].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest2_qs)
-  );
-
-  // Subregister 3 of Multireg digest
-  // R[digest3]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest3 (
-    .re     (digest3_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[3].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest3_qs)
-  );
-
-  // Subregister 4 of Multireg digest
-  // R[digest4]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest4 (
-    .re     (digest4_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[4].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest4_qs)
-  );
-
-  // Subregister 5 of Multireg digest
-  // R[digest5]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest5 (
-    .re     (digest5_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[5].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest5_qs)
-  );
-
-  // Subregister 6 of Multireg digest
-  // R[digest6]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest6 (
-    .re     (digest6_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[6].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest6_qs)
-  );
-
-  // Subregister 7 of Multireg digest
-  // R[digest7]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (32)
-  ) u_digest7 (
-    .re     (digest7_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.digest[7].d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (digest7_qs)
-  );
-
-
-  // R[msg_length_lower]: V(False)
-
   prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RO"),
-    .RESVAL  (32'h0)
-  ) u_msg_length_lower (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.msg_length_lower.de),
-    .d      (hw2reg.msg_length_lower.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (msg_length_lower_qs)
+          .DW(32),
+          .SWACCESS("RO"),
+          .RESVAL(32'h00000000)
+  ) u_msg_length_lower(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .de(hw2reg[33]),
+          .d(hw2reg[65-:32]),
+          .qe(),
+          .q(),
+          .qs(msg_length_lower_qs)
   );
-
-
-  // R[msg_length_upper]: V(False)
-
   prim_subreg #(
-    .DW      (32),
-    .SWACCESS("RO"),
-    .RESVAL  (32'h0)
-  ) u_msg_length_upper (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.msg_length_upper.de),
-    .d      (hw2reg.msg_length_upper.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (msg_length_upper_qs)
+          .DW(32),
+          .SWACCESS("RO"),
+          .RESVAL(32'h00000000)
+  ) u_msg_length_upper(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd({32 {1'b0}}),
+          .de(hw2reg[0]),
+          .d(hw2reg[32-:32]),
+          .qe(),
+          .q(),
+          .qs(msg_length_upper_qs)
   );
 
 
@@ -912,7 +642,7 @@ module hmac_reg_top (
 
   logic [25:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = {26{1'b0}};
     addr_hit[ 0] = (reg_addr == HMAC_INTR_STATE_OFFSET);
     addr_hit[ 1] = (reg_addr == HMAC_INTR_ENABLE_OFFSET);
     addr_hit[ 2] = (reg_addr == HMAC_INTR_TEST_OFFSET);
@@ -1077,7 +807,7 @@ module hmac_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {DW{1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = intr_state_hmac_done_qs;
@@ -1092,9 +822,9 @@ module hmac_reg_top (
       end
 
       addr_hit[2]: begin
-        reg_rdata_next[0] = '0;
-        reg_rdata_next[1] = '0;
-        reg_rdata_next[2] = '0;
+        reg_rdata_next[0] = 1'b0;
+        reg_rdata_next[1] = 1'b0;
+        reg_rdata_next[2] = 1'b0;
       end
 
       addr_hit[3]: begin
@@ -1105,8 +835,8 @@ module hmac_reg_top (
       end
 
       addr_hit[4]: begin
-        reg_rdata_next[0] = '0;
-        reg_rdata_next[1] = '0;
+        reg_rdata_next[0] = 1'b0;
+        reg_rdata_next[1] = 1'b0;
       end
 
       addr_hit[5]: begin
@@ -1120,39 +850,39 @@ module hmac_reg_top (
       end
 
       addr_hit[7]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[8]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[9]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[10]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[11]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[12]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[13]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[14]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[15]: begin
-        reg_rdata_next[31:0] = '0;
+        reg_rdata_next[31:0] = {32{1'b0}};
       end
 
       addr_hit[16]: begin
@@ -1196,7 +926,7 @@ module hmac_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {DW{1'b1}};
       end
     endcase
   end
diff --git a/hw/ip/hmac/rtl/sha2_pad.sv b/hw/ip/hmac/rtl/sha2_pad.sv
index 5ee90881c..2667008be 100644
--- a/hw/ip/hmac/rtl/sha2_pad.sv
+++ b/hw/ip/hmac/rtl/sha2_pad.sv
@@ -89,7 +89,7 @@ module sha2_pad import hmac_pkg::*; (
       end
 
       Pad00: begin
-        shaf_rdata = '0;
+        shaf_rdata = 32'h00000000;
       end
 
       LenHi: begin
@@ -101,7 +101,7 @@ module sha2_pad import hmac_pkg::*; (
       end
 
       default: begin
-        shaf_rdata = '0;
+        shaf_rdata = 32'h00000000;
       end
     endcase
   end
@@ -298,9 +298,9 @@ module sha2_pad import hmac_pkg::*; (
   // tx_count
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      tx_count <= '0;
+      tx_count <= 64'h0000000000000000;
     end else if (hash_start) begin
-      tx_count <= '0;
+      tx_count <= 64'h0000000000000000;
     end else if (inc_txcount) begin
       tx_count[63:5] <= tx_count[63:5] + 1'b1;
     end
diff --git a/hw/ip/otbn/rtl/otbn_core.sv b/hw/ip/otbn/rtl/otbn_core.sv
index 8b13db4f5..312277b5f 100644
--- a/hw/ip/otbn/rtl/otbn_core.sv
+++ b/hw/ip/otbn/rtl/otbn_core.sv
@@ -10,7 +10,6 @@
  * This module is the top-level of the OTBN processing core.
  */
 module otbn_core
-  import otbn_pkg::*;
 #(
   // Size of the instruction memory, in bytes
   parameter int ImemSizeByte = 4096,
@@ -40,9 +39,9 @@ module otbn_core
   output logic                     dmem_req_o,
   output logic                     dmem_write_o,
   output logic [DmemAddrWidth-1:0] dmem_addr_o,
-  output logic [WLEN-1:0]          dmem_wdata_o,
-  output logic [WLEN-1:0]          dmem_wmask_o,
-  input  logic [WLEN-1:0]          dmem_rdata_i,
+  output logic [256-1:0]          dmem_wdata_o,
+  output logic [256-1:0]          dmem_wmask_o,
+  input  logic [256-1:0]          dmem_rdata_i,
   input  logic                     dmem_rvalid_i,
   input  logic [1:0]               dmem_rerror_i
 );
diff --git a/hw/ip/otbn/rtl/otbn_reg_top.sv b/hw/ip/otbn/rtl/otbn_reg_top.sv
index 052cb2f5a..b62227975 100644
--- a/hw/ip/otbn/rtl/otbn_reg_top.sv
+++ b/hw/ip/otbn/rtl/otbn_reg_top.sv
@@ -54,13 +54,13 @@ module otbn_reg_top (
   logic [1:0] reg_steer;
 
   // socket_1n connection
-  assign tl_reg_h2d = tl_socket_h2d[2];
-  assign tl_socket_d2h[2] = tl_reg_d2h;
+  assign tl_reg_h2d = tl_socket_h2d[0];
 
-  assign tl_win_o[0] = tl_socket_h2d[0];
-  assign tl_socket_d2h[0] = tl_win_i[0];
-  assign tl_win_o[1] = tl_socket_h2d[1];
-  assign tl_socket_d2h[1] = tl_win_i[1];
+  assign tl_win_o[0] = tl_socket_h2d[1];
+  assign tl_win_o[1] = tl_socket_h2d[2];
+  assign tl_socket_d2h[0] = tl_reg_d2h;
+  assign tl_socket_d2h[1] = tl_win_i[0];
+  assign tl_socket_d2h[2] = tl_win_i[1];
 
   // Create Socket_1n
   tlul_socket_1n #(
diff --git a/hw/ip/pinmux/rtl/pinmux.sv b/hw/ip/pinmux/rtl/pinmux.sv
index 92da2e81c..89b58a8f7 100644
--- a/hw/ip/pinmux/rtl/pinmux.sv
+++ b/hw/ip/pinmux/rtl/pinmux.sv
@@ -64,8 +64,10 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
   // Regfile Breakout and Mapping //
   //////////////////////////////////
 
-  pinmux_reg2hw_t reg2hw;
-  pinmux_hw2reg_t hw2reg;
+  //pinmux_reg2hw_t reg2hw;
+  //pinmux_hw2reg_t hw2reg;
+  wire [660:0] reg2hw;
+  wire [37:0] hw2reg;
 
   pinmux_reg_top u_reg (
     .clk_i  ,
@@ -95,13 +97,13 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
   // 2: high-z
   // 3: previous value
   for (genvar k = 0; k < NMioPads; k++) begin : gen_mio_sleep
-    assign mio_out_sleep_d[k] = (reg2hw.mio_out_sleep_val[k].q == 0) ? 1'b0 :
-                                (reg2hw.mio_out_sleep_val[k].q == 1) ? 1'b1 :
-                                (reg2hw.mio_out_sleep_val[k].q == 2) ? 1'b0 : mio_out_o[k];
+    assign mio_out_sleep_d[k] = (reg2hw[213 + ((k * 2) + 1)-:2] == 0) ? 1'b0 :
+                                (reg2hw[213 + ((k * 2) + 1)-:2] == 1) ? 1'b1 :
+                                (reg2hw[213 + ((k * 2) + 1)-:2] == 2) ? 1'b0 : mio_out_o[k];
 
-    assign mio_oe_sleep_d[k] = (reg2hw.mio_out_sleep_val[k].q == 0) ? 1'b1 :
-                               (reg2hw.mio_out_sleep_val[k].q == 1) ? 1'b1 :
-                               (reg2hw.mio_out_sleep_val[k].q == 2) ? 1'b0 : mio_oe_o[k];
+    assign mio_oe_sleep_d[k] = (reg2hw[213 + ((k * 2) + 1)-:2] == 0) ? 1'b1 :
+                               (reg2hw[213 + ((k * 2) + 1)-:2] == 1) ? 1'b1 :
+                               (reg2hw[213 + ((k * 2) + 1)-:2] == 2) ? 1'b0 : mio_oe_o[k];
   end
 
   // since DIO pads are permanently mapped to a specific peripheral,
@@ -109,10 +111,10 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
   // outputs / inouts.
   for (genvar k = 0; k < NDioPads; k++) begin : gen_dio_sleep
     if (DioPeriphHasSleepMode[k]) begin : gen_warl_connect
-      assign hw2reg.dio_out_sleep_val[k].d = dio_out_sleep_val_q[k];
+      assign hw2reg[8 + ((k * 2) + 1)-:2] = dio_out_sleep_val_q[k];
 
-      assign dio_out_sleep_val_d[k] = (reg2hw.dio_out_sleep_val[k].qe) ?
-                                      reg2hw.dio_out_sleep_val[k].q :
+      assign dio_out_sleep_val_d[k] = (reg2hw[168 + (k * 3)]) ?
+                                      reg2hw[168 + ((k * 3) + 2)-:2] :
                                       dio_out_sleep_val_q[k];
 
       assign dio_out_sleep_d[k] = (dio_out_sleep_val_q[k] == 0) ? 1'b0 :
@@ -124,7 +126,7 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
                                  (dio_out_sleep_val_q[k] == 2) ? 1'b0 : dio_oe_o[k];
     end else begin : gen_warl_tie0
       // these signals will be unused
-      assign hw2reg.dio_out_sleep_val[k].d = 2'b10; // default value defined in hjson
+      assign hw2reg[8 + ((k * 2) + 1)-:2] = 2'b10; // default value defined in hjson
       assign dio_out_sleep_val_d[k] = 2'b10; // default value defined in hjson
       assign dio_out_sleep_d[k]     = '0;
       assign dio_oe_sleep_d[k]      = '0;
@@ -135,10 +137,10 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
     if (!rst_ni) begin
       sleep_en_q          <= 1'b0;
       dio_out_sleep_val_q <= {NDioPads{2'b10}}; // default value defined in hjson
-      mio_out_sleep_q     <= '0;
-      mio_oe_sleep_q      <= '0;
-      dio_out_sleep_q     <= '0;
-      dio_oe_sleep_q      <= '0;
+      mio_out_sleep_q <= {32 {1'b0}};
+      mio_oe_sleep_q <= {32 {1'b0}};
+      dio_out_sleep_q <= {15 {1'b0}};
+      dio_oe_sleep_q <= {15 {1'b0}};
     end else begin
       sleep_en_q          <= sleep_en_i;
       dio_out_sleep_val_q <= dio_out_sleep_val_d;
@@ -163,11 +165,11 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
   // 1. make sure mux is aligned to a power of 2 to avoid Xes.
   logic [AlignedMuxSize-1:0] mio_data_mux;
   // TODO: need a way to select which IO POK signal to use por pin
-  assign mio_data_mux = AlignedMuxSize'({(&io_pok_i) ? mio_in_i : '0, 1'b1, 1'b0});
+  assign mio_data_mux = AlignedMuxSize'({(&io_pok_i) ? mio_in_i : {32 {1'b0}}, 1'b1, 1'b0});
 
   for (genvar k = 0; k < NMioPeriphIn; k++) begin : gen_mio_periph_in
     // index using configured insel
-    assign mio_to_periph_o[k] = mio_data_mux[reg2hw.periph_insel[k].q];
+    assign mio_to_periph_o[k] = mio_data_mux[reg2hw[469 + ((k * 6) + 5)-:6]];
   end
 
   ////////////////
@@ -184,10 +186,10 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
   for (genvar k = 0; k < NMioPads; k++) begin : gen_mio_out
     logic sleep_en;
     // check whether this peripheral can actually go to sleep
-    assign sleep_en = periph_sleep_mux[reg2hw.mio_outsel[k].q] & sleep_en_q;
+    assign sleep_en = periph_sleep_mux[reg2hw[277 + ((k * 6) + 5)-:6]] & sleep_en_q;
     // index using configured outsel
-    assign mio_out_o[k] = (sleep_en) ? mio_out_sleep_q[k] : periph_data_mux[reg2hw.mio_outsel[k].q];
-    assign mio_oe_o[k]  = (sleep_en) ? mio_oe_sleep_q[k]  : periph_oe_mux[reg2hw.mio_outsel[k].q];
+    assign mio_out_o[k] = (sleep_en) ? mio_out_sleep_q[k] : periph_data_mux[reg2hw[277 + ((k * 6) + 5)-:6]];
+    assign mio_oe_o[k]  = (sleep_en) ? mio_oe_sleep_q[k]  : periph_oe_mux[reg2hw[277 + ((k * 6) + 5)-:6]];
   end
 
   /////////////////////
@@ -231,9 +233,9 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
 
   for (genvar k = 0; k < NWkupDetect; k++) begin : gen_wkup_detect
     logic pin_value;
-    assign pin_value = (reg2hw.wkup_detector[k].miodio.q)           ?
-                       dio_data_mux[reg2hw.wkup_detector_padsel[k]] :
-                       mio_data_mux[reg2hw.wkup_detector_padsel[k]];
+    assign pin_value = (reg2hw[120 + (k * 5)])           ?
+                       dio_data_mux[reg2hw[16 + (k * 5)+:5]] :
+                       mio_data_mux[reg2hw[16 + (k * 5)+:5]];
 
     pinmux_wkup i_pinmux_wkup (
       .clk_i,
@@ -241,15 +243,15 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
       .clk_aon_i,
       .rst_aon_ni,
       // config signals. these are synched to clk_aon internally
-      .wkup_en_i          ( reg2hw.wkup_detector_en[k].q                ),
-      .filter_en_i        ( reg2hw.wkup_detector[k].filter.q            ),
-      .wkup_mode_i        ( wkup_mode_e'(reg2hw.wkup_detector[k].mode.q)),
-      .wkup_cnt_th_i      ( reg2hw.wkup_detector_cnt_th[k].q            ),
+      .wkup_en_i          ( reg2hw[160 + k]                ),
+      .filter_en_i        ( reg2hw[120 + ((k * 5) + 1)]            ),
+      .wkup_mode_i        ( wkup_mode_e'(reg2hw[120 + ((k * 5) + 4)-:3])),
+      .wkup_cnt_th_i      ( reg2hw[56 + ((k * 8) + 7)-:8]            ),
       .pin_value_i        ( pin_value                                   ),
       // cause reg signals. these are synched from/to clk_aon internally
-      .wkup_cause_valid_i ( reg2hw.wkup_cause[k].qe                     ),
-      .wkup_cause_data_i  ( reg2hw.wkup_cause[k].q                      ),
-      .wkup_cause_data_o  ( hw2reg.wkup_cause[k].d                      ),
+      .wkup_cause_valid_i ( reg2hw[k * 2]                     ),
+      .wkup_cause_data_i  ( reg2hw[(k * 2) + 1]                      ),
+      .wkup_cause_data_o  ( hw2reg[k]                      ),
       // wakeup request signals on clk_aon (level encoded)
       .aon_wkup_req_o     ( aon_wkup_req[k]                             )
     );
@@ -288,8 +290,8 @@ module pinmux import pinmux_pkg::*; import pinmux_reg_pkg::*; (
 
   always_ff @(posedge clk_i or negedge rst_ni) begin : p_strap_sample
     if (!rst_ni) begin
-      lc_strap_q       <= '0;
-      dft_strap_test_q <= '0;
+      lc_strap_q       <= {3{1'b0}};
+      dft_strap_test_q <= {3{1'b0}};
     end else begin
       lc_strap_q       <= lc_strap_d;
       dft_strap_test_q <= dft_strap_test_d;
diff --git a/hw/ip/pinmux/rtl/pinmux_wkup.sv b/hw/ip/pinmux/rtl/pinmux_wkup.sv
index 101062346..2eb8496b3 100644
--- a/hw/ip/pinmux/rtl/pinmux_wkup.sv
+++ b/hw/ip/pinmux/rtl/pinmux_wkup.sv
@@ -2,7 +2,7 @@
 // Licensed under the Apache License, Version 2.0, see LICENSE for details.
 // SPDX-License-Identifier: Apache-2.0
 //
-module pinmux_wkup import pinmux_pkg::*; import pinmux_reg_pkg::*; #(
+module pinmux_wkup import pinmux_pkg::*; #(
   parameter int Cycles = 4
 ) (
   input                    clk_i,
@@ -16,7 +16,7 @@ module pinmux_wkup import pinmux_pkg::*; import pinmux_reg_pkg::*; #(
   input                    wkup_en_i,
   input                    filter_en_i,
   input wkup_mode_e        wkup_mode_i,
-  input [WkupCntWidth-1:0] wkup_cnt_th_i,
+  input [7:0] wkup_cnt_th_i,
   input                    pin_value_i,
   // Signals to/from cause register.
   // They are synched to/from the AON clock internally
@@ -37,7 +37,7 @@ module pinmux_wkup import pinmux_pkg::*; import pinmux_reg_pkg::*; #(
   wkup_mode_e aon_wkup_mode_q;
   logic aon_filter_en_q;
   logic aon_wkup_en_d, aon_wkup_en_q;
-  logic [WkupCntWidth-1:0] aon_wkup_cnt_th_q;
+  logic [7:0] aon_wkup_cnt_th_q;
 
   prim_flop_2sync #(
     .Width(1)
@@ -106,7 +106,7 @@ module pinmux_wkup import pinmux_pkg::*; import pinmux_reg_pkg::*; #(
   assign aon_rising  =  aon_filter_out_d & ~aon_filter_out_q;
 
   logic aon_cnt_en, aon_cnt_eq_th;
-  logic [WkupCntWidth-1:0] aon_cnt_d, aon_cnt_q;
+  logic [7:0] aon_cnt_d, aon_cnt_q;
   assign aon_cnt_d = (aon_cnt_eq_th) ? '0                :
                      (aon_cnt_en)    ?  aon_cnt_q + 1'b1 : '0;
 
diff --git a/hw/ip/prim/rtl/prim_arbiter_ppc.sv b/hw/ip/prim/rtl/prim_arbiter_ppc.sv
index 9ec473f85..86bef1e9d 100644
--- a/hw/ip/prim/rtl/prim_arbiter_ppc.sv
+++ b/hw/ip/prim/rtl/prim_arbiter_ppc.sv
@@ -113,12 +113,14 @@ module prim_arbiter_ppc #(
       end
     end else begin: gen_nodatapath
       assign data_o = '1;
-      // TODO: waive data_i from NOT_READ error
+      // The following signal is used to avoid possible lint errors.
+      logic [DW-1:0] unused_data [N];
+      assign unused_data = data_i;
     end
 
     always_comb begin
       idx_o = '0;
-      for (int i = 0 ; i < N ; i++) begin
+      for (int unsigned i = 0 ; i < N ; i++) begin
         if (winner[i]) begin
           idx_o = i[IdxW-1:0];
         end
@@ -222,4 +224,3 @@ end
 `endif
 
 endmodule : prim_arbiter_ppc
-
diff --git a/hw/ip/prim/rtl/prim_diff_decode.sv b/hw/ip/prim/rtl/prim_diff_decode.sv
index c06a77d77..8c9db0c61 100644
--- a/hw/ip/prim/rtl/prim_diff_decode.sv
+++ b/hw/ip/prim/rtl/prim_diff_decode.sv
@@ -42,9 +42,9 @@ module prim_diff_decode #(
   ///////////////////////////////////////////////////////////////
   // synchronization regs for incoming diff pair (if required) //
   ///////////////////////////////////////////////////////////////
+  typedef enum logic [1:0] {IsStd, IsSkewed, SigInt} state_e;
   if (AsyncOn) begin : gen_async
 
-    typedef enum logic [1:0] {IsStd, IsSkewed, SigInt} state_e;
     state_e state_d, state_q;
     logic diff_p_edge, diff_n_edge, diff_check_ok, level;
 
diff --git a/hw/ip/prim/rtl/prim_prince.sv b/hw/ip/prim/rtl/prim_prince.sv
index 423a7ca21..cb790a861 100644
--- a/hw/ip/prim/rtl/prim_prince.sv
+++ b/hw/ip/prim/rtl/prim_prince.sv
@@ -48,7 +48,7 @@ module prim_prince #(
   output logic                 valid_o,
   output logic [DataWidth-1:0] data_o
 );
-
+  import prim_cipher_pkg::*;
   ///////////////////
   // key expansion //
   ///////////////////
@@ -63,7 +63,7 @@ module prim_prince #(
     if (dec_i) begin
       k0          = k0_prime_d;
       k0_prime_d  = key_i[DataWidth-1:0];
-      k1_d       ^= prim_cipher_pkg::PRINCE_ALPHA_CONST[DataWidth-1:0];
+      k1_d       ^= PRINCE_ALPHA_CONST[DataWidth-1:0];
     end
   end
 
@@ -106,7 +106,7 @@ module prim_prince #(
   always_comb begin : p_pre_round_xor
     data_state[0] = data_i ^ k0;
     data_state[0] ^= k1_d;
-    data_state[0] ^= prim_cipher_pkg::PRINCE_ROUND_CONST[0][DataWidth-1:0];
+    data_state[0] ^= PRINCE_ROUND_CONST[0][DataWidth-1:0];
   end
 
   // forward pass
@@ -114,24 +114,24 @@ module prim_prince #(
     logic [DataWidth-1:0] data_state_round;
     if (DataWidth == 64) begin : gen_fwd_d64
       always_comb begin : p_fwd_d64
-        data_state_round = prim_cipher_pkg::sbox4_64bit(data_state[k-1],
-            prim_cipher_pkg::PRINCE_SBOX4);
-        data_state_round = prim_cipher_pkg::prince_mult_prime_64bit(data_state_round);
-        data_state_round = prim_cipher_pkg::prince_shiftrows_64bit(data_state_round,
-            prim_cipher_pkg::PRINCE_SHIFT_ROWS64);
+        data_state_round = sbox4_64bit(data_state[k-1],
+            PRINCE_SBOX4);
+        data_state_round = prince_mult_prime_64bit(data_state_round);
+        data_state_round = prince_shiftrows_64bit(data_state_round,
+            PRINCE_SHIFT_ROWS64);
       end
     end else begin : gen_fwd_d32
       always_comb begin : p_fwd_d32
-        data_state_round = prim_cipher_pkg::sbox4_32bit(data_state[k-1],
-            prim_cipher_pkg::PRINCE_SBOX4);
-        data_state_round = prim_cipher_pkg::prince_mult_prime_32bit(data_state_round);
-        data_state_round = prim_cipher_pkg::prince_shiftrows_32bit(data_state_round,
-            prim_cipher_pkg::PRINCE_SHIFT_ROWS64);
+        data_state_round = sbox4_32bit(data_state[k-1],
+            PRINCE_SBOX4);
+        data_state_round = prince_mult_prime_32bit(data_state_round);
+        data_state_round = prince_shiftrows_32bit(data_state_round,
+            PRINCE_SHIFT_ROWS64);
       end
     end
     logic [DataWidth-1:0] data_state_xor;
     assign data_state_xor = data_state_round ^
-                            prim_cipher_pkg::PRINCE_ROUND_CONST[k][DataWidth-1:0];
+                            PRINCE_ROUND_CONST[k][DataWidth-1:0];
     // improved keyschedule proposed by https://eprint.iacr.org/2014/656.pdf
     if (k % 2 == 1) assign data_state[k]  = data_state_xor ^ k0_new_d;
     else            assign data_state[k]  = data_state_xor ^ k1_d;
@@ -141,19 +141,19 @@ module prim_prince #(
   logic [DataWidth-1:0] data_state_middle_d, data_state_middle_q, data_state_middle;
   if (DataWidth == 64) begin : gen_middle_d64
     always_comb begin : p_middle_d64
-      data_state_middle_d = prim_cipher_pkg::sbox4_64bit(data_state[NumRoundsHalf],
-          prim_cipher_pkg::PRINCE_SBOX4);
-      data_state_middle = prim_cipher_pkg::prince_mult_prime_64bit(data_state_middle_q);
-      data_state_middle = prim_cipher_pkg::sbox4_64bit(data_state_middle,
-          prim_cipher_pkg::PRINCE_SBOX4_INV);
+      data_state_middle_d = sbox4_64bit(data_state[NumRoundsHalf],
+          PRINCE_SBOX4);
+      data_state_middle = prince_mult_prime_64bit(data_state_middle_q);
+      data_state_middle = sbox4_64bit(data_state_middle,
+          PRINCE_SBOX4_INV);
     end
   end else begin : gen_middle_d32
     always_comb begin : p_middle_d32
-      data_state_middle_d = prim_cipher_pkg::sbox4_32bit(data_state_middle[NumRoundsHalf],
-          prim_cipher_pkg::PRINCE_SBOX4);
-      data_state_middle = prim_cipher_pkg::prince_mult_prime_32bit(data_state_middle_q);
-      data_state_middle = prim_cipher_pkg::sbox4_32bit(data_state_middle,
-          prim_cipher_pkg::PRINCE_SBOX4_INV);
+      data_state_middle_d = sbox4_32bit(data_state_middle[NumRoundsHalf],
+          PRINCE_SBOX4);
+      data_state_middle = prince_mult_prime_32bit(data_state_middle_q);
+      data_state_middle = sbox4_32bit(data_state_middle,
+          PRINCE_SBOX4_INV);
     end
   end
 
@@ -187,24 +187,24 @@ module prim_prince #(
     else            assign data_state_xor0 = data_state[NumRoundsHalf+k] ^ k1_q;
     // the construction is reflective, hence the subtraction with NumRoundsHalf
     assign data_state_xor1 = data_state_xor0 ^
-                             prim_cipher_pkg::PRINCE_ROUND_CONST[10-NumRoundsHalf+k][DataWidth-1:0];
+                             PRINCE_ROUND_CONST[10-NumRoundsHalf+k][DataWidth-1:0];
 
     logic [DataWidth-1:0] data_state_bwd;
     if (DataWidth == 64) begin : gen_bwd_d64
       always_comb begin : p_bwd_d64
-        data_state_bwd = prim_cipher_pkg::prince_shiftrows_64bit(data_state_xor1,
-            prim_cipher_pkg::PRINCE_SHIFT_ROWS64_INV);
-        data_state_bwd = prim_cipher_pkg::prince_mult_prime_64bit(data_state_bwd);
-        data_state[NumRoundsHalf+k+1] = prim_cipher_pkg::sbox4_64bit(data_state_bwd,
-            prim_cipher_pkg::PRINCE_SBOX4_INV);
+        data_state_bwd = prince_shiftrows_64bit(data_state_xor1,
+            PRINCE_SHIFT_ROWS64_INV);
+        data_state_bwd = prince_mult_prime_64bit(data_state_bwd);
+        data_state[NumRoundsHalf+k+1] = sbox4_64bit(data_state_bwd,
+            PRINCE_SBOX4_INV);
       end
     end else begin : gen_bwd_d32
       always_comb begin : p_bwd_d32
-        data_state_bwd = prim_cipher_pkg::prince_shiftrows_32bit(data_state_xor1,
-            prim_cipher_pkg::PRINCE_SHIFT_ROWS64_INV);
-        data_state_bwd = prim_cipher_pkg::prince_mult_prime_32bit(data_state_bwd);
-        data_state[NumRoundsHalf+k+1] = prim_cipher_pkg::sbox4_32bit(data_state_bwd,
-            prim_cipher_pkg::PRINCE_SBOX4_INV);
+        data_state_bwd = prince_shiftrows_32bit(data_state_xor1,
+            PRINCE_SHIFT_ROWS64_INV);
+        data_state_bwd = prince_mult_prime_32bit(data_state_bwd);
+        data_state[NumRoundsHalf+k+1] = sbox4_32bit(data_state_bwd,
+            PRINCE_SBOX4_INV);
       end
     end
   end
@@ -212,7 +212,7 @@ module prim_prince #(
   // post-rounds
   always_comb begin : p_post_round_xor
     data_o  = data_state[2*NumRoundsHalf+1] ^
-              prim_cipher_pkg::PRINCE_ROUND_CONST[11][DataWidth-1:0];
+              PRINCE_ROUND_CONST[11][DataWidth-1:0];
     data_o ^= k1_q;
     data_o ^= k0_prime_q;
   end
diff --git a/hw/ip/prim/rtl/prim_ram_2p_adv.sv b/hw/ip/prim/rtl/prim_ram_2p_adv.sv
index c6b466982..d34b942cd 100644
--- a/hw/ip/prim/rtl/prim_ram_2p_adv.sv
+++ b/hw/ip/prim/rtl/prim_ram_2p_adv.sv
@@ -6,18 +6,18 @@
 //
 // Supported configurations:
 // - ECC for 32b wide memories with no write mask
-//   (Width == 32 && DataBitsPerMask == 32).
-// - Byte parity if Width is a multiple of 8 bit and write masks have Byte
+//   (RamWidth == 32 && DataBitsPerMask == 32).
+// - Byte parity if RamWidth is a multiple of 8 bit and write masks have Byte
 //   granularity (DataBitsPerMask == 8).
 //
 // Note that the write mask needs to be per Byte if parity is enabled. If ECC is enabled, the write
-// mask cannot be used and has to be tied to {Width{1'b1}}.
+// mask cannot be used and has to be tied to {RamWidth{1'b1}}.
 
 `include "prim_assert.sv"
 
 module prim_ram_2p_adv #(
-  parameter  int Depth                = 512,
-  parameter  int Width                = 32,
+  parameter  int RamDepth                = 512,
+  parameter  int RamWidth                = 32,
   parameter  int DataBitsPerMask      = 1,  // Number of data bits per bit of write mask
   parameter  int CfgW                 = 8,  // WTC, RTC, etc
   parameter      MemInitFile          = "", // VMEM file to initialize the memory with
@@ -28,7 +28,7 @@ module prim_ram_2p_adv #(
   parameter  bit EnableInputPipeline  = 0, // Adds an input register (read latency +1)
   parameter  bit EnableOutputPipeline = 0, // Adds an output register (read latency +1)
 
-  localparam int Aw                   = prim_util_pkg::vbits(Depth)
+  localparam int Aw                   = prim_util_pkg::vbits(RamDepth)
 ) (
   input                    clk_i,
   input                    rst_ni,
@@ -36,18 +36,18 @@ module prim_ram_2p_adv #(
   input                    a_req_i,
   input                    a_write_i,
   input        [Aw-1:0]    a_addr_i,
-  input        [Width-1:0] a_wdata_i,
-  input        [Width-1:0] a_wmask_i,  // cannot be used with ECC, tie to 1 in that case
-  output logic [Width-1:0] a_rdata_o,
+  input        [RamWidth-1:0] a_wdata_i,
+  input        [RamWidth-1:0] a_wmask_i,  // cannot be used with ECC, tie to 1 in that case
+  output logic [RamWidth-1:0] a_rdata_o,
   output logic             a_rvalid_o, // read response (a_rdata_o) is valid
   output logic [1:0]       a_rerror_o, // Bit1: Uncorrectable, Bit0: Correctable
 
   input                    b_req_i,
   input                    b_write_i,
   input        [Aw-1:0]    b_addr_i,
-  input        [Width-1:0] b_wdata_i,
-  input        [Width-1:0] b_wmask_i,  // cannot be used with ECC, tie to 1 in that case
-  output logic [Width-1:0] b_rdata_o,
+  input        [RamWidth-1:0] b_wdata_i,
+  input        [RamWidth-1:0] b_wmask_i,  // cannot be used with ECC, tie to 1 in that case
+  output logic [RamWidth-1:0] b_rdata_o,
   output logic             b_rvalid_o, // read response (b_rdata_o) is valid
   output logic [1:0]       b_rerror_o, // Bit1: Uncorrectable, Bit0: Correctable
 
@@ -55,8 +55,8 @@ module prim_ram_2p_adv #(
 );
 
   prim_ram_2p_async_adv #(
-    .Depth               (Depth),
-    .Width               (Width),
+    .RamDepth               (RamDepth),
+    .RamWidth               (RamWidth),
     .DataBitsPerMask     (DataBitsPerMask),
     .CfgW                (CfgW),
     .MemInitFile         (MemInitFile),
diff --git a/hw/ip/prim/rtl/prim_ram_2p_async_adv.sv b/hw/ip/prim/rtl/prim_ram_2p_async_adv.sv
index 8436345d7..06efc7aca 100644
--- a/hw/ip/prim/rtl/prim_ram_2p_async_adv.sv
+++ b/hw/ip/prim/rtl/prim_ram_2p_async_adv.sv
@@ -6,18 +6,18 @@
 //
 // Supported configurations:
 // - ECC for 32b wide memories with no write mask
-//   (Width == 32 && DataBitsPerMask == 32).
-// - Byte parity if Width is a multiple of 8 bit and write masks have Byte
+//   (RamWidth == 32 && DataBitsPerMask == 32).
+// - Byte parity if RamWidth is a multiple of 8 bit and write masks have Byte
 //   granularity (DataBitsPerMask == 8).
 //
 // Note that the write mask needs to be per Byte if parity is enabled. If ECC is enabled, the write
-// mask cannot be used and has to be tied to {Width{1'b1}}.
+// mask cannot be used and has to be tied to {RamWidth{1'b1}}.
 
 `include "prim_assert.sv"
 
 module prim_ram_2p_async_adv #(
-  parameter  int Depth                = 512,
-  parameter  int Width                = 32,
+  parameter  int RamDepth                = 512,
+  parameter  int RamWidth                = 32,
   parameter  int DataBitsPerMask      = 1,  // Number of data bits per bit of write mask
   parameter  int CfgW                 = 8,  // WTC, RTC, etc
   parameter      MemInitFile          = "", // VMEM file to initialize the memory with
@@ -28,7 +28,7 @@ module prim_ram_2p_async_adv #(
   parameter  bit EnableInputPipeline  = 0, // Adds an input register (read latency +1)
   parameter  bit EnableOutputPipeline = 0, // Adds an output register (read latency +1)
 
-  localparam int Aw                   = prim_util_pkg::vbits(Depth)
+  localparam int Aw                   = prim_util_pkg::vbits(RamDepth)
 ) (
   input clk_a_i,
   input clk_b_i,
@@ -38,18 +38,18 @@ module prim_ram_2p_async_adv #(
   input                    a_req_i,
   input                    a_write_i,
   input        [Aw-1:0]    a_addr_i,
-  input        [Width-1:0] a_wdata_i,
-  input        [Width-1:0] a_wmask_i,  // cannot be used with ECC, tie to 1 in that case
-  output logic [Width-1:0] a_rdata_o,
+  input        [RamWidth-1:0] a_wdata_i,
+  input        [RamWidth-1:0] a_wmask_i,  // cannot be used with ECC, tie to 1 in that case
+  output logic [RamWidth-1:0] a_rdata_o,
   output logic             a_rvalid_o, // read response (a_rdata_o) is valid
   output logic [1:0]       a_rerror_o, // Bit1: Uncorrectable, Bit0: Correctable
 
   input                    b_req_i,
   input                    b_write_i,
   input        [Aw-1:0]    b_addr_i,
-  input        [Width-1:0] b_wdata_i,
-  input        [Width-1:0] b_wmask_i,  // cannot be used with ECC, tie to 1 in that case
-  output logic [Width-1:0] b_rdata_o,
+  input        [RamWidth-1:0] b_wdata_i,
+  input        [RamWidth-1:0] b_wmask_i,  // cannot be used with ECC, tie to 1 in that case
+  output logic [RamWidth-1:0] b_rdata_o,
   output logic             b_rvalid_o, // read response (b_rdata_o) is valid
   output logic [1:0]       b_rerror_o, // Bit1: Uncorrectable, Bit0: Correctable
 
@@ -67,14 +67,14 @@ module prim_ram_2p_async_adv #(
   localparam int LocalDataBitsPerMask = (EnableParity) ? 1 : DataBitsPerMask;
 
   // Calculate ECC width
-  localparam int ParWidth  = (EnableParity) ? Width/8 :
+  localparam int ParRamWidth  = (EnableParity) ? RamWidth/8 :
                              (!EnableECC)   ? 0 :
-                             (Width <=   4) ? 4 :
-                             (Width <=  11) ? 5 :
-                             (Width <=  26) ? 6 :
-                             (Width <=  57) ? 7 :
-                             (Width <= 120) ? 8 : 8 ;
-  localparam int TotalWidth = Width + ParWidth;
+                             (RamWidth <=   4) ? 4 :
+                             (RamWidth <=  11) ? 5 :
+                             (RamWidth <=  26) ? 6 :
+                             (RamWidth <=  57) ? 7 :
+                             (RamWidth <= 120) ? 8 : 8 ;
+  localparam int TotalRamWidth = RamWidth + ParRamWidth;
 
   ////////////////////////////
   // RAM Primitive Instance //
@@ -83,28 +83,28 @@ module prim_ram_2p_async_adv #(
   logic                    a_req_q,    a_req_d ;
   logic                    a_write_q,  a_write_d ;
   logic [Aw-1:0]           a_addr_q,   a_addr_d ;
-  logic [TotalWidth-1:0]   a_wdata_q,  a_wdata_d ;
-  logic [TotalWidth-1:0]   a_wmask_q,  a_wmask_d ;
+  logic [TotalRamWidth-1:0]   a_wdata_q,  a_wdata_d ;
+  logic [TotalRamWidth-1:0]   a_wmask_q,  a_wmask_d ;
   logic                    a_rvalid_q, a_rvalid_d, a_rvalid_sram ;
-  logic [Width-1:0]        a_rdata_q,  a_rdata_d ;
-  logic [TotalWidth-1:0]   a_rdata_sram ;
+  logic [RamWidth-1:0]        a_rdata_q,  a_rdata_d ;
+  logic [TotalRamWidth-1:0]   a_rdata_sram ;
   logic [1:0]              a_rerror_q, a_rerror_d ;
 
   logic                    b_req_q,    b_req_d ;
   logic                    b_write_q,  b_write_d ;
   logic [Aw-1:0]           b_addr_q,   b_addr_d ;
-  logic [TotalWidth-1:0]   b_wdata_q,  b_wdata_d ;
-  logic [TotalWidth-1:0]   b_wmask_q,  b_wmask_d ;
+  logic [TotalRamWidth-1:0]   b_wdata_q,  b_wdata_d ;
+  logic [TotalRamWidth-1:0]   b_wmask_q,  b_wmask_d ;
   logic                    b_rvalid_q, b_rvalid_d, b_rvalid_sram ;
-  logic [Width-1:0]        b_rdata_q,  b_rdata_d ;
-  logic [TotalWidth-1:0]   b_rdata_sram ;
+  logic [RamWidth-1:0]        b_rdata_q,  b_rdata_d ;
+  logic [TotalRamWidth-1:0]   b_rdata_sram ;
   logic [1:0]              b_rerror_q, b_rerror_d ;
 
   prim_ram_2p #(
     .MemInitFile     (MemInitFile),
 
-    .Width           (TotalWidth),
-    .Depth           (Depth),
+    .Width           (TotalRamWidth),
+    .Depth           (RamDepth),
     .DataBitsPerMask (LocalDataBitsPerMask)
   ) u_mem (
     .clk_a_i    (clk_a_i),
@@ -161,29 +161,29 @@ module prim_ram_2p_async_adv #(
   if (EnableParity == 0 && EnableECC) begin : gen_secded
 
     // check supported widths
-    `ASSERT_INIT(SecDecWidth_A, Width inside {32})
+    `ASSERT_INIT(SecDecRamWidth_A, RamWidth inside {32})
 
     // the wmask is constantly set to 1 in this case
     `ASSERT(OnlyWordWritePossibleWithEccPortA_A, a_req_i |->
-        a_wmask_i == {TotalWidth{1'b1}}, clk_a_i, rst_a_ni)
+        a_wmask_i == {TotalRamWidth{1'b1}}, clk_a_i, rst_a_ni)
     `ASSERT(OnlyWordWritePossibleWithEccPortB_A, b_req_i |->
-        b_wmask_i == {TotalWidth{1'b1}}, clk_b_i, rst_b_ni)
+        b_wmask_i == {TotalRamWidth{1'b1}}, clk_b_i, rst_b_ni)
 
-    assign a_wmask_d = {TotalWidth{1'b1}};
-    assign b_wmask_d = {TotalWidth{1'b1}};
+    assign a_wmask_d = {TotalRamWidth{1'b1}};
+    assign b_wmask_d = {TotalRamWidth{1'b1}};
 
-    if (Width == 32) begin : gen_secded_39_32
+    if (RamWidth == 32) begin : gen_secded_39_32
       prim_secded_39_32_enc u_enc_a (.in(a_wdata_i), .out(a_wdata_d));
       prim_secded_39_32_dec u_dec_a (
         .in         (a_rdata_sram),
-        .d_o        (a_rdata_d[0+:Width]),
+        .d_o        (a_rdata_d[0+:RamWidth]),
         .syndrome_o ( ),
         .err_o      (a_rerror_d)
       );
       prim_secded_39_32_enc u_enc_b (.in(b_wdata_i), .out(b_wdata_d));
       prim_secded_39_32_dec u_dec_b (
         .in         (b_rdata_sram),
-        .d_o        (b_rdata_d[0+:Width]),
+        .d_o        (b_rdata_d[0+:RamWidth]),
         .syndrome_o ( ),
         .err_o      (b_rerror_d)
       );
@@ -191,40 +191,40 @@ module prim_ram_2p_async_adv #(
   end else if (EnableParity) begin : gen_byte_parity
 
     `ASSERT_INIT(ParityNeedsByteWriteMask_A, DataBitsPerMask == 8)
-    `ASSERT_INIT(WidthNeedsToBeByteAligned_A, Width % 8 == 0)
+    `ASSERT_INIT(RamWidthNeedsToBeByteAligned_A, RamWidth % 8 == 0)
 
     always_comb begin : p_parity
       a_rerror_d = '0;
       b_rerror_d = '0;
-      a_wmask_d[0+:Width] = a_wmask_i;
-      b_wmask_d[0+:Width] = b_wmask_i;
-      a_wdata_d[0+:Width] = a_wdata_i;
-      b_wdata_d[0+:Width] = b_wdata_i;
+      a_wmask_d[0+:RamWidth] = a_wmask_i;
+      b_wmask_d[0+:RamWidth] = b_wmask_i;
+      a_wdata_d[0+:RamWidth] = a_wdata_i;
+      b_wdata_d[0+:RamWidth] = b_wdata_i;
 
-      for (int i = 0; i < Width/8; i ++) begin
+      for (int i = 0; i < RamWidth/8; i ++) begin
         // parity generation (odd parity)
-        a_wdata_d[Width + i] = ~(^a_wdata_i[i*8 +: 8]);
-        b_wdata_d[Width + i] = ~(^b_wdata_i[i*8 +: 8]);
-        a_wmask_d[Width + i] = &a_wmask_i[i*8 +: 8];
-        b_wmask_d[Width + i] = &b_wmask_i[i*8 +: 8];
+        a_wdata_d[RamWidth + i] = ~(^a_wdata_i[i*8 +: 8]);
+        b_wdata_d[RamWidth + i] = ~(^b_wdata_i[i*8 +: 8]);
+        a_wmask_d[RamWidth + i] = &a_wmask_i[i*8 +: 8];
+        b_wmask_d[RamWidth + i] = &b_wmask_i[i*8 +: 8];
         // parity decoding (errors are always uncorrectable)
-        a_rerror_d[1] |= ~(^{a_rdata_sram[i*8 +: 8], a_rdata_sram[Width + i]});
-        b_rerror_d[1] |= ~(^{b_rdata_sram[i*8 +: 8], b_rdata_sram[Width + i]});
+        a_rerror_d[1] |= ~(^{a_rdata_sram[i*8 +: 8], a_rdata_sram[RamWidth + i]});
+        b_rerror_d[1] |= ~(^{b_rdata_sram[i*8 +: 8], b_rdata_sram[RamWidth + i]});
       end
       // tie to zero if the read data is not valid
       a_rerror_d &= {2{a_rvalid_sram}};
       b_rerror_d &= {2{b_rvalid_sram}};
     end
 
-    assign a_rdata_d  = a_rdata_sram[0+:Width];
-    assign b_rdata_d  = b_rdata_sram[0+:Width];
+    assign a_rdata_d  = a_rdata_sram[0+:RamWidth];
+    assign b_rdata_d  = b_rdata_sram[0+:RamWidth];
   end else begin : gen_nosecded_noparity
     assign a_wmask_d  = a_wmask_i;
     assign b_wmask_d  = b_wmask_i;
     assign a_wdata_d  = a_wdata_i;
     assign b_wdata_d  = b_wdata_i;
-    assign a_rdata_d  = a_rdata_sram[0+:Width];
-    assign b_rdata_d  = b_rdata_sram[0+:Width];
+    assign a_rdata_d  = a_rdata_sram[0+:RamWidth];
+    assign b_rdata_d  = b_rdata_sram[0+:RamWidth];
     assign a_rerror_d = '0;
     assign b_rerror_d = '0;
   end
diff --git a/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv b/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
index 962d3b559..d6430bc5a 100644
--- a/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
+++ b/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
@@ -70,10 +70,10 @@ module prim_generic_pad_wrapper #(
     assign oe       = oe_i & ((od & ~out) | ~od);
 
   // driving strength attributes are not supported by verilator
-`ifdef VERILATOR
-    assign inout_io = (oe)   ? out : 1'bz;
+`ifdef SYNTHESIS
+    assign inout_io = out;
     // received data driver
-    assign in_o     = (ie_i) ? in  : 1'bz;
+    assign in_o     = in;
 `else
     // different driver types
     assign (strong0, strong1) inout_io = (oe && drv != DRIVE_00) ? out : 1'bz;
diff --git a/hw/ip/pwrmgr/rtl/pwrmgr_cdc.sv b/hw/ip/pwrmgr/rtl/pwrmgr_cdc.sv
index c4ccd9b2d..5229b6a82 100644
--- a/hw/ip/pwrmgr/rtl/pwrmgr_cdc.sv
+++ b/hw/ip/pwrmgr/rtl/pwrmgr_cdc.sv
@@ -54,6 +54,8 @@ module pwrmgr_cdc import pwrmgr_pkg::*; import pwrmgr_reg_pkg::*;
 
 );
 
+  import pwrmgr_pkg::*;
+
   ////////////////////////////////
   // Sync from clk_i to clk_slow_i
   ////////////////////////////////
@@ -137,11 +139,11 @@ module pwrmgr_cdc import pwrmgr_pkg::*; import pwrmgr_reg_pkg::*;
   // only register configurations can be sync'd using slow_cdc_sync
   always_ff @(posedge clk_slow_i or negedge rst_slow_ni) begin
     if (!rst_slow_ni) begin
-      slow_wakeup_en_o <= '0;
-      slow_reset_en_o <= '0;
-      slow_main_pd_no <= '0;
-      slow_io_clk_en_o <= '0;
-      slow_core_clk_en_o <= '0;
+      slow_wakeup_en_o <= 16'h0000;
+      slow_reset_en_o <= 2'b00;
+      slow_main_pd_no <= 1'b0;
+      slow_io_clk_en_o <= 1'b0;
+      slow_core_clk_en_o <= 1'b0;
     end else if (slow_cdc_sync) begin
       slow_wakeup_en_o <= wakeup_en_i;
       slow_reset_en_o <= reset_en_i;
diff --git a/hw/ip/pwrmgr/rtl/pwrmgr_fsm.sv b/hw/ip/pwrmgr/rtl/pwrmgr_fsm.sv
index ef4712bf5..336e2ff7d 100644
--- a/hw/ip/pwrmgr/rtl/pwrmgr_fsm.sv
+++ b/hw/ip/pwrmgr/rtl/pwrmgr_fsm.sv
@@ -131,7 +131,7 @@ module pwrmgr_fsm import pwrmgr_pkg::*; (
     end
   end
 
-  always_comb begin
+  always begin
     otp_init = 1'b0;
     lc_init = 1'b0;
     wkup_o = 1'b0;
diff --git a/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv b/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv
index a5669d597..4f39a8b53 100644
--- a/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv
+++ b/hw/ip/pwrmgr/rtl/pwrmgr_pkg.sv
@@ -35,19 +35,9 @@ package pwrmgr_pkg;
   } pwr_ast_rsp_t;
 
   // default value of pwr_ast_rsp (for dangling ports)
-  parameter pwr_ast_rsp_t PWR_AST_RSP_DEFAULT = '{
-    slow_clk_val: 2'b10,
-    core_clk_val: 2'b10,
-    io_clk_val: 2'b10,
-    main_pok: 1'b1
-  };
-
-  parameter pwr_ast_rsp_t PWR_AST_RSP_SYNC_DEFAULT = '{
-    slow_clk_val: 2'b01,
-    core_clk_val: 2'b01,
-    io_clk_val: 2'b10,
-    main_pok: 1'b0
-  };
+  parameter pwr_ast_rsp_t PWR_AST_RSP_DEFAULT = 7'b1010101;
+
+  parameter pwr_ast_rsp_t PWR_AST_RSP_SYNC_DEFAULT = 7'b0101100;
 
   // reasons for pwrmgr reset reset
   typedef enum logic [1:0] {
@@ -71,10 +61,7 @@ package pwrmgr_pkg;
   } pwr_rst_rsp_t;
 
   // default value (for dangling ports)
-  parameter pwr_rst_rsp_t PWR_RST_RSP_DEFAULT = '{
-    rst_lc_src_n: {PowerDomains{1'b1}},
-    rst_sys_src_n: {PowerDomains{1'b1}}
-  };
+  parameter pwr_rst_rsp_t PWR_RST_RSP_DEFAULT = 4'b1111;
 
   // pwrmgr to clkmgr
   typedef struct packed {
@@ -98,10 +85,7 @@ package pwrmgr_pkg;
   } pwr_otp_rsp_t;
 
   // default value (for dangling ports)
-  parameter pwr_otp_rsp_t PWR_OTP_RSP_DEFAULT = '{
-    otp_done: 1'b1,
-    otp_idle: 1'b1
-  };
+  parameter pwr_otp_rsp_t PWR_OTP_RSP_DEFAULT = 2'b11;
 
   // pwrmgr to lifecycle
   typedef struct packed {
@@ -115,10 +99,7 @@ package pwrmgr_pkg;
   } pwr_lc_rsp_t;
 
   // default value (for dangling ports)
-  parameter pwr_lc_rsp_t PWR_LC_RSP_DEFAULT = '{
-    lc_done: 1'b1,
-    lc_idle: 1'b1
-  };
+  parameter pwr_lc_rsp_t PWR_LC_RSP_DEFAULT = 2'b11;
 
   // flash to pwrmgr
   typedef struct packed {
@@ -126,9 +107,7 @@ package pwrmgr_pkg;
   } pwr_flash_t;
 
   // default value (for dangling ports)
-  parameter pwr_flash_t PWR_FLASH_DEFAULT = '{
-    flash_idle: 1'b1
-  };
+  parameter pwr_flash_t PWR_FLASH_DEFAULT = 1'b1;
 
   // processor to pwrmgr
   typedef struct packed {
@@ -136,13 +115,11 @@ package pwrmgr_pkg;
   } pwr_cpu_t;
 
   // default value (for dangling ports)
-  parameter pwr_cpu_t PWR_CPU_DEFAULT = '{
-    core_sleeping: 1'b0
-  };
+  parameter pwr_cpu_t PWR_CPU_DEFAULT = 1'b0;
 
   // default value (for dangling ports)
-  parameter int WAKEUPS_DEFAULT = '0;
-  parameter int RSTREQS_DEFAULT = '0;
+  parameter int WAKEUPS_DEFAULT = 0;
+  parameter int RSTREQS_DEFAULT = 0;
 
   // peripherals to pwrmgr
   typedef struct packed {
diff --git a/hw/ip/pwrmgr/rtl/pwrmgr_reg_pkg.sv b/hw/ip/pwrmgr/rtl/pwrmgr_reg_pkg.sv
index 4a6a9d709..3c755c66f 100644
--- a/hw/ip/pwrmgr/rtl/pwrmgr_reg_pkg.sv
+++ b/hw/ip/pwrmgr/rtl/pwrmgr_reg_pkg.sv
@@ -116,7 +116,7 @@ package pwrmgr_reg_pkg;
     pwrmgr_reg2hw_intr_test_reg_t intr_test; // [47:46]
     pwrmgr_reg2hw_control_reg_t control; // [45:42]
     pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [41:40]
-    pwrmgr_reg2hw_wakeup_en_mreg_t [15:0] wakeup_en; // [39:24]
+    logic [15:0] wakeup_en; // [39:24]
     pwrmgr_reg2hw_reset_en_reg_t reset_en; // [23:22]
     pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [21:21]
     pwrmgr_reg2hw_wake_info_reg_t wake_info; // [20:0]
diff --git a/hw/ip/pwrmgr/rtl/pwrmgr_reg_top.sv b/hw/ip/pwrmgr/rtl/pwrmgr_reg_top.sv
index 6080cf464..31418f345 100644
--- a/hw/ip/pwrmgr/rtl/pwrmgr_reg_top.sv
+++ b/hw/ip/pwrmgr/rtl/pwrmgr_reg_top.sv
@@ -456,7 +456,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[0].q ),
+    .q      (reg2hw.wakeup_en[0] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en0_qs)
@@ -482,7 +482,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[1].q ),
+    .q      (reg2hw.wakeup_en[1] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en1_qs)
@@ -508,7 +508,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[2].q ),
+    .q      (reg2hw.wakeup_en[2] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en2_qs)
@@ -534,7 +534,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[3].q ),
+    .q      (reg2hw.wakeup_en[3] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en3_qs)
@@ -560,7 +560,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[4].q ),
+    .q      (reg2hw.wakeup_en[4] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en4_qs)
@@ -586,7 +586,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[5].q ),
+    .q      (reg2hw.wakeup_en[5] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en5_qs)
@@ -612,7 +612,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[6].q ),
+    .q      (reg2hw.wakeup_en[6] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en6_qs)
@@ -638,7 +638,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[7].q ),
+    .q      (reg2hw.wakeup_en[7] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en7_qs)
@@ -664,7 +664,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[8].q ),
+    .q      (reg2hw.wakeup_en[8] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en8_qs)
@@ -690,7 +690,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[9].q ),
+    .q      (reg2hw.wakeup_en[9] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en9_qs)
@@ -716,7 +716,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[10].q ),
+    .q      (reg2hw.wakeup_en[10] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en10_qs)
@@ -742,7 +742,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[11].q ),
+    .q      (reg2hw.wakeup_en[11] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en11_qs)
@@ -768,7 +768,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[12].q ),
+    .q      (reg2hw.wakeup_en[12] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en12_qs)
@@ -794,7 +794,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[13].q ),
+    .q      (reg2hw.wakeup_en[13] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en13_qs)
@@ -820,7 +820,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[14].q ),
+    .q      (reg2hw.wakeup_en[14] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en14_qs)
@@ -846,7 +846,7 @@ module pwrmgr_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[15].q ),
+    .q      (reg2hw.wakeup_en[15] ),
 
     // to register interface (read)
     .qs     (wakeup_en_en15_qs)
diff --git a/hw/ip/rv_timer/rtl/rv_timer.sv b/hw/ip/rv_timer/rtl/rv_timer.sv
index 9b939eedd..3c74f08b8 100644
--- a/hw/ip/rv_timer/rtl/rv_timer.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer.sv
@@ -26,15 +26,15 @@ module rv_timer (
 
   logic [N_HARTS-1:0] active;
 
-  logic [11:0] prescaler [N_HARTS];
-  logic [7:0]  step      [N_HARTS];
+  logic [11:0] prescaler ;
+  logic [7:0]  step      ;
 
   logic [N_HARTS-1:0] tick;
 
-  logic [63:0] mtime_d  [N_HARTS];
-  logic [63:0] mtime    [N_HARTS];
-  logic [63:0] mtimecmp [N_HARTS][N_TIMERS]; // Only [harts][0] is connected to mtimecmp CSRs
-  logic        mtimecmp_update [N_HARTS][N_TIMERS];
+  logic [63:0] mtime_d  ;
+  logic [63:0] mtime    ;
+  logic [63:0] mtimecmp; // Only [harts][0] is connected to mtimecmp CSRs
+  logic        mtimecmp_update;
 
   logic [N_HARTS*N_TIMERS-1:0] intr_timer_set;
   logic [N_HARTS*N_TIMERS-1:0] intr_timer_en;
@@ -52,25 +52,25 @@ module rv_timer (
 
   // Once reggen supports nested multireg, the following can be automated. For the moment, it must
   // be connected manually.
-  assign active[0]  = reg2hw.ctrl[0].q;
+  assign active[0]  = reg2hw.ctrl.q;
   assign prescaler = '{reg2hw.cfg0.prescale.q};
   assign step      = '{reg2hw.cfg0.step.q};
 
   assign hw2reg.timer_v_upper0.de = tick[0];
   assign hw2reg.timer_v_lower0.de = tick[0];
-  assign hw2reg.timer_v_upper0.d = mtime_d[0][63:32];
-  assign hw2reg.timer_v_lower0.d = mtime_d[0][31: 0];
-  assign mtime[0] = {reg2hw.timer_v_upper0.q, reg2hw.timer_v_lower0.q};
+  assign hw2reg.timer_v_upper0.d = mtime_d[63:32];
+  assign hw2reg.timer_v_lower0.d = mtime_d[31: 0];
+  assign mtime = {reg2hw.timer_v_upper0.q, reg2hw.timer_v_lower0.q};
   assign mtimecmp = '{'{{reg2hw.compare_upper0_0.q,reg2hw.compare_lower0_0.q}}};
-  assign mtimecmp_update[0][0] = reg2hw.compare_upper0_0.qe | reg2hw.compare_lower0_0.qe;
+  assign mtimecmp_update = reg2hw.compare_upper0_0.qe | reg2hw.compare_lower0_0.qe;
 
   assign intr_timer_expired_0_0_o = intr_out[0];
-  assign intr_timer_en            = reg2hw.intr_enable0[0].q;
-  assign intr_timer_state_q       = reg2hw.intr_state0[0].q;
-  assign intr_timer_test_q        = reg2hw.intr_test0[0].q;
-  assign intr_timer_test_qe       = reg2hw.intr_test0[0].qe;
-  assign hw2reg.intr_state0[0].de = intr_timer_state_de | mtimecmp_update[0][0];
-  assign hw2reg.intr_state0[0].d  = intr_timer_state_d & ~mtimecmp_update[0][0];
+  assign intr_timer_en            = reg2hw.intr_enable0.q;
+  assign intr_timer_state_q       = reg2hw.intr_state0.q;
+  assign intr_timer_test_q        = reg2hw.intr_test0.q;
+  assign intr_timer_test_qe       = reg2hw.intr_test0.qe;
+  assign hw2reg.intr_state0.de = intr_timer_state_de | mtimecmp_update;
+  assign hw2reg.intr_state0.d  = intr_timer_state_d & ~mtimecmp_update;
 
 
   for (genvar h = 0 ; h < N_HARTS ; h++) begin : gen_harts
@@ -96,14 +96,14 @@ module rv_timer (
       .rst_ni,
 
       .active    (active[h]),
-      .prescaler (prescaler[h]),
-      .step      (step[h]),
+      .prescaler (prescaler),
+      .step      (step),
 
       .tick      (tick[h]),
 
-      .mtime_d   (mtime_d[h]),
-      .mtime     (mtime[h]),
-      .mtimecmp  (mtimecmp[h]),
+      .mtime_d   (mtime_d),
+      .mtime     (mtime),
+      .mtimecmp  (mtimecmp),
 
       .intr      (intr_timer_set[h*N_TIMERS+:N_TIMERS])
     );
diff --git a/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv b/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
index 2addad698..37e6d79c4 100644
--- a/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer_reg_pkg.sv
@@ -78,15 +78,15 @@ package rv_timer_reg_pkg;
   // Register to internal design logic //
   ///////////////////////////////////////
   typedef struct packed {
-    rv_timer_reg2hw_ctrl_mreg_t [0:0] ctrl; // [154:154]
+    rv_timer_reg2hw_ctrl_mreg_t ctrl; // [154:154]
     rv_timer_reg2hw_cfg0_reg_t cfg0; // [153:134]
     rv_timer_reg2hw_timer_v_lower0_reg_t timer_v_lower0; // [133:102]
     rv_timer_reg2hw_timer_v_upper0_reg_t timer_v_upper0; // [101:70]
     rv_timer_reg2hw_compare_lower0_0_reg_t compare_lower0_0; // [69:37]
     rv_timer_reg2hw_compare_upper0_0_reg_t compare_upper0_0; // [36:4]
-    rv_timer_reg2hw_intr_enable0_mreg_t [0:0] intr_enable0; // [3:3]
-    rv_timer_reg2hw_intr_state0_mreg_t [0:0] intr_state0; // [2:2]
-    rv_timer_reg2hw_intr_test0_mreg_t [0:0] intr_test0; // [1:0]
+    rv_timer_reg2hw_intr_enable0_mreg_t intr_enable0; // [3:3]
+    rv_timer_reg2hw_intr_state0_mreg_t intr_state0; // [2:2]
+    rv_timer_reg2hw_intr_test0_mreg_t intr_test0; // [1:0]
   } rv_timer_reg2hw_t;
 
   ///////////////////////////////////////
@@ -95,7 +95,7 @@ package rv_timer_reg_pkg;
   typedef struct packed {
     rv_timer_hw2reg_timer_v_lower0_reg_t timer_v_lower0; // [67:36]
     rv_timer_hw2reg_timer_v_upper0_reg_t timer_v_upper0; // [35:4]
-    rv_timer_hw2reg_intr_state0_mreg_t [0:0] intr_state0; // [3:2]
+    rv_timer_hw2reg_intr_state0_mreg_t intr_state0; // [3:2]
   } rv_timer_hw2reg_t;
 
   // Register Address
diff --git a/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv b/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv
index b7bd92367..824107aed 100644
--- a/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv
+++ b/hw/ip/rv_timer/rtl/rv_timer_reg_top.sv
@@ -14,8 +14,10 @@ module rv_timer_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output rv_timer_reg_pkg::rv_timer_reg2hw_t reg2hw, // Write
-  input  rv_timer_reg_pkg::rv_timer_hw2reg_t hw2reg, // Read
+  //output rv_timer_reg_pkg::rv_timer_reg2hw_t reg2hw, // Write
+  //input  rv_timer_reg_pkg::rv_timer_hw2reg_t hw2reg, // Read
+  output wire [154:0] reg2hw,
+  input wire [67:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -124,7 +126,7 @@ module rv_timer_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ctrl[0].q ),
+    .q      (reg2hw[154]),
 
     // to register interface (read)
     .qs     (ctrl_qs)
@@ -148,11 +150,11 @@ module rv_timer_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      ({12 {1'b0}}  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.cfg0.prescale.q ),
+    .q      (reg2hw[153-:12]),
 
     // to register interface (read)
     .qs     (cfg0_prescale_qs)
@@ -174,11 +176,11 @@ module rv_timer_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      ({8{1'b0}}  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.cfg0.step.q ),
+    .q      (reg2hw[141-:8]),
 
     // to register interface (read)
     .qs     (cfg0_step_qs)
@@ -200,12 +202,12 @@ module rv_timer_reg_top (
     .wd     (timer_v_lower0_wd),
 
     // from internal hardware
-    .de     (hw2reg.timer_v_lower0.de),
-    .d      (hw2reg.timer_v_lower0.d ),
+    .de     (hw2reg[35]),
+    .d      (hw2reg[67-:32]),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timer_v_lower0.q ),
+    .q      (reg2hw[133-:32]),
 
     // to register interface (read)
     .qs     (timer_v_lower0_qs)
@@ -227,12 +229,12 @@ module rv_timer_reg_top (
     .wd     (timer_v_upper0_wd),
 
     // from internal hardware
-    .de     (hw2reg.timer_v_upper0.de),
-    .d      (hw2reg.timer_v_upper0.d ),
+    .de     (hw2reg[2]),
+    .d      (hw2reg[34-:32]),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timer_v_upper0.q ),
+    .q      (reg2hw[101-:32]),
 
     // to register interface (read)
     .qs     (timer_v_upper0_qs)
@@ -255,11 +257,11 @@ module rv_timer_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      ({32 {1'b0}}  ),
 
     // to internal hardware
-    .qe     (reg2hw.compare_lower0_0.qe),
-    .q      (reg2hw.compare_lower0_0.q ),
+    .qe     (reg2hw[37]),
+    .q      (reg2hw[69-:32]),
 
     // to register interface (read)
     .qs     (compare_lower0_0_qs)
@@ -282,11 +284,11 @@ module rv_timer_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      ({32{1'b0}}  ),
 
     // to internal hardware
-    .qe     (reg2hw.compare_upper0_0.qe),
-    .q      (reg2hw.compare_upper0_0.q ),
+    .qe     (reg2hw[4]),
+    .q      (reg2hw[36-:32]),
 
     // to register interface (read)
     .qs     (compare_upper0_0_qs)
@@ -315,7 +317,7 @@ module rv_timer_reg_top (
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable0[0].q ),
+    .q      (reg2hw[3]),
 
     // to register interface (read)
     .qs     (intr_enable0_qs)
@@ -339,12 +341,12 @@ module rv_timer_reg_top (
     .wd     (intr_state0_wd),
 
     // from internal hardware
-    .de     (hw2reg.intr_state0[0].de),
-    .d      (hw2reg.intr_state0[0].d ),
+    .de     (hw2reg[0]),
+    .d      (hw2reg[1]),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state0[0].q ),
+    .q      (reg2hw[2]),
 
     // to register interface (read)
     .qs     (intr_state0_qs)
@@ -363,8 +365,8 @@ module rv_timer_reg_top (
     .wd     (intr_test0_wd),
     .d      ('0),
     .qre    (),
-    .qe     (reg2hw.intr_test0[0].qe),
-    .q      (reg2hw.intr_test0[0].q ),
+    .qe     (reg2hw[0]),
+    .q      (reg2hw[1]),
     .qs     ()
   );
 
@@ -373,7 +375,7 @@ module rv_timer_reg_top (
 
   logic [8:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = {9 {1'b0}};
     addr_hit[0] = (reg_addr == RV_TIMER_CTRL_OFFSET);
     addr_hit[1] = (reg_addr == RV_TIMER_CFG0_OFFSET);
     addr_hit[2] = (reg_addr == RV_TIMER_TIMER_V_LOWER0_OFFSET);
@@ -433,7 +435,7 @@ module rv_timer_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {DW{1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = ctrl_qs;
@@ -473,7 +475,7 @@ module rv_timer_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {DW{1'b1}};
       end
     endcase
   end
diff --git a/hw/ip/spi_device/rtl/spi_device.sv b/hw/ip/spi_device/rtl/spi_device.sv
index f7f9ed1bf..0b0fd2f7e 100644
--- a/hw/ip/spi_device/rtl/spi_device.sv
+++ b/hw/ip/spi_device/rtl/spi_device.sv
@@ -519,8 +519,8 @@ module spi_device #(
 
   // SRAM Wrapper
   prim_ram_2p_adv #(
-    .Depth (512),
-    .Width (SramDw),    // 32 x 512 --> 2kB
+    .RamDepth (512),
+    .RamWidth (SramDw),    // 32 x 512 --> 2kB
     .DataBitsPerMask (1),
     .CfgW  (8),
 
diff --git a/hw/ip/tlul/rtl/tlul_adapter_reg.sv b/hw/ip/tlul/rtl/tlul_adapter_reg.sv
index c451308bd..a0dd153b8 100644
--- a/hw/ip/tlul/rtl/tlul_adapter_reg.sv
+++ b/hw/ip/tlul/rtl/tlul_adapter_reg.sv
@@ -30,8 +30,8 @@ module tlul_adapter_reg import tlul_pkg::*; #(
   input                    error_i
 );
 
-  localparam int IW  = $bits(tl_i.a_source);
-  localparam int SZW = $bits(tl_i.a_size);
+  localparam int IW  = 8;
+  localparam int SZW = 2;
 
   logic outstanding;    // Indicates current request is pending
   logic a_ack, d_ack;
@@ -69,8 +69,8 @@ module tlul_adapter_reg import tlul_pkg::*; #(
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      reqid <= '0;
-      reqsz <= '0;
+      reqid <= {IW{1'b0}};
+      reqsz <= {SZW{1'b0}};
       rspop <= AccessAck;
     end else if (a_ack) begin
       reqid <= tl_i.a_source;
@@ -82,10 +82,10 @@ module tlul_adapter_reg import tlul_pkg::*; #(
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      rdata  <= '0;
+      rdata  <= {RegDw{1'b0}};
       error <= 1'b0;
     end else if (a_ack) begin
-      rdata <= (err_internal) ? '1 : rdata_i;
+      rdata <= (err_internal) ? {RegDw{1'b1}} : rdata_i;
       error <= error_i | err_internal;
     end
   end
@@ -94,12 +94,12 @@ module tlul_adapter_reg import tlul_pkg::*; #(
     a_ready:  ~outstanding,
     d_valid:  outstanding,
     d_opcode: rspop,
-    d_param:  '0,
+    d_param:  3'b000,
     d_size:   reqsz,
     d_source: reqid,
-    d_sink:   '0,
+    d_sink:   1'b0,
     d_data:   rdata,
-    d_user:  '0,
+    d_user:  16'b0000000000000000,
     d_error: error
   };
 
diff --git a/hw/ip/tlul/rtl/tlul_adapter_sram.sv b/hw/ip/tlul/rtl/tlul_adapter_sram.sv
index 6e2f33191..cb3e9088c 100644
--- a/hw/ip/tlul/rtl/tlul_adapter_sram.sv
+++ b/hw/ip/tlul/rtl/tlul_adapter_sram.sv
@@ -174,7 +174,7 @@ module tlul_adapter_sram #(
   logic [WidthMult-1:0][top_pkg::TL_DW-1:0] wmask_int;
   logic [WidthMult-1:0][top_pkg::TL_DW-1:0] wdata_int;
 
-  always_comb begin
+  always begin
     wmask_int = '0;
     wdata_int = '0;
 
diff --git a/hw/ip/tlul/rtl/tlul_err.sv b/hw/ip/tlul/rtl/tlul_err.sv
index add8477ba..4ab895782 100644
--- a/hw/ip/tlul/rtl/tlul_err.sv
+++ b/hw/ip/tlul/rtl/tlul_err.sv
@@ -14,11 +14,11 @@ module tlul_err import tlul_pkg::*; (
   output logic err_o
 );
 
-  localparam int IW  = $bits(tl_i.a_source);
-  localparam int SZW = $bits(tl_i.a_size);
-  localparam int DW  = $bits(tl_i.a_data);
-  localparam int MW  = $bits(tl_i.a_mask);
-  localparam int SubAW = $clog2(DW/8);
+  localparam int IW  = 8;
+  localparam int SZW = 2;
+  localparam int DW  = 32;
+  localparam int MW  = 4;
+  localparam int SubAW = 2;
 
   logic opcode_allowed, a_config_allowed;
 
@@ -42,7 +42,7 @@ module tlul_err import tlul_pkg::*; (
 
   logic [MW-1:0] mask;
 
-  assign mask = (1 << tl_i.a_address[SubAW-1:0]);
+  assign mask = (1 << $unsigned(tl_i.a_address[SubAW-1:0]));
 
   always_comb begin
     addr_sz_chk  = 1'b0;
@@ -51,13 +51,13 @@ module tlul_err import tlul_pkg::*; (
 
     if (tl_i.a_valid) begin
       unique case (tl_i.a_size)
-        'h0: begin // 1 Byte
+        64'h0: begin // 1 Byte
           addr_sz_chk  = 1'b1;
           mask_chk     = ~|(tl_i.a_mask & ~mask);
           fulldata_chk = |(tl_i.a_mask & mask);
         end
 
-        'h1: begin // 2 Byte
+        64'h1: begin // 2 Byte
           addr_sz_chk  = ~tl_i.a_address[0];
           // check inactive lanes if lower 2B, check a_mask[3:2], if uppwer 2B, a_mask[1:0]
           mask_chk     = (tl_i.a_address[1]) ? ~|(tl_i.a_mask & 4'b0011)
@@ -65,7 +65,7 @@ module tlul_err import tlul_pkg::*; (
           fulldata_chk = (tl_i.a_address[1]) ? &tl_i.a_mask[3:2] : &tl_i.a_mask[1:0] ;
         end
 
-        'h2: begin // 4 Byte
+        64'h2: begin // 4 Byte
           addr_sz_chk  = ~|tl_i.a_address[SubAW-1:0];
           mask_chk     = 1'b1;
           fulldata_chk = &tl_i.a_mask[3:0];
diff --git a/hw/ip/tlul/rtl/tlul_fifo_sync.sv b/hw/ip/tlul/rtl/tlul_fifo_sync.sv
index 59fe3ffd4..071a30b94 100644
--- a/hw/ip/tlul/rtl/tlul_fifo_sync.sv
+++ b/hw/ip/tlul/rtl/tlul_fifo_sync.sv
@@ -7,8 +7,8 @@
 // and one for the response side.
 
 module tlul_fifo_sync #(
-  parameter int unsigned ReqPass  = 1'b1,
-  parameter int unsigned RspPass  = 1'b1,
+  parameter int unsigned ReqPass  = 0,
+  parameter int unsigned RspPass  = 0,
   parameter int unsigned ReqDepth = 2,
   parameter int unsigned RspDepth = 2,
   parameter int unsigned SpareReqW = 1,
diff --git a/hw/ip/tlul/rtl/tlul_socket_m1.sv b/hw/ip/tlul/rtl/tlul_socket_m1.sv
index 8637ad221..fe7aa9858 100644
--- a/hw/ip/tlul/rtl/tlul_socket_m1.sv
+++ b/hw/ip/tlul/rtl/tlul_socket_m1.sv
@@ -92,9 +92,11 @@ module tlul_socket_m1 #(
     // ID Shifting
     logic [STIDW-1:0] reqid_sub;
     logic [IDW-1:0] shifted_id;
+    logic [7:0] tmp;
+    assign tmp = tl_h_i[i].a_source;
     assign reqid_sub = i;   // can cause conversion error?
     assign shifted_id = {
-      tl_h_i[i].a_source[0+:(IDW-STIDW)],
+      tmp[0+:(IDW-STIDW)],
       reqid_sub
     };
 
@@ -102,21 +104,19 @@ module tlul_socket_m1 #(
 
     // assign not connected bits to nc_* signal to make lint happy
     logic [IDW-1 : IDW-STIDW] unused_tl_h_source;
-    assign unused_tl_h_source = tl_h_i[i].a_source[IDW-1 -: STIDW];
+    assign unused_tl_h_source = tmp[IDW-1 -: STIDW];
 
     // Put shifted ID
-    assign hreq_fifo_i = '{
-      a_valid:    tl_h_i[i].a_valid,
-      a_opcode:   tl_h_i[i].a_opcode,
-      a_param:    tl_h_i[i].a_param,
-      a_size:     tl_h_i[i].a_size,
-      a_source:   shifted_id,
-      a_address:  tl_h_i[i].a_address,
-      a_mask:     tl_h_i[i].a_mask,
-      a_data:     tl_h_i[i].a_data,
-      a_user:     tl_h_i[i].a_user,
-      d_ready:    tl_h_i[i].d_ready
-    };
+    assign hreq_fifo_i.a_valid = tl_h_i[i].a_valid;
+    assign hreq_fifo_i.a_opcode = tl_h_i[i].a_opcode;
+    assign hreq_fifo_i.a_param = tl_h_i[i].a_param;
+    assign hreq_fifo_i.a_size = tl_h_i[i].a_size;
+    assign hreq_fifo_i.a_source = shifted_id;
+    assign hreq_fifo_i.a_address = tl_h_i[i].a_address;
+    assign hreq_fifo_i.a_mask = tl_h_i[i].a_mask;
+    assign hreq_fifo_i.a_data = tl_h_i[i].a_data;
+    assign hreq_fifo_i.a_user = tl_h_i[i].a_user;
+    assign hreq_fifo_i.d_ready = tl_h_i[i].d_ready;
 
     tlul_fifo_sync #(
       .ReqPass    (HReqPass[i]),
@@ -237,18 +237,16 @@ module tlul_socket_m1 #(
                                (drsp_fifo_o.d_source[0+:STIDW] == i) &
                               drsp_fifo_o.d_valid;
 
-    assign hrsp_fifo_i[i] = '{
-      d_valid:  hfifo_rspvalid[i],
-      d_opcode: drsp_fifo_o.d_opcode,
-      d_param:  drsp_fifo_o.d_param,
-      d_size:   drsp_fifo_o.d_size,
-      d_source: hfifo_rspid,
-      d_sink:   drsp_fifo_o.d_sink,
-      d_data:   drsp_fifo_o.d_data,
-      d_user:   drsp_fifo_o.d_user,
-      d_error:  drsp_fifo_o.d_error,
-      a_ready:  hgrant[i]
-    };
+    assign hrsp_fifo_i[i].d_valid = hfifo_rspvalid[i];
+    assign hrsp_fifo_i[i].d_opcode = drsp_fifo_o.d_opcode;
+    assign hrsp_fifo_i[i].d_param = drsp_fifo_o.d_param;
+    assign hrsp_fifo_i[i].d_size = drsp_fifo_o.d_size;
+    assign hrsp_fifo_i[i].d_source = hfifo_rspid;
+    assign hrsp_fifo_i[i].d_sink = drsp_fifo_o.d_sink;
+    assign hrsp_fifo_i[i].d_data = drsp_fifo_o.d_data;
+    assign hrsp_fifo_i[i].d_user = drsp_fifo_o.d_user;
+    assign hrsp_fifo_i[i].d_error = drsp_fifo_o.d_error;
+    assign hrsp_fifo_i[i].a_ready = hgrant[i];
   end
 
   // this assertion fails when rspid[0+:STIDW] not in [0..M-1]
diff --git a/hw/ip/uart/rtl/uart_reg_top.sv b/hw/ip/uart/rtl/uart_reg_top.sv
index f25d459ef..c5ea11cb2 100644
--- a/hw/ip/uart/rtl/uart_reg_top.sv
+++ b/hw/ip/uart/rtl/uart_reg_top.sv
@@ -949,7 +949,7 @@ module uart_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (2'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -975,7 +975,7 @@ module uart_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (16'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -1085,7 +1085,7 @@ module uart_reg_top (
   ) u_rdata (
     .re     (rdata_re),
     .we     (1'b0),
-    .wd     ('0),
+    .wd     (8'b0),
     .d      (hw2reg.rdata.d),
     .qre    (reg2hw.rdata.re),
     .qe     (),
@@ -1110,7 +1110,7 @@ module uart_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (8'b0  ),
 
     // to internal hardware
     .qe     (reg2hw.wdata.qe),
@@ -1232,7 +1232,7 @@ module uart_reg_top (
   ) u_fifo_status_txlvl (
     .re     (fifo_status_txlvl_re),
     .we     (1'b0),
-    .wd     ('0),
+    .wd     (6'b0),
     .d      (hw2reg.fifo_status.txlvl.d),
     .qre    (),
     .qe     (),
@@ -1247,7 +1247,7 @@ module uart_reg_top (
   ) u_fifo_status_rxlvl (
     .re     (fifo_status_rxlvl_re),
     .we     (1'b0),
-    .wd     ('0),
+    .wd     (6'b0),
     .d      (hw2reg.fifo_status.rxlvl.d),
     .qre    (),
     .qe     (),
@@ -1317,7 +1317,7 @@ module uart_reg_top (
   ) u_val (
     .re     (val_re),
     .we     (1'b0),
-    .wd     ('0),
+    .wd     (16'b0),
     .d      (hw2reg.val.d),
     .qre    (),
     .qe     (),
@@ -1343,7 +1343,7 @@ module uart_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (24'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -1384,7 +1384,7 @@ module uart_reg_top (
 
   logic [11:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = 12'b000000000000;
     addr_hit[ 0] = (reg_addr == UART_INTR_STATE_OFFSET);
     addr_hit[ 1] = (reg_addr == UART_INTR_ENABLE_OFFSET);
     addr_hit[ 2] = (reg_addr == UART_INTR_TEST_OFFSET);
@@ -1566,7 +1566,7 @@ module uart_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {DW{1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = intr_state_tx_watermark_qs;
@@ -1627,7 +1627,7 @@ module uart_reg_top (
       end
 
       addr_hit[6]: begin
-        reg_rdata_next[7:0] = '0;
+        reg_rdata_next[7:0] = {8{1'b0}};
       end
 
       addr_hit[7]: begin
@@ -1657,7 +1657,7 @@ module uart_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {DW{1'b1}};
       end
     endcase
   end
diff --git a/hw/ip/usbdev/rtl/usbdev.sv b/hw/ip/usbdev/rtl/usbdev.sv
index cbdadd624..fc428d9a0 100644
--- a/hw/ip/usbdev/rtl/usbdev.sv
+++ b/hw/ip/usbdev/rtl/usbdev.sv
@@ -90,8 +90,10 @@ module usbdev (
   // Number of endpoints
   localparam int NEndpoints = usbdev_reg_pkg::NEndpoints;
 
-  usbdev_reg2hw_t reg2hw;
-  usbdev_hw2reg_t hw2reg;
+  //usbdev_reg2hw_t reg2hw;
+  //usbdev_hw2reg_t hw2reg;
+  wire [345:0] reg2hw;
+  reg [176:0] hw2reg;
 
   tlul_pkg::tl_h2d_t tl_sram_h2d [1];
   tlul_pkg::tl_d2h_t tl_sram_d2h [1];
@@ -165,9 +167,9 @@ module usbdev (
   logic [AVFifoWidth - 1:0] usb_av_rdata;
   logic [RXFifoWidth - 1:0] usb_rx_wdata, rx_rdata_raw, rx_rdata;
 
-  assign event_av_overflow = reg2hw.avbuffer.qe & (~av_fifo_wready);
-  assign hw2reg.usbstat.av_full.d = ~av_fifo_wready;
-  assign hw2reg.usbstat.rx_empty.d = ~rx_fifo_rvalid;
+  assign event_av_overflow = reg2hw[268] & (~av_fifo_wready);
+  assign hw2reg[117] = ~av_fifo_wready;
+  assign hw2reg[113] = ~rx_fifo_rvalid;
 
   prim_fifo_async #(
     .Width(AVFifoWidth),
@@ -176,10 +178,10 @@ module usbdev (
     .clk_wr_i  (clk_i),
     .rst_wr_ni (rst_ni),
 
-    .wvalid_i  (reg2hw.avbuffer.qe),
+    .wvalid_i  (reg2hw[268]),
     .wready_o  (av_fifo_wready),
-    .wdata_i   (reg2hw.avbuffer.q),
-    .wdepth_o  (hw2reg.usbstat.av_depth.d),
+    .wdata_i   (reg2hw[273-:5]),
+    .wdepth_o  (hw2reg[120-:3]),
 
     .clk_rd_i  (clk_usb_48mhz_i),
     .rst_rd_ni (rst_usb_48mhz_ni),
@@ -189,8 +191,7 @@ module usbdev (
     .rdepth_o  () // only using empty
   );
 
-  assign rx_fifo_re = reg2hw.rxfifo.ep.re | reg2hw.rxfifo.setup.re |
-                      reg2hw.rxfifo.size.re | reg2hw.rxfifo.buffer.re;
+  assign rx_fifo_re = ((reg2hw[247] | reg2hw[252]) | reg2hw[254]) | reg2hw[262];
 
   prim_fifo_async #(
     .Width(RXFifoWidth),
@@ -209,21 +210,20 @@ module usbdev (
     .rvalid_o  (rx_fifo_rvalid),
     .rready_i  (rx_fifo_re),
     .rdata_o   (rx_rdata_raw),
-    .rdepth_o  (hw2reg.usbstat.rx_depth.d)
+    .rdepth_o  (hw2reg[116-:3])
   );
 
   // Return all zero if the FIFO is empty (instead of X)
-  assign rx_rdata = rx_fifo_rvalid ? rx_rdata_raw : '0;
-  assign hw2reg.rxfifo.ep.d = rx_rdata[16:13];
-  assign hw2reg.rxfifo.setup.d = rx_rdata[12];
-  assign hw2reg.rxfifo.size.d = rx_rdata[11:5];
-  assign hw2reg.rxfifo.buffer.d = rx_rdata[4:0];
+  assign rx_rdata = rx_fifo_rvalid ? rx_rdata_raw : {17 {1'b0}};
+  assign hw2reg[99-:4] = rx_rdata[16:13];
+  assign hw2reg[100] = rx_rdata[12];
+  assign hw2reg[107-:7] = rx_rdata[11:5];
+  assign hw2reg[112-:5] = rx_rdata[4:0];
   assign event_pkt_received = rx_fifo_rvalid;
 
   // The rxfifo register is hrw, but we just need the read enables.
   logic [16:0] unused_rxfifo_q;
-  assign unused_rxfifo_q = {reg2hw.rxfifo.ep.q, reg2hw.rxfifo.setup.q,
-                            reg2hw.rxfifo.size.q, reg2hw.rxfifo.buffer.q};
+  assign unused_rxfifo_q = {reg2hw[251-:4], reg2hw[253], reg2hw[261-:7], reg2hw[267-:5]};
 
   ////////////////////////////////////
   // IN (Transmit) interface config //
@@ -245,15 +245,15 @@ module usbdev (
   // RX enables
   always_comb begin : proc_map_rxenable
     for (int i = 0; i < NEndpoints; i++) begin
-      enable_setup[i] = reg2hw.rxenable_setup[i].q;
-      enable_out[i]   = reg2hw.rxenable_out[i].q;
+      enable_setup[i] = reg2hw[235 + i];
+      enable_out[i]   = reg2hw[223 + i];
     end
   end
 
   // STALL for both directions
   always_comb begin : proc_map_stall
     for (int i = 0; i < NEndpoints; i++) begin
-      ep_stall[i] = reg2hw.stall[i];
+      ep_stall[i] = reg2hw[211 + i+:1];
     end
   end
 
@@ -269,21 +269,21 @@ module usbdev (
   // CDC: ok, quasi-static
   always_comb begin : proc_map_iso
     for (int i = 0; i < NEndpoints; i++) begin
-      ep_iso[i] = reg2hw.iso[i].q;
+      ep_iso[i] = reg2hw[31 + i];
     end
   end
 
   // CDC: flop_2sync for ready bit covers others so assigns are ok
   always_comb begin : proc_map_buf_size
     for (int i = 0; i < NEndpoints; i++) begin
-      usb_in_buf[i]  = reg2hw.configin[i].buffer.q;
-      usb_in_size[i] = reg2hw.configin[i].size.q;
+      usb_in_buf[i]  = reg2hw[43 + ((i * 14) + 13)-:5];
+      usb_in_size[i] = reg2hw[43 + ((i * 14) + 8)-:7];
     end
   end
 
   always_comb begin : proc_map_rdy_reg2hw
     for (int i = 0; i < NEndpoints; i++) begin
-      in_rdy_async[i] = reg2hw.configin[i].rdy.q;
+      in_rdy_async[i] = reg2hw[43 + (i * 14)];
     end
   end
 
@@ -301,7 +301,7 @@ module usbdev (
   always_comb begin : proc_data_toggle_clear_qe
     data_toggle_clear_qe = 1'b0;
     for (int i = 0; i < NEndpoints; i++) begin
-      data_toggle_clear_qe |= reg2hw.data_toggle_clear[i].qe;
+      data_toggle_clear_qe |= reg2hw[7 + (i * 2)];
     end
   end
 
@@ -318,7 +318,7 @@ module usbdev (
     usb_data_toggle_clear = '0;
     for (int i = 0; i < NEndpoints; i++) begin
       if (usb_data_toggle_clear_en) begin
-        usb_data_toggle_clear[i] = reg2hw.data_toggle_clear[i].q;
+        usb_data_toggle_clear[i] = reg2hw[7 + ((i * 2) + 1)];
       end
     end
   end
@@ -345,8 +345,8 @@ module usbdev (
 
   always_comb begin : proc_map_sent
     for (int i = 0; i < NEndpoints; i++) begin
-      hw2reg.in_sent[i].de = set_sentbit[i];
-      hw2reg.in_sent[i].d  = 1'b1;
+      hw2reg[72 + (i * 2)] = set_sentbit[i];
+      hw2reg[72 + ((i * 2) + 1)] = 1'b1;
     end
   end
 
@@ -441,16 +441,16 @@ module usbdev (
 
   always_comb begin : proc_map_rdy_hw2reg
     for (int i = 0; i < NEndpoints; i++) begin
-      hw2reg.configin[i].rdy.de = clear_rdybit[i];
-      hw2reg.configin[i].rdy.d  = 1'b0;
+      hw2reg[i * 4] = clear_rdybit[i];
+      hw2reg[(i * 4) + 1] = 1'b0;
     end
   end
 
   // Update the pending bit by copying the ready bit that is about to clear
   always_comb begin : proc_map_pend
     for (int i = 0; i < NEndpoints; i++) begin
-      hw2reg.configin[i].pend.de = update_pend[i];
-      hw2reg.configin[i].pend.d  = reg2hw.configin[i].rdy.q | reg2hw.configin[i].pend.q;
+      hw2reg[(i * 4) + 2] = update_pend[i];
+      hw2reg[(i * 4) + 3] = reg2hw[43 + (i * 14)] | reg2hw[43 + ((i * 14) + 1)];
     end
   end
 
@@ -516,7 +516,7 @@ module usbdev (
     .devaddr_i            (usb_device_addr),
     .clr_devaddr_o        (usb_clr_devaddr),
     .ep_iso_i             (ep_iso), // cdc ok, quasi-static
-    .cfg_eop_single_bit_i (reg2hw.phy_config.eop_single_bit.q), // cdc ok: quasi-static
+    .cfg_eop_single_bit_i (reg2hw[4]), // cdc ok: quasi-static
     .tx_osc_test_mode_i   (1'b0), // cdc ok: quasi-static & testmode only
     .data_toggle_clear_i  (usb_data_toggle_clear),
 
@@ -548,7 +548,7 @@ module usbdev (
     .clk_i  (clk_i),
     .rst_ni (rst_ni),
     .d_i    ({usb_link_state,              usb_frame}),
-    .q_o    ({hw2reg.usbstat.link_state.d, hw2reg.usbstat.frame.d})
+    .q_o    ({hw2reg[124-:3], hw2reg[136-:11]})
   );
 
   // sys clk -> USB clk
@@ -557,13 +557,13 @@ module usbdev (
   ) cdc_sys_to_usb (
     .clk_i  (clk_usb_48mhz_i),
     .rst_ni (rst_usb_48mhz_ni),
-    .d_i    ({reg2hw.usbctrl.enable.q, reg2hw.usbctrl.device_address.q}),
+    .d_i    ({reg2hw[281], reg2hw[280-:7]}),
     .q_o    ({usb_enable,              usb_device_addr})
   );
 
   // CDC for event signals (arguably they are there for a long time so would be ok)
   // Just want a pulse to ensure only one interrupt for an event
-  usbdev_flop_2syncpulse #(.Width(5)) syncevent (
+  usbdev_flop_2syncpulse #(.UsbWidth(5)) syncevent (
     .clk_i  (clk_i),
     .rst_ni (rst_ni),
     .d_i    ({usb_event_disconnect, usb_event_link_reset, usb_event_link_suspend,
@@ -582,7 +582,7 @@ module usbdev (
     .dst_pulse_o (event_link_resume)
   );
 
-  assign hw2reg.usbstat.host_lost.d = event_host_lost;
+  assign hw2reg[125] = event_host_lost;
 
   // resets etc cause the device address to clear
   prim_pulse_sync usbdev_devclr (
@@ -591,9 +591,9 @@ module usbdev (
     .rst_src_ni  (rst_usb_48mhz_ni),
     .rst_dst_ni  (rst_ni),
     .src_pulse_i (usb_clr_devaddr),
-    .dst_pulse_o (hw2reg.usbctrl.device_address.de)
+    .dst_pulse_o (hw2reg[137])
   );
-  assign hw2reg.usbctrl.device_address.d = '0;
+  assign hw2reg[144-:7] = {7 {1'b0}};
 
   // AV empty is a single pulse so needs pulsesync
   prim_pulse_sync sync_usb_event_av_empty (
@@ -621,11 +621,11 @@ module usbdev (
   // setup_received, as it is stable
   always_comb begin : proc_stall_tieoff
     for (int i = 0; i < NEndpoints; i++) begin
-      hw2reg.stall[i].d  = 1'b0;
+      hw2reg[48 + ((i * 2) + 1)]  = 1'b0;
       if (setup_received && usb_out_endpoint_val && usb_out_endpoint == 4'(unsigned'(i))) begin
-        hw2reg.stall[i].de = 1'b1;
+        hw2reg[48 + (i * 2)] = 1'b1;
       end else begin
-        hw2reg.stall[i].de = 1'b0;
+        hw2reg[48 + (i * 2)] = 1'b0;
       end
     end
   end
@@ -654,8 +654,8 @@ module usbdev (
 
   // SRAM Wrapper
   prim_ram_2p_async_adv #(
-    .Depth (SramDepth),
-    .Width (SramDw),    // 32 x 512 --> 2kB
+    .RamDepth (SramDepth),
+    .RamWidth (SramDw),    // 32 x 512 --> 2kB
     .CfgW  (8),
 
     .EnableECC           (0), // No Protection
@@ -706,177 +706,177 @@ module usbdev (
 
   prim_intr_hw #(.Width(1)) intr_hw_pkt_received (
     .event_intr_i           (event_pkt_received),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.pkt_received.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.pkt_received.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.pkt_received.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.pkt_received.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.pkt_received.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.pkt_received.d),
+    .reg2hw_intr_enable_q_i(reg2hw[329]),
+    .reg2hw_intr_test_q_i(reg2hw[313]),
+    .reg2hw_intr_test_qe_i(reg2hw[312]),
+    .reg2hw_intr_state_q_i(reg2hw[345]),
+    .hw2reg_intr_state_de_o (hw2reg[175]),
+    .hw2reg_intr_state_d_o  (hw2reg[176]),
     .intr_o                 (intr_pkt_received_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_hw_pkt_sent (
     .event_intr_i           (set_sent),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.pkt_sent.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.pkt_sent.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.pkt_sent.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.pkt_sent.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.pkt_sent.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.pkt_sent.d),
+    .reg2hw_intr_enable_q_i(reg2hw[328]),
+    .reg2hw_intr_test_q_i(reg2hw[311]),
+    .reg2hw_intr_test_qe_i(reg2hw[310]),
+    .reg2hw_intr_state_q_i(reg2hw[344]),
+    .hw2reg_intr_state_de_o (hw2reg[173]),
+    .hw2reg_intr_state_d_o  (hw2reg[174]),
     .intr_o                 (intr_pkt_sent_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_disconnected (
     .event_intr_i           (event_disconnect),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.disconnected.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.disconnected.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.disconnected.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.disconnected.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.disconnected.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.disconnected.d),
+    .reg2hw_intr_enable_q_i(reg2hw[327]),
+    .reg2hw_intr_test_q_i(reg2hw[309]),
+    .reg2hw_intr_test_qe_i(reg2hw[308]),
+    .reg2hw_intr_state_q_i(reg2hw[343]),
+    .hw2reg_intr_state_de_o (hw2reg[171]),
+    .hw2reg_intr_state_d_o  (hw2reg[172]),
     .intr_o                 (intr_disconnected_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_connected (
     .event_intr_i           (event_connect),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.connected.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.connected.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.connected.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.connected.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.connected.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.connected.d),
+    .reg2hw_intr_enable_q_i(reg2hw[314]),
+    .reg2hw_intr_test_q_i(reg2hw[283]),
+    .reg2hw_intr_test_qe_i(reg2hw[282]),
+    .reg2hw_intr_state_q_i(reg2hw[330]),
+    .hw2reg_intr_state_de_o (hw2reg[145]),
+    .hw2reg_intr_state_d_o  (hw2reg[146]),
     .intr_o                 (intr_connected_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_host_lost (
     .event_intr_i           (event_host_lost),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.host_lost.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.host_lost.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.host_lost.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.host_lost.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.host_lost.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.host_lost.d),
+    .reg2hw_intr_enable_q_i(reg2hw[326]),
+    .reg2hw_intr_test_q_i(reg2hw[307]),
+    .reg2hw_intr_test_qe_i(reg2hw[306]),
+    .reg2hw_intr_state_q_i(reg2hw[342]),
+    .hw2reg_intr_state_de_o (hw2reg[169]),
+    .hw2reg_intr_state_d_o  (hw2reg[170]),
     .intr_o                 (intr_host_lost_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_link_reset (
     .event_intr_i           (event_link_reset),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.link_reset.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.link_reset.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.link_reset.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.link_reset.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.link_reset.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.link_reset.d),
+    .reg2hw_intr_enable_q_i(reg2hw[325]),
+    .reg2hw_intr_test_q_i(reg2hw[305]),
+    .reg2hw_intr_test_qe_i(reg2hw[304]),
+    .reg2hw_intr_state_q_i(reg2hw[341]),
+    .hw2reg_intr_state_de_o (hw2reg[167]),
+    .hw2reg_intr_state_d_o  (hw2reg[168]),
     .intr_o                 (intr_link_reset_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_link_suspend (
     .event_intr_i           (event_link_suspend),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.link_suspend.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.link_suspend.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.link_suspend.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.link_suspend.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.link_suspend.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.link_suspend.d),
+    .reg2hw_intr_enable_q_i(reg2hw[324]),
+    .reg2hw_intr_test_q_i(reg2hw[303]),
+    .reg2hw_intr_test_qe_i(reg2hw[302]),
+    .reg2hw_intr_state_q_i(reg2hw[340]),
+    .hw2reg_intr_state_de_o (hw2reg[165]),
+    .hw2reg_intr_state_d_o  (hw2reg[166]),
     .intr_o                 (intr_link_suspend_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_link_resume (
     .event_intr_i           (event_link_resume),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.link_resume.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.link_resume.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.link_resume.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.link_resume.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.link_resume.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.link_resume.d),
+    .reg2hw_intr_enable_q_i(reg2hw[323]),
+    .reg2hw_intr_test_q_i(reg2hw[301]),
+    .reg2hw_intr_test_qe_i(reg2hw[300]),
+    .reg2hw_intr_state_q_i(reg2hw[339]),
+    .hw2reg_intr_state_de_o (hw2reg[163]),
+    .hw2reg_intr_state_d_o  (hw2reg[164]),
     .intr_o                 (intr_link_resume_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_av_empty (
     .event_intr_i           (event_av_empty),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.av_empty.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.av_empty.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.av_empty.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.av_empty.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.av_empty.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.av_empty.d),
+    .reg2hw_intr_enable_q_i(reg2hw[322]),
+    .reg2hw_intr_test_q_i(reg2hw[299]),
+    .reg2hw_intr_test_qe_i(reg2hw[298]),
+    .reg2hw_intr_state_q_i(reg2hw[338]),
+    .hw2reg_intr_state_de_o (hw2reg[161]),
+    .hw2reg_intr_state_d_o  (hw2reg[162]),
     .intr_o                 (intr_av_empty_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_rx_full (
     .event_intr_i           (event_rx_full),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.rx_full.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.rx_full.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.rx_full.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.rx_full.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.rx_full.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.rx_full.d),
+    .reg2hw_intr_enable_q_i(reg2hw[321]),
+    .reg2hw_intr_test_q_i(reg2hw[297]),
+    .reg2hw_intr_test_qe_i(reg2hw[296]),
+    .reg2hw_intr_state_q_i(reg2hw[337]),
+    .hw2reg_intr_state_de_o (hw2reg[159]),
+    .hw2reg_intr_state_d_o  (hw2reg[160]),
     .intr_o                 (intr_rx_full_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_av_overflow (
     .event_intr_i           (event_av_overflow),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.av_overflow.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.av_overflow.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.av_overflow.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.av_overflow.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.av_overflow.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.av_overflow.d),
+    .reg2hw_intr_enable_q_i(reg2hw[320]),
+    .reg2hw_intr_test_q_i(reg2hw[295]),
+    .reg2hw_intr_test_qe_i(reg2hw[294]),
+    .reg2hw_intr_state_q_i(reg2hw[336]),
+    .hw2reg_intr_state_de_o (hw2reg[157]),
+    .hw2reg_intr_state_d_o  (hw2reg[158]),
     .intr_o                 (intr_av_overflow_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_link_in_err (
     .event_intr_i           (event_in_err),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.link_in_err.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.link_in_err.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.link_in_err.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.link_in_err.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.link_in_err.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.link_in_err.d),
+    .reg2hw_intr_enable_q_i(reg2hw[319]),
+    .reg2hw_intr_test_q_i(reg2hw[293]),
+    .reg2hw_intr_test_qe_i(reg2hw[292]),
+    .reg2hw_intr_state_q_i(reg2hw[335]),
+    .hw2reg_intr_state_de_o (hw2reg[155]),
+    .hw2reg_intr_state_d_o  (hw2reg[156]),
     .intr_o                 (intr_link_in_err_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_rx_crc_err (
     .event_intr_i           (event_rx_crc_err),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.rx_crc_err.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.rx_crc_err.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.rx_crc_err.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.rx_crc_err.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.rx_crc_err.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.rx_crc_err.d),
+    .reg2hw_intr_enable_q_i(reg2hw[318]),
+    .reg2hw_intr_test_q_i(reg2hw[291]),
+    .reg2hw_intr_test_qe_i(reg2hw[290]),
+    .reg2hw_intr_state_q_i(reg2hw[334]),
+    .hw2reg_intr_state_de_o (hw2reg[153]),
+    .hw2reg_intr_state_d_o  (hw2reg[154]),
     .intr_o                 (intr_rx_crc_err_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_rx_pid_err (
     .event_intr_i           (event_rx_pid_err),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.rx_pid_err.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.rx_pid_err.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.rx_pid_err.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.rx_pid_err.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.rx_pid_err.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.rx_pid_err.d),
+    .reg2hw_intr_enable_q_i(reg2hw[317]),
+    .reg2hw_intr_test_q_i(reg2hw[289]),
+    .reg2hw_intr_test_qe_i(reg2hw[288]),
+    .reg2hw_intr_state_q_i(reg2hw[333]),
+    .hw2reg_intr_state_de_o (hw2reg[151]),
+    .hw2reg_intr_state_d_o  (hw2reg[152]),
     .intr_o                 (intr_rx_pid_err_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_rx_bitstuff_err (
     .event_intr_i           (event_rx_bitstuff_err),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.rx_bitstuff_err.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.rx_bitstuff_err.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.rx_bitstuff_err.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.rx_bitstuff_err.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.rx_bitstuff_err.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.rx_bitstuff_err.d),
+    .reg2hw_intr_enable_q_i(reg2hw[316]),
+    .reg2hw_intr_test_q_i(reg2hw[287]),
+    .reg2hw_intr_test_qe_i(reg2hw[286]),
+    .reg2hw_intr_state_q_i(reg2hw[332]),
+    .hw2reg_intr_state_de_o (hw2reg[149]),
+    .hw2reg_intr_state_d_o  (hw2reg[150]),
     .intr_o                 (intr_rx_bitstuff_err_o)
   );
 
   prim_intr_hw #(.Width(1)) intr_frame (
     .event_intr_i           (event_frame),
-    .reg2hw_intr_enable_q_i (reg2hw.intr_enable.frame.q),
-    .reg2hw_intr_test_q_i   (reg2hw.intr_test.frame.q),
-    .reg2hw_intr_test_qe_i  (reg2hw.intr_test.frame.qe),
-    .reg2hw_intr_state_q_i  (reg2hw.intr_state.frame.q),
-    .hw2reg_intr_state_de_o (hw2reg.intr_state.frame.de),
-    .hw2reg_intr_state_d_o  (hw2reg.intr_state.frame.d),
+    .reg2hw_intr_enable_q_i(reg2hw[315]),
+    .reg2hw_intr_test_q_i(reg2hw[285]),
+    .reg2hw_intr_test_qe_i(reg2hw[284]),
+    .reg2hw_intr_state_q_i(reg2hw[331]),
+    .hw2reg_intr_state_de_o (hw2reg[147]),
+    .hw2reg_intr_state_d_o  (hw2reg[148]),
     .intr_o                 (intr_frame_o)
   );
 
@@ -892,8 +892,8 @@ module usbdev (
     .rst_usb_48mhz_ni       (rst_usb_48mhz_ni),
 
     // Register interface
-    .sys_reg2hw_config_i    (reg2hw.phy_config),
-    .sys_usb_sense_o        (hw2reg.usbstat.sense.d),
+    .sys_reg2hw_config_i    (reg2hw[6-:7]),
+    .sys_usb_sense_o        (hw2reg[121]),
 
     // Chip IO
     .cio_usb_d_i            (cio_d_i),
@@ -952,7 +952,7 @@ module usbdev (
   ) usbdev_sync_phy_config (
     .clk_i  (clk_usb_48mhz_i),
     .rst_ni (rst_usb_48mhz_ni),
-    .d_i    (reg2hw.phy_config.usb_ref_disable.q),
+    .d_i    (reg2hw[-0]),
     .q_o    (usb_ref_disable)
   );
 
diff --git a/hw/ip/usbdev/rtl/usbdev_flop_2syncpulse.sv b/hw/ip/usbdev/rtl/usbdev_flop_2syncpulse.sv
index 9889b0a1f..9b297e67f 100644
--- a/hw/ip/usbdev/rtl/usbdev_flop_2syncpulse.sv
+++ b/hw/ip/usbdev/rtl/usbdev_flop_2syncpulse.sv
@@ -5,17 +5,17 @@
 // Generic double-synchronizer flop followed by pulse generation
 
 module usbdev_flop_2syncpulse #(
-  parameter int unsigned Width = 16
+  parameter int unsigned UsbWidth = 16
 ) (
   input  logic             clk_i,    // receive clock
   input  logic             rst_ni,
-  input  logic [Width-1:0] d_i,
-  output logic [Width-1:0] q_o
+  input  logic [UsbWidth-1:0] d_i,
+  output logic [UsbWidth-1:0] q_o
 );
 
   // double-flop synchronizer cell
-  logic [Width-1:0] d_sync;
-  prim_flop_2sync #(.Width (Width)) prim_flop_2sync (
+  logic [UsbWidth-1:0] d_sync;
+  prim_flop_2sync #(.Width (UsbWidth)) prim_flop_2sync (
     .clk_i,
     .rst_ni,
     .d_i,
@@ -23,7 +23,7 @@ module usbdev_flop_2syncpulse #(
   );
 
   // delay d_sync by 1 cycle
-  logic [Width-1:0] d_sync_q;
+  logic [UsbWidth-1:0] d_sync_q;
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       d_sync_q <= '0;
diff --git a/hw/ip/usbdev/rtl/usbdev_reg_top.sv b/hw/ip/usbdev/rtl/usbdev_reg_top.sv
index 4cff2c116..50b7bb01c 100644
--- a/hw/ip/usbdev/rtl/usbdev_reg_top.sv
+++ b/hw/ip/usbdev/rtl/usbdev_reg_top.sv
@@ -19,15 +19,15 @@ module usbdev_reg_top (
   input  tlul_pkg::tl_d2h_t tl_win_i  [1],
 
   // To HW
-  output usbdev_reg_pkg::usbdev_reg2hw_t reg2hw, // Write
-  input  usbdev_reg_pkg::usbdev_hw2reg_t hw2reg, // Read
+  //output usbdev_reg_pkg::usbdev_reg2hw_t reg2hw, // Write
+  //input  usbdev_reg_pkg::usbdev_hw2reg_t hw2reg, // Read
+  output wire [345:0] reg2hw,
+  input wire [176:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
 );
 
-  import usbdev_reg_pkg::* ;
-
   localparam int AW = 12;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
@@ -647,4714 +647,2720 @@ module usbdev_reg_top (
   logic phy_config_usb_ref_disable_wd;
   logic phy_config_usb_ref_disable_we;
 
-  // Register instances
-  // R[intr_state]: V(False)
-
-  //   F[pkt_received]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_pkt_received (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_pkt_received_we),
-    .wd     (intr_state_pkt_received_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.pkt_received.de),
-    .d      (hw2reg.intr_state.pkt_received.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.pkt_received.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_pkt_received_qs)
-  );
-
-
-  //   F[pkt_sent]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_pkt_sent (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_pkt_sent_we),
-    .wd     (intr_state_pkt_sent_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.pkt_sent.de),
-    .d      (hw2reg.intr_state.pkt_sent.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.pkt_sent.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_pkt_sent_qs)
-  );
-
-
-  //   F[disconnected]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_disconnected (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_disconnected_we),
-    .wd     (intr_state_disconnected_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.disconnected.de),
-    .d      (hw2reg.intr_state.disconnected.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.disconnected.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_disconnected_qs)
-  );
-
-
-  //   F[host_lost]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_host_lost (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_host_lost_we),
-    .wd     (intr_state_host_lost_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.host_lost.de),
-    .d      (hw2reg.intr_state.host_lost.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.host_lost.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_host_lost_qs)
-  );
-
-
-  //   F[link_reset]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_link_reset (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_link_reset_we),
-    .wd     (intr_state_link_reset_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.link_reset.de),
-    .d      (hw2reg.intr_state.link_reset.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.link_reset.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_link_reset_qs)
-  );
-
-
-  //   F[link_suspend]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_link_suspend (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_link_suspend_we),
-    .wd     (intr_state_link_suspend_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.link_suspend.de),
-    .d      (hw2reg.intr_state.link_suspend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.link_suspend.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_link_suspend_qs)
-  );
-
-
-  //   F[link_resume]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_link_resume (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_link_resume_we),
-    .wd     (intr_state_link_resume_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.link_resume.de),
-    .d      (hw2reg.intr_state.link_resume.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.link_resume.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_link_resume_qs)
-  );
-
-
-  //   F[av_empty]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_av_empty (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_av_empty_we),
-    .wd     (intr_state_av_empty_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.av_empty.de),
-    .d      (hw2reg.intr_state.av_empty.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.av_empty.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_av_empty_qs)
-  );
-
-
-  //   F[rx_full]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_rx_full (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_rx_full_we),
-    .wd     (intr_state_rx_full_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.rx_full.de),
-    .d      (hw2reg.intr_state.rx_full.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.rx_full.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_rx_full_qs)
-  );
-
-
-  //   F[av_overflow]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_av_overflow (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_av_overflow_we),
-    .wd     (intr_state_av_overflow_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.av_overflow.de),
-    .d      (hw2reg.intr_state.av_overflow.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.av_overflow.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_av_overflow_qs)
-  );
-
-
-  //   F[link_in_err]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_link_in_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_link_in_err_we),
-    .wd     (intr_state_link_in_err_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.link_in_err.de),
-    .d      (hw2reg.intr_state.link_in_err.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.link_in_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_link_in_err_qs)
-  );
-
-
-  //   F[rx_crc_err]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_rx_crc_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_rx_crc_err_we),
-    .wd     (intr_state_rx_crc_err_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.rx_crc_err.de),
-    .d      (hw2reg.intr_state.rx_crc_err.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.rx_crc_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_rx_crc_err_qs)
-  );
-
-
-  //   F[rx_pid_err]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_rx_pid_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_rx_pid_err_we),
-    .wd     (intr_state_rx_pid_err_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.rx_pid_err.de),
-    .d      (hw2reg.intr_state.rx_pid_err.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.rx_pid_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_rx_pid_err_qs)
-  );
-
-
-  //   F[rx_bitstuff_err]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_rx_bitstuff_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_rx_bitstuff_err_we),
-    .wd     (intr_state_rx_bitstuff_err_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.rx_bitstuff_err.de),
-    .d      (hw2reg.intr_state.rx_bitstuff_err.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.rx_bitstuff_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_rx_bitstuff_err_qs)
-  );
-
-
-  //   F[frame]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_frame (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_frame_we),
-    .wd     (intr_state_frame_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.frame.de),
-    .d      (hw2reg.intr_state.frame.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.frame.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_frame_qs)
-  );
-
-
-  //   F[connected]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_intr_state_connected (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_state_connected_we),
-    .wd     (intr_state_connected_wd),
-
-    // from internal hardware
-    .de     (hw2reg.intr_state.connected.de),
-    .d      (hw2reg.intr_state.connected.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_state.connected.q ),
-
-    // to register interface (read)
-    .qs     (intr_state_connected_qs)
-  );
-
-
-  // R[intr_enable]: V(False)
-
-  //   F[pkt_received]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_pkt_received (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_pkt_received_we),
-    .wd     (intr_enable_pkt_received_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.pkt_received.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_pkt_received_qs)
-  );
-
-
-  //   F[pkt_sent]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_pkt_sent (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_pkt_sent_we),
-    .wd     (intr_enable_pkt_sent_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.pkt_sent.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_pkt_sent_qs)
-  );
-
-
-  //   F[disconnected]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_disconnected (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_disconnected_we),
-    .wd     (intr_enable_disconnected_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.disconnected.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_disconnected_qs)
-  );
-
-
-  //   F[host_lost]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_host_lost (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_host_lost_we),
-    .wd     (intr_enable_host_lost_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.host_lost.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_host_lost_qs)
-  );
-
-
-  //   F[link_reset]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_link_reset (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_link_reset_we),
-    .wd     (intr_enable_link_reset_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.link_reset.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_link_reset_qs)
-  );
-
-
-  //   F[link_suspend]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_link_suspend (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_link_suspend_we),
-    .wd     (intr_enable_link_suspend_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.link_suspend.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_link_suspend_qs)
-  );
-
-
-  //   F[link_resume]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_link_resume (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_link_resume_we),
-    .wd     (intr_enable_link_resume_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.link_resume.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_link_resume_qs)
-  );
-
-
-  //   F[av_empty]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_av_empty (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_av_empty_we),
-    .wd     (intr_enable_av_empty_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.av_empty.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_av_empty_qs)
-  );
-
-
-  //   F[rx_full]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_rx_full (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_rx_full_we),
-    .wd     (intr_enable_rx_full_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.rx_full.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_rx_full_qs)
-  );
-
-
-  //   F[av_overflow]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_av_overflow (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_av_overflow_we),
-    .wd     (intr_enable_av_overflow_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.av_overflow.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_av_overflow_qs)
-  );
-
-
-  //   F[link_in_err]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_link_in_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_link_in_err_we),
-    .wd     (intr_enable_link_in_err_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.link_in_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_link_in_err_qs)
-  );
-
-
-  //   F[rx_crc_err]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_rx_crc_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_rx_crc_err_we),
-    .wd     (intr_enable_rx_crc_err_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.rx_crc_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_rx_crc_err_qs)
-  );
-
-
-  //   F[rx_pid_err]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_rx_pid_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_rx_pid_err_we),
-    .wd     (intr_enable_rx_pid_err_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.rx_pid_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_rx_pid_err_qs)
-  );
-
-
-  //   F[rx_bitstuff_err]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_rx_bitstuff_err (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_rx_bitstuff_err_we),
-    .wd     (intr_enable_rx_bitstuff_err_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.rx_bitstuff_err.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_rx_bitstuff_err_qs)
-  );
-
-
-  //   F[frame]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_frame (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_frame_we),
-    .wd     (intr_enable_frame_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.frame.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_frame_qs)
-  );
-
-
-  //   F[connected]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_intr_enable_connected (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (intr_enable_connected_we),
-    .wd     (intr_enable_connected_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.intr_enable.connected.q ),
-
-    // to register interface (read)
-    .qs     (intr_enable_connected_qs)
-  );
-
-
-  // R[intr_test]: V(True)
-
-  //   F[pkt_received]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_pkt_received (
-    .re     (1'b0),
-    .we     (intr_test_pkt_received_we),
-    .wd     (intr_test_pkt_received_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.pkt_received.qe),
-    .q      (reg2hw.intr_test.pkt_received.q ),
-    .qs     ()
-  );
-
-
-  //   F[pkt_sent]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_pkt_sent (
-    .re     (1'b0),
-    .we     (intr_test_pkt_sent_we),
-    .wd     (intr_test_pkt_sent_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.pkt_sent.qe),
-    .q      (reg2hw.intr_test.pkt_sent.q ),
-    .qs     ()
-  );
-
-
-  //   F[disconnected]: 2:2
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_disconnected (
-    .re     (1'b0),
-    .we     (intr_test_disconnected_we),
-    .wd     (intr_test_disconnected_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.disconnected.qe),
-    .q      (reg2hw.intr_test.disconnected.q ),
-    .qs     ()
-  );
-
-
-  //   F[host_lost]: 3:3
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_host_lost (
-    .re     (1'b0),
-    .we     (intr_test_host_lost_we),
-    .wd     (intr_test_host_lost_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.host_lost.qe),
-    .q      (reg2hw.intr_test.host_lost.q ),
-    .qs     ()
-  );
-
-
-  //   F[link_reset]: 4:4
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_link_reset (
-    .re     (1'b0),
-    .we     (intr_test_link_reset_we),
-    .wd     (intr_test_link_reset_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.link_reset.qe),
-    .q      (reg2hw.intr_test.link_reset.q ),
-    .qs     ()
-  );
-
-
-  //   F[link_suspend]: 5:5
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_link_suspend (
-    .re     (1'b0),
-    .we     (intr_test_link_suspend_we),
-    .wd     (intr_test_link_suspend_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.link_suspend.qe),
-    .q      (reg2hw.intr_test.link_suspend.q ),
-    .qs     ()
-  );
-
-
-  //   F[link_resume]: 6:6
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_link_resume (
-    .re     (1'b0),
-    .we     (intr_test_link_resume_we),
-    .wd     (intr_test_link_resume_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.link_resume.qe),
-    .q      (reg2hw.intr_test.link_resume.q ),
-    .qs     ()
-  );
-
-
-  //   F[av_empty]: 7:7
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_av_empty (
-    .re     (1'b0),
-    .we     (intr_test_av_empty_we),
-    .wd     (intr_test_av_empty_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.av_empty.qe),
-    .q      (reg2hw.intr_test.av_empty.q ),
-    .qs     ()
-  );
-
-
-  //   F[rx_full]: 8:8
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_rx_full (
-    .re     (1'b0),
-    .we     (intr_test_rx_full_we),
-    .wd     (intr_test_rx_full_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.rx_full.qe),
-    .q      (reg2hw.intr_test.rx_full.q ),
-    .qs     ()
-  );
-
-
-  //   F[av_overflow]: 9:9
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_av_overflow (
-    .re     (1'b0),
-    .we     (intr_test_av_overflow_we),
-    .wd     (intr_test_av_overflow_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.av_overflow.qe),
-    .q      (reg2hw.intr_test.av_overflow.q ),
-    .qs     ()
-  );
-
-
-  //   F[link_in_err]: 10:10
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_link_in_err (
-    .re     (1'b0),
-    .we     (intr_test_link_in_err_we),
-    .wd     (intr_test_link_in_err_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.link_in_err.qe),
-    .q      (reg2hw.intr_test.link_in_err.q ),
-    .qs     ()
-  );
-
-
-  //   F[rx_crc_err]: 11:11
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_rx_crc_err (
-    .re     (1'b0),
-    .we     (intr_test_rx_crc_err_we),
-    .wd     (intr_test_rx_crc_err_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.rx_crc_err.qe),
-    .q      (reg2hw.intr_test.rx_crc_err.q ),
-    .qs     ()
-  );
-
-
-  //   F[rx_pid_err]: 12:12
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_rx_pid_err (
-    .re     (1'b0),
-    .we     (intr_test_rx_pid_err_we),
-    .wd     (intr_test_rx_pid_err_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.rx_pid_err.qe),
-    .q      (reg2hw.intr_test.rx_pid_err.q ),
-    .qs     ()
-  );
-
-
-  //   F[rx_bitstuff_err]: 13:13
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_rx_bitstuff_err (
-    .re     (1'b0),
-    .we     (intr_test_rx_bitstuff_err_we),
-    .wd     (intr_test_rx_bitstuff_err_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.rx_bitstuff_err.qe),
-    .q      (reg2hw.intr_test.rx_bitstuff_err.q ),
-    .qs     ()
-  );
-
-
-  //   F[frame]: 14:14
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_frame (
-    .re     (1'b0),
-    .we     (intr_test_frame_we),
-    .wd     (intr_test_frame_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.frame.qe),
-    .q      (reg2hw.intr_test.frame.q ),
-    .qs     ()
-  );
-
-
-  //   F[connected]: 15:15
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_intr_test_connected (
-    .re     (1'b0),
-    .we     (intr_test_connected_we),
-    .wd     (intr_test_connected_wd),
-    .d      ('0),
-    .qre    (),
-    .qe     (reg2hw.intr_test.connected.qe),
-    .q      (reg2hw.intr_test.connected.q ),
-    .qs     ()
-  );
-
-
-  // R[usbctrl]: V(False)
-
-  //   F[enable]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_usbctrl_enable (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (usbctrl_enable_we),
-    .wd     (usbctrl_enable_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.usbctrl.enable.q ),
-
-    // to register interface (read)
-    .qs     (usbctrl_enable_qs)
-  );
-
-
-  //   F[device_address]: 22:16
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_usbctrl_device_address (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (usbctrl_device_address_we),
-    .wd     (usbctrl_device_address_wd),
-
-    // from internal hardware
-    .de     (hw2reg.usbctrl.device_address.de),
-    .d      (hw2reg.usbctrl.device_address.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.usbctrl.device_address.q ),
-
-    // to register interface (read)
-    .qs     (usbctrl_device_address_qs)
-  );
-
-
-  // R[usbstat]: V(True)
-
-  //   F[frame]: 10:0
-  prim_subreg_ext #(
-    .DW    (11)
-  ) u_usbstat_frame (
-    .re     (usbstat_frame_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.frame.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_frame_qs)
-  );
-
-
-  //   F[host_lost]: 11:11
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_usbstat_host_lost (
-    .re     (usbstat_host_lost_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.host_lost.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_host_lost_qs)
-  );
-
-
-  //   F[link_state]: 14:12
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_usbstat_link_state (
-    .re     (usbstat_link_state_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.link_state.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_link_state_qs)
-  );
-
-
-  //   F[sense]: 15:15
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_usbstat_sense (
-    .re     (usbstat_sense_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.sense.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_sense_qs)
-  );
-
-
-  //   F[av_depth]: 18:16
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_usbstat_av_depth (
-    .re     (usbstat_av_depth_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.av_depth.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_av_depth_qs)
-  );
-
-
-  //   F[av_full]: 23:23
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_usbstat_av_full (
-    .re     (usbstat_av_full_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.av_full.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_av_full_qs)
-  );
-
-
-  //   F[rx_depth]: 26:24
-  prim_subreg_ext #(
-    .DW    (3)
-  ) u_usbstat_rx_depth (
-    .re     (usbstat_rx_depth_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.rx_depth.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_rx_depth_qs)
-  );
-
-
-  //   F[rx_empty]: 31:31
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_usbstat_rx_empty (
-    .re     (usbstat_rx_empty_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.usbstat.rx_empty.d),
-    .qre    (),
-    .qe     (),
-    .q      (),
-    .qs     (usbstat_rx_empty_qs)
-  );
-
-
-  // R[avbuffer]: V(False)
-
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("WO"),
-    .RESVAL  (5'h0)
-  ) u_avbuffer (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (avbuffer_we),
-    .wd     (avbuffer_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.avbuffer.qe),
-    .q      (reg2hw.avbuffer.q ),
-
-    .qs     ()
-  );
-
-
-  // R[rxfifo]: V(True)
-
-  //   F[buffer]: 4:0
-  prim_subreg_ext #(
-    .DW    (5)
-  ) u_rxfifo_buffer (
-    .re     (rxfifo_buffer_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.rxfifo.buffer.d),
-    .qre    (reg2hw.rxfifo.buffer.re),
-    .qe     (),
-    .q      (reg2hw.rxfifo.buffer.q ),
-    .qs     (rxfifo_buffer_qs)
-  );
-
-
-  //   F[size]: 14:8
-  prim_subreg_ext #(
-    .DW    (7)
-  ) u_rxfifo_size (
-    .re     (rxfifo_size_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.rxfifo.size.d),
-    .qre    (reg2hw.rxfifo.size.re),
-    .qe     (),
-    .q      (reg2hw.rxfifo.size.q ),
-    .qs     (rxfifo_size_qs)
-  );
-
-
-  //   F[setup]: 19:19
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_rxfifo_setup (
-    .re     (rxfifo_setup_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.rxfifo.setup.d),
-    .qre    (reg2hw.rxfifo.setup.re),
-    .qe     (),
-    .q      (reg2hw.rxfifo.setup.q ),
-    .qs     (rxfifo_setup_qs)
-  );
-
-
-  //   F[ep]: 23:20
-  prim_subreg_ext #(
-    .DW    (4)
-  ) u_rxfifo_ep (
-    .re     (rxfifo_ep_re),
-    .we     (1'b0),
-    .wd     ('0),
-    .d      (hw2reg.rxfifo.ep.d),
-    .qre    (reg2hw.rxfifo.ep.re),
-    .qe     (),
-    .q      (reg2hw.rxfifo.ep.q ),
-    .qs     (rxfifo_ep_qs)
-  );
-
-
-
-  // Subregister 0 of Multireg rxenable_setup
-  // R[rxenable_setup]: V(False)
-
-  // F[setup0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup0_we),
-    .wd     (rxenable_setup_setup0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[0].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup0_qs)
-  );
-
-
-  // F[setup1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup1_we),
-    .wd     (rxenable_setup_setup1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[1].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup1_qs)
-  );
-
-
-  // F[setup2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup2_we),
-    .wd     (rxenable_setup_setup2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[2].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup2_qs)
-  );
-
-
-  // F[setup3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup3_we),
-    .wd     (rxenable_setup_setup3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[3].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup3_qs)
-  );
-
-
-  // F[setup4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup4_we),
-    .wd     (rxenable_setup_setup4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[4].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup4_qs)
-  );
-
-
-  // F[setup5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup5_we),
-    .wd     (rxenable_setup_setup5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[5].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup5_qs)
-  );
-
-
-  // F[setup6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup6_we),
-    .wd     (rxenable_setup_setup6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[6].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup6_qs)
-  );
-
-
-  // F[setup7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup7_we),
-    .wd     (rxenable_setup_setup7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[7].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup7_qs)
-  );
-
-
-  // F[setup8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup8_we),
-    .wd     (rxenable_setup_setup8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[8].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup8_qs)
-  );
-
-
-  // F[setup9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup9_we),
-    .wd     (rxenable_setup_setup9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[9].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup9_qs)
-  );
-
-
-  // F[setup10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup10_we),
-    .wd     (rxenable_setup_setup10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[10].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup10_qs)
-  );
-
-
-  // F[setup11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_setup_setup11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_setup_setup11_we),
-    .wd     (rxenable_setup_setup11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_setup[11].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_setup_setup11_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg rxenable_out
-  // R[rxenable_out]: V(False)
-
-  // F[out0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out0_we),
-    .wd     (rxenable_out_out0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[0].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out0_qs)
-  );
-
-
-  // F[out1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out1_we),
-    .wd     (rxenable_out_out1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[1].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out1_qs)
-  );
-
-
-  // F[out2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out2_we),
-    .wd     (rxenable_out_out2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[2].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out2_qs)
-  );
-
-
-  // F[out3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out3_we),
-    .wd     (rxenable_out_out3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[3].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out3_qs)
-  );
-
-
-  // F[out4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out4_we),
-    .wd     (rxenable_out_out4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[4].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out4_qs)
-  );
-
-
-  // F[out5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out5_we),
-    .wd     (rxenable_out_out5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[5].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out5_qs)
-  );
-
-
-  // F[out6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out6_we),
-    .wd     (rxenable_out_out6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[6].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out6_qs)
-  );
-
-
-  // F[out7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out7_we),
-    .wd     (rxenable_out_out7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[7].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out7_qs)
-  );
-
-
-  // F[out8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out8_we),
-    .wd     (rxenable_out_out8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[8].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out8_qs)
-  );
-
-
-  // F[out9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out9_we),
-    .wd     (rxenable_out_out9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[9].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out9_qs)
-  );
-
-
-  // F[out10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out10_we),
-    .wd     (rxenable_out_out10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[10].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out10_qs)
-  );
-
-
-  // F[out11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_rxenable_out_out11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (rxenable_out_out11_we),
-    .wd     (rxenable_out_out11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.rxenable_out[11].q ),
-
-    // to register interface (read)
-    .qs     (rxenable_out_out11_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg in_sent
-  // R[in_sent]: V(False)
-
-  // F[sent0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent0_we),
-    .wd     (in_sent_sent0_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[0].de),
-    .d      (hw2reg.in_sent[0].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent0_qs)
-  );
-
-
-  // F[sent1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent1_we),
-    .wd     (in_sent_sent1_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[1].de),
-    .d      (hw2reg.in_sent[1].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent1_qs)
-  );
-
-
-  // F[sent2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent2_we),
-    .wd     (in_sent_sent2_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[2].de),
-    .d      (hw2reg.in_sent[2].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent2_qs)
-  );
-
-
-  // F[sent3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent3_we),
-    .wd     (in_sent_sent3_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[3].de),
-    .d      (hw2reg.in_sent[3].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent3_qs)
-  );
-
-
-  // F[sent4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent4_we),
-    .wd     (in_sent_sent4_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[4].de),
-    .d      (hw2reg.in_sent[4].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent4_qs)
-  );
-
-
-  // F[sent5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent5_we),
-    .wd     (in_sent_sent5_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[5].de),
-    .d      (hw2reg.in_sent[5].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent5_qs)
-  );
-
-
-  // F[sent6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent6_we),
-    .wd     (in_sent_sent6_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[6].de),
-    .d      (hw2reg.in_sent[6].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent6_qs)
-  );
-
-
-  // F[sent7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent7_we),
-    .wd     (in_sent_sent7_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[7].de),
-    .d      (hw2reg.in_sent[7].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent7_qs)
-  );
-
-
-  // F[sent8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent8_we),
-    .wd     (in_sent_sent8_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[8].de),
-    .d      (hw2reg.in_sent[8].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent8_qs)
-  );
-
-
-  // F[sent9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent9_we),
-    .wd     (in_sent_sent9_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[9].de),
-    .d      (hw2reg.in_sent[9].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent9_qs)
-  );
-
-
-  // F[sent10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent10_we),
-    .wd     (in_sent_sent10_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[10].de),
-    .d      (hw2reg.in_sent[10].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent10_qs)
-  );
-
-
-  // F[sent11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_in_sent_sent11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (in_sent_sent11_we),
-    .wd     (in_sent_sent11_wd),
-
-    // from internal hardware
-    .de     (hw2reg.in_sent[11].de),
-    .d      (hw2reg.in_sent[11].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (in_sent_sent11_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg stall
-  // R[stall]: V(False)
-
-  // F[stall0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall0_we),
-    .wd     (stall_stall0_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[0].de),
-    .d      (hw2reg.stall[0].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[0].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall0_qs)
-  );
-
-
-  // F[stall1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall1_we),
-    .wd     (stall_stall1_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[1].de),
-    .d      (hw2reg.stall[1].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[1].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall1_qs)
-  );
-
-
-  // F[stall2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall2_we),
-    .wd     (stall_stall2_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[2].de),
-    .d      (hw2reg.stall[2].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[2].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall2_qs)
-  );
-
-
-  // F[stall3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall3_we),
-    .wd     (stall_stall3_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[3].de),
-    .d      (hw2reg.stall[3].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[3].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall3_qs)
-  );
-
-
-  // F[stall4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall4_we),
-    .wd     (stall_stall4_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[4].de),
-    .d      (hw2reg.stall[4].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[4].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall4_qs)
-  );
-
-
-  // F[stall5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall5_we),
-    .wd     (stall_stall5_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[5].de),
-    .d      (hw2reg.stall[5].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[5].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall5_qs)
-  );
-
-
-  // F[stall6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall6_we),
-    .wd     (stall_stall6_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[6].de),
-    .d      (hw2reg.stall[6].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[6].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall6_qs)
-  );
-
-
-  // F[stall7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall7_we),
-    .wd     (stall_stall7_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[7].de),
-    .d      (hw2reg.stall[7].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[7].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall7_qs)
-  );
-
-
-  // F[stall8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall8_we),
-    .wd     (stall_stall8_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[8].de),
-    .d      (hw2reg.stall[8].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[8].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall8_qs)
-  );
-
-
-  // F[stall9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall9_we),
-    .wd     (stall_stall9_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[9].de),
-    .d      (hw2reg.stall[9].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[9].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall9_qs)
-  );
-
-
-  // F[stall10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall10_we),
-    .wd     (stall_stall10_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[10].de),
-    .d      (hw2reg.stall[10].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[10].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall10_qs)
-  );
-
-
-  // F[stall11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_stall_stall11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (stall_stall11_we),
-    .wd     (stall_stall11_wd),
-
-    // from internal hardware
-    .de     (hw2reg.stall[11].de),
-    .d      (hw2reg.stall[11].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.stall[11].q ),
-
-    // to register interface (read)
-    .qs     (stall_stall11_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg configin
-  // R[configin0]: V(False)
-
-  // F[buffer0]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin0_buffer0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin0_buffer0_we),
-    .wd     (configin0_buffer0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[0].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin0_buffer0_qs)
-  );
-
-
-  // F[size0]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin0_size0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin0_size0_we),
-    .wd     (configin0_size0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[0].size.q ),
-
-    // to register interface (read)
-    .qs     (configin0_size0_qs)
-  );
-
-
-  // F[pend0]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin0_pend0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin0_pend0_we),
-    .wd     (configin0_pend0_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[0].pend.de),
-    .d      (hw2reg.configin[0].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[0].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin0_pend0_qs)
-  );
-
-
-  // F[rdy0]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin0_rdy0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin0_rdy0_we),
-    .wd     (configin0_rdy0_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[0].rdy.de),
-    .d      (hw2reg.configin[0].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[0].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin0_rdy0_qs)
-  );
-
-
-  // Subregister 1 of Multireg configin
-  // R[configin1]: V(False)
-
-  // F[buffer1]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin1_buffer1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin1_buffer1_we),
-    .wd     (configin1_buffer1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[1].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin1_buffer1_qs)
-  );
-
-
-  // F[size1]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin1_size1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin1_size1_we),
-    .wd     (configin1_size1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[1].size.q ),
-
-    // to register interface (read)
-    .qs     (configin1_size1_qs)
-  );
-
-
-  // F[pend1]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin1_pend1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin1_pend1_we),
-    .wd     (configin1_pend1_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[1].pend.de),
-    .d      (hw2reg.configin[1].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[1].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin1_pend1_qs)
-  );
-
-
-  // F[rdy1]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin1_rdy1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin1_rdy1_we),
-    .wd     (configin1_rdy1_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[1].rdy.de),
-    .d      (hw2reg.configin[1].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[1].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin1_rdy1_qs)
-  );
-
-
-  // Subregister 2 of Multireg configin
-  // R[configin2]: V(False)
-
-  // F[buffer2]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin2_buffer2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin2_buffer2_we),
-    .wd     (configin2_buffer2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[2].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin2_buffer2_qs)
-  );
-
-
-  // F[size2]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin2_size2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin2_size2_we),
-    .wd     (configin2_size2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[2].size.q ),
-
-    // to register interface (read)
-    .qs     (configin2_size2_qs)
-  );
-
-
-  // F[pend2]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin2_pend2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin2_pend2_we),
-    .wd     (configin2_pend2_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[2].pend.de),
-    .d      (hw2reg.configin[2].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[2].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin2_pend2_qs)
-  );
-
-
-  // F[rdy2]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin2_rdy2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin2_rdy2_we),
-    .wd     (configin2_rdy2_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[2].rdy.de),
-    .d      (hw2reg.configin[2].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[2].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin2_rdy2_qs)
-  );
-
-
-  // Subregister 3 of Multireg configin
-  // R[configin3]: V(False)
-
-  // F[buffer3]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin3_buffer3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin3_buffer3_we),
-    .wd     (configin3_buffer3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[3].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin3_buffer3_qs)
-  );
-
-
-  // F[size3]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin3_size3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin3_size3_we),
-    .wd     (configin3_size3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[3].size.q ),
-
-    // to register interface (read)
-    .qs     (configin3_size3_qs)
-  );
-
-
-  // F[pend3]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin3_pend3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin3_pend3_we),
-    .wd     (configin3_pend3_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[3].pend.de),
-    .d      (hw2reg.configin[3].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[3].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin3_pend3_qs)
-  );
-
-
-  // F[rdy3]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin3_rdy3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin3_rdy3_we),
-    .wd     (configin3_rdy3_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[3].rdy.de),
-    .d      (hw2reg.configin[3].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[3].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin3_rdy3_qs)
-  );
-
-
-  // Subregister 4 of Multireg configin
-  // R[configin4]: V(False)
-
-  // F[buffer4]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin4_buffer4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin4_buffer4_we),
-    .wd     (configin4_buffer4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[4].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin4_buffer4_qs)
-  );
-
-
-  // F[size4]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin4_size4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin4_size4_we),
-    .wd     (configin4_size4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[4].size.q ),
-
-    // to register interface (read)
-    .qs     (configin4_size4_qs)
-  );
-
-
-  // F[pend4]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin4_pend4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin4_pend4_we),
-    .wd     (configin4_pend4_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[4].pend.de),
-    .d      (hw2reg.configin[4].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[4].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin4_pend4_qs)
-  );
-
-
-  // F[rdy4]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin4_rdy4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin4_rdy4_we),
-    .wd     (configin4_rdy4_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[4].rdy.de),
-    .d      (hw2reg.configin[4].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[4].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin4_rdy4_qs)
-  );
-
-
-  // Subregister 5 of Multireg configin
-  // R[configin5]: V(False)
-
-  // F[buffer5]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin5_buffer5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin5_buffer5_we),
-    .wd     (configin5_buffer5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[5].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin5_buffer5_qs)
-  );
-
-
-  // F[size5]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin5_size5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin5_size5_we),
-    .wd     (configin5_size5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[5].size.q ),
-
-    // to register interface (read)
-    .qs     (configin5_size5_qs)
-  );
-
-
-  // F[pend5]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin5_pend5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin5_pend5_we),
-    .wd     (configin5_pend5_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[5].pend.de),
-    .d      (hw2reg.configin[5].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[5].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin5_pend5_qs)
-  );
-
-
-  // F[rdy5]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin5_rdy5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin5_rdy5_we),
-    .wd     (configin5_rdy5_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[5].rdy.de),
-    .d      (hw2reg.configin[5].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[5].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin5_rdy5_qs)
-  );
-
-
-  // Subregister 6 of Multireg configin
-  // R[configin6]: V(False)
-
-  // F[buffer6]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin6_buffer6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin6_buffer6_we),
-    .wd     (configin6_buffer6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[6].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin6_buffer6_qs)
-  );
-
-
-  // F[size6]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin6_size6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin6_size6_we),
-    .wd     (configin6_size6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[6].size.q ),
-
-    // to register interface (read)
-    .qs     (configin6_size6_qs)
-  );
-
-
-  // F[pend6]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin6_pend6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin6_pend6_we),
-    .wd     (configin6_pend6_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[6].pend.de),
-    .d      (hw2reg.configin[6].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[6].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin6_pend6_qs)
-  );
-
-
-  // F[rdy6]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin6_rdy6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin6_rdy6_we),
-    .wd     (configin6_rdy6_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[6].rdy.de),
-    .d      (hw2reg.configin[6].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[6].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin6_rdy6_qs)
-  );
-
-
-  // Subregister 7 of Multireg configin
-  // R[configin7]: V(False)
-
-  // F[buffer7]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin7_buffer7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin7_buffer7_we),
-    .wd     (configin7_buffer7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[7].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin7_buffer7_qs)
-  );
-
-
-  // F[size7]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin7_size7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin7_size7_we),
-    .wd     (configin7_size7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[7].size.q ),
-
-    // to register interface (read)
-    .qs     (configin7_size7_qs)
-  );
-
-
-  // F[pend7]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin7_pend7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin7_pend7_we),
-    .wd     (configin7_pend7_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[7].pend.de),
-    .d      (hw2reg.configin[7].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[7].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin7_pend7_qs)
-  );
-
-
-  // F[rdy7]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin7_rdy7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin7_rdy7_we),
-    .wd     (configin7_rdy7_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[7].rdy.de),
-    .d      (hw2reg.configin[7].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[7].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin7_rdy7_qs)
-  );
-
-
-  // Subregister 8 of Multireg configin
-  // R[configin8]: V(False)
-
-  // F[buffer8]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin8_buffer8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin8_buffer8_we),
-    .wd     (configin8_buffer8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[8].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin8_buffer8_qs)
-  );
-
-
-  // F[size8]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin8_size8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin8_size8_we),
-    .wd     (configin8_size8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[8].size.q ),
-
-    // to register interface (read)
-    .qs     (configin8_size8_qs)
-  );
-
-
-  // F[pend8]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin8_pend8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin8_pend8_we),
-    .wd     (configin8_pend8_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[8].pend.de),
-    .d      (hw2reg.configin[8].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[8].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin8_pend8_qs)
-  );
-
-
-  // F[rdy8]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin8_rdy8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin8_rdy8_we),
-    .wd     (configin8_rdy8_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[8].rdy.de),
-    .d      (hw2reg.configin[8].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[8].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin8_rdy8_qs)
-  );
-
-
-  // Subregister 9 of Multireg configin
-  // R[configin9]: V(False)
-
-  // F[buffer9]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin9_buffer9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin9_buffer9_we),
-    .wd     (configin9_buffer9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[9].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin9_buffer9_qs)
-  );
-
-
-  // F[size9]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin9_size9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin9_size9_we),
-    .wd     (configin9_size9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[9].size.q ),
-
-    // to register interface (read)
-    .qs     (configin9_size9_qs)
-  );
-
-
-  // F[pend9]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin9_pend9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin9_pend9_we),
-    .wd     (configin9_pend9_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[9].pend.de),
-    .d      (hw2reg.configin[9].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[9].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin9_pend9_qs)
-  );
-
-
-  // F[rdy9]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin9_rdy9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin9_rdy9_we),
-    .wd     (configin9_rdy9_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[9].rdy.de),
-    .d      (hw2reg.configin[9].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[9].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin9_rdy9_qs)
-  );
-
-
-  // Subregister 10 of Multireg configin
-  // R[configin10]: V(False)
-
-  // F[buffer10]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin10_buffer10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin10_buffer10_we),
-    .wd     (configin10_buffer10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[10].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin10_buffer10_qs)
-  );
-
-
-  // F[size10]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin10_size10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin10_size10_we),
-    .wd     (configin10_size10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[10].size.q ),
-
-    // to register interface (read)
-    .qs     (configin10_size10_qs)
-  );
-
-
-  // F[pend10]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin10_pend10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin10_pend10_we),
-    .wd     (configin10_pend10_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[10].pend.de),
-    .d      (hw2reg.configin[10].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[10].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin10_pend10_qs)
-  );
-
-
-  // F[rdy10]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin10_rdy10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin10_rdy10_we),
-    .wd     (configin10_rdy10_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[10].rdy.de),
-    .d      (hw2reg.configin[10].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[10].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin10_rdy10_qs)
-  );
-
-
-  // Subregister 11 of Multireg configin
-  // R[configin11]: V(False)
-
-  // F[buffer11]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_configin11_buffer11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin11_buffer11_we),
-    .wd     (configin11_buffer11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[11].buffer.q ),
-
-    // to register interface (read)
-    .qs     (configin11_buffer11_qs)
-  );
-
-
-  // F[size11]: 14:8
-  prim_subreg #(
-    .DW      (7),
-    .SWACCESS("RW"),
-    .RESVAL  (7'h0)
-  ) u_configin11_size11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin11_size11_we),
-    .wd     (configin11_size11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[11].size.q ),
-
-    // to register interface (read)
-    .qs     (configin11_size11_qs)
-  );
-
-
-  // F[pend11]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("W1C"),
-    .RESVAL  (1'h0)
-  ) u_configin11_pend11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin11_pend11_we),
-    .wd     (configin11_pend11_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[11].pend.de),
-    .d      (hw2reg.configin[11].pend.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[11].pend.q ),
-
-    // to register interface (read)
-    .qs     (configin11_pend11_qs)
-  );
-
-
-  // F[rdy11]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_configin11_rdy11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (configin11_rdy11_we),
-    .wd     (configin11_rdy11_wd),
-
-    // from internal hardware
-    .de     (hw2reg.configin[11].rdy.de),
-    .d      (hw2reg.configin[11].rdy.d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.configin[11].rdy.q ),
-
-    // to register interface (read)
-    .qs     (configin11_rdy11_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg iso
-  // R[iso]: V(False)
-
-  // F[iso0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso0_we),
-    .wd     (iso_iso0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[0].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso0_qs)
-  );
-
-
-  // F[iso1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso1_we),
-    .wd     (iso_iso1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[1].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso1_qs)
-  );
-
-
-  // F[iso2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso2_we),
-    .wd     (iso_iso2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[2].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso2_qs)
-  );
-
-
-  // F[iso3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso3_we),
-    .wd     (iso_iso3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[3].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso3_qs)
-  );
-
-
-  // F[iso4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso4_we),
-    .wd     (iso_iso4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[4].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso4_qs)
-  );
-
-
-  // F[iso5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso5_we),
-    .wd     (iso_iso5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[5].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso5_qs)
-  );
-
-
-  // F[iso6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso6_we),
-    .wd     (iso_iso6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[6].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso6_qs)
-  );
-
-
-  // F[iso7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso7_we),
-    .wd     (iso_iso7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[7].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso7_qs)
-  );
-
-
-  // F[iso8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso8_we),
-    .wd     (iso_iso8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[8].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso8_qs)
-  );
-
-
-  // F[iso9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso9_we),
-    .wd     (iso_iso9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[9].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso9_qs)
-  );
-
-
-  // F[iso10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso10_we),
-    .wd     (iso_iso10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[10].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso10_qs)
-  );
-
-
-  // F[iso11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_iso_iso11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (iso_iso11_we),
-    .wd     (iso_iso11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.iso[11].q ),
-
-    // to register interface (read)
-    .qs     (iso_iso11_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg data_toggle_clear
-  // R[data_toggle_clear]: V(False)
-
-  // F[clear0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear0_we),
-    .wd     (data_toggle_clear_clear0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[0].qe),
-    .q      (reg2hw.data_toggle_clear[0].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear1_we),
-    .wd     (data_toggle_clear_clear1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[1].qe),
-    .q      (reg2hw.data_toggle_clear[1].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear2_we),
-    .wd     (data_toggle_clear_clear2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[2].qe),
-    .q      (reg2hw.data_toggle_clear[2].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear3_we),
-    .wd     (data_toggle_clear_clear3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[3].qe),
-    .q      (reg2hw.data_toggle_clear[3].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear4_we),
-    .wd     (data_toggle_clear_clear4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[4].qe),
-    .q      (reg2hw.data_toggle_clear[4].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear5_we),
-    .wd     (data_toggle_clear_clear5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[5].qe),
-    .q      (reg2hw.data_toggle_clear[5].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear6_we),
-    .wd     (data_toggle_clear_clear6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[6].qe),
-    .q      (reg2hw.data_toggle_clear[6].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear7_we),
-    .wd     (data_toggle_clear_clear7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[7].qe),
-    .q      (reg2hw.data_toggle_clear[7].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear8_we),
-    .wd     (data_toggle_clear_clear8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[8].qe),
-    .q      (reg2hw.data_toggle_clear[8].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear9_we),
-    .wd     (data_toggle_clear_clear9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[9].qe),
-    .q      (reg2hw.data_toggle_clear[9].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear10_we),
-    .wd     (data_toggle_clear_clear10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[10].qe),
-    .q      (reg2hw.data_toggle_clear[10].q ),
-
-    .qs     ()
-  );
-
-
-  // F[clear11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("WO"),
-    .RESVAL  (1'h0)
-  ) u_data_toggle_clear_clear11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (data_toggle_clear_clear11_we),
-    .wd     (data_toggle_clear_clear11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (reg2hw.data_toggle_clear[11].qe),
-    .q      (reg2hw.data_toggle_clear[11].q ),
-
-    .qs     ()
-  );
-
-
-
-  // R[phy_config]: V(False)
-
-  //   F[rx_differential_mode]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_phy_config_rx_differential_mode (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_rx_differential_mode_we),
-    .wd     (phy_config_rx_differential_mode_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.rx_differential_mode.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_rx_differential_mode_qs)
-  );
-
-
-  //   F[tx_differential_mode]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_phy_config_tx_differential_mode (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_tx_differential_mode_we),
-    .wd     (phy_config_tx_differential_mode_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.tx_differential_mode.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_tx_differential_mode_qs)
-  );
-
-
-  //   F[eop_single_bit]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h1)
-  ) u_phy_config_eop_single_bit (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_eop_single_bit_we),
-    .wd     (phy_config_eop_single_bit_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.eop_single_bit.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_eop_single_bit_qs)
-  );
-
-
-  //   F[override_pwr_sense_en]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_phy_config_override_pwr_sense_en (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_override_pwr_sense_en_we),
-    .wd     (phy_config_override_pwr_sense_en_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.override_pwr_sense_en.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_override_pwr_sense_en_qs)
-  );
-
-
-  //   F[override_pwr_sense_val]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_phy_config_override_pwr_sense_val (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_override_pwr_sense_val_we),
-    .wd     (phy_config_override_pwr_sense_val_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.override_pwr_sense_val.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_override_pwr_sense_val_qs)
-  );
-
-
-  //   F[pinflip]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_phy_config_pinflip (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_pinflip_we),
-    .wd     (phy_config_pinflip_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.pinflip.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_pinflip_qs)
-  );
-
-
-  //   F[usb_ref_disable]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_phy_config_usb_ref_disable (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (phy_config_usb_ref_disable_we),
-    .wd     (phy_config_usb_ref_disable_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.phy_config.usb_ref_disable.q ),
-
-    // to register interface (read)
-    .qs     (phy_config_usb_ref_disable_qs)
-  );
-
-
-
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_pkt_received(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_pkt_received_we),
+	.wd(intr_state_pkt_received_wd),
+	.de(hw2reg[175]),
+	.d(hw2reg[176]),
+	.qe(),
+	.q(reg2hw[345]),
+	.qs(intr_state_pkt_received_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_pkt_sent(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_pkt_sent_we),
+	.wd(intr_state_pkt_sent_wd),
+	.de(hw2reg[173]),
+	.d(hw2reg[174]),
+	.qe(),
+	.q(reg2hw[344]),
+	.qs(intr_state_pkt_sent_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_disconnected(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_disconnected_we),
+	.wd(intr_state_disconnected_wd),
+	.de(hw2reg[171]),
+	.d(hw2reg[172]),
+	.qe(),
+	.q(reg2hw[343]),
+	.qs(intr_state_disconnected_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_host_lost(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_host_lost_we),
+	.wd(intr_state_host_lost_wd),
+	.de(hw2reg[169]),
+	.d(hw2reg[170]),
+	.qe(),
+	.q(reg2hw[342]),
+	.qs(intr_state_host_lost_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_link_reset(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_link_reset_we),
+	.wd(intr_state_link_reset_wd),
+	.de(hw2reg[167]),
+	.d(hw2reg[168]),
+	.qe(),
+	.q(reg2hw[341]),
+	.qs(intr_state_link_reset_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_link_suspend(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_link_suspend_we),
+	.wd(intr_state_link_suspend_wd),
+	.de(hw2reg[165]),
+	.d(hw2reg[166]),
+	.qe(),
+	.q(reg2hw[340]),
+	.qs(intr_state_link_suspend_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_link_resume(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_link_resume_we),
+	.wd(intr_state_link_resume_wd),
+	.de(hw2reg[163]),
+	.d(hw2reg[164]),
+	.qe(),
+	.q(reg2hw[339]),
+	.qs(intr_state_link_resume_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_av_empty(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_av_empty_we),
+	.wd(intr_state_av_empty_wd),
+	.de(hw2reg[161]),
+	.d(hw2reg[162]),
+	.qe(),
+	.q(reg2hw[338]),
+	.qs(intr_state_av_empty_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_rx_full(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_rx_full_we),
+	.wd(intr_state_rx_full_wd),
+	.de(hw2reg[159]),
+	.d(hw2reg[160]),
+	.qe(),
+	.q(reg2hw[337]),
+	.qs(intr_state_rx_full_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_av_overflow(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_av_overflow_we),
+	.wd(intr_state_av_overflow_wd),
+	.de(hw2reg[157]),
+	.d(hw2reg[158]),
+	.qe(),
+	.q(reg2hw[336]),
+	.qs(intr_state_av_overflow_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_link_in_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_link_in_err_we),
+	.wd(intr_state_link_in_err_wd),
+	.de(hw2reg[155]),
+	.d(hw2reg[156]),
+	.qe(),
+	.q(reg2hw[335]),
+	.qs(intr_state_link_in_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_rx_crc_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_rx_crc_err_we),
+	.wd(intr_state_rx_crc_err_wd),
+	.de(hw2reg[153]),
+	.d(hw2reg[154]),
+	.qe(),
+	.q(reg2hw[334]),
+	.qs(intr_state_rx_crc_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_rx_pid_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_rx_pid_err_we),
+	.wd(intr_state_rx_pid_err_wd),
+	.de(hw2reg[151]),
+	.d(hw2reg[152]),
+	.qe(),
+	.q(reg2hw[333]),
+	.qs(intr_state_rx_pid_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_rx_bitstuff_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_rx_bitstuff_err_we),
+	.wd(intr_state_rx_bitstuff_err_wd),
+	.de(hw2reg[149]),
+	.d(hw2reg[150]),
+	.qe(),
+	.q(reg2hw[332]),
+	.qs(intr_state_rx_bitstuff_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_frame(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_frame_we),
+	.wd(intr_state_frame_wd),
+	.de(hw2reg[147]),
+	.d(hw2reg[148]),
+	.qe(),
+	.q(reg2hw[331]),
+	.qs(intr_state_frame_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_intr_state_connected(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_state_connected_we),
+	.wd(intr_state_connected_wd),
+	.de(hw2reg[145]),
+	.d(hw2reg[146]),
+	.qe(),
+	.q(reg2hw[330]),
+	.qs(intr_state_connected_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_pkt_received(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_pkt_received_we),
+	.wd(intr_enable_pkt_received_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[329]),
+	.qs(intr_enable_pkt_received_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_pkt_sent(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_pkt_sent_we),
+	.wd(intr_enable_pkt_sent_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[328]),
+	.qs(intr_enable_pkt_sent_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_disconnected(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_disconnected_we),
+	.wd(intr_enable_disconnected_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[327]),
+	.qs(intr_enable_disconnected_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_host_lost(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_host_lost_we),
+	.wd(intr_enable_host_lost_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[326]),
+	.qs(intr_enable_host_lost_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_link_reset(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_link_reset_we),
+	.wd(intr_enable_link_reset_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[325]),
+	.qs(intr_enable_link_reset_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_link_suspend(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_link_suspend_we),
+	.wd(intr_enable_link_suspend_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[324]),
+	.qs(intr_enable_link_suspend_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_link_resume(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_link_resume_we),
+	.wd(intr_enable_link_resume_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[323]),
+	.qs(intr_enable_link_resume_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_av_empty(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_av_empty_we),
+	.wd(intr_enable_av_empty_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[322]),
+	.qs(intr_enable_av_empty_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_rx_full(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_rx_full_we),
+	.wd(intr_enable_rx_full_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[321]),
+	.qs(intr_enable_rx_full_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_av_overflow(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_av_overflow_we),
+	.wd(intr_enable_av_overflow_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[320]),
+	.qs(intr_enable_av_overflow_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_link_in_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_link_in_err_we),
+	.wd(intr_enable_link_in_err_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[319]),
+	.qs(intr_enable_link_in_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_rx_crc_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_rx_crc_err_we),
+	.wd(intr_enable_rx_crc_err_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[318]),
+	.qs(intr_enable_rx_crc_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_rx_pid_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_rx_pid_err_we),
+	.wd(intr_enable_rx_pid_err_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[317]),
+	.qs(intr_enable_rx_pid_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_rx_bitstuff_err(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_rx_bitstuff_err_we),
+	.wd(intr_enable_rx_bitstuff_err_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[316]),
+	.qs(intr_enable_rx_bitstuff_err_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_frame(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_frame_we),
+	.wd(intr_enable_frame_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[315]),
+	.qs(intr_enable_frame_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_intr_enable_connected(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(intr_enable_connected_we),
+	.wd(intr_enable_connected_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[314]),
+	.qs(intr_enable_connected_qs)
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_pkt_received(
+	.re(1'b0),
+	.we(intr_test_pkt_received_we),
+	.wd(intr_test_pkt_received_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[312]),
+	.q(reg2hw[313]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_pkt_sent(
+	.re(1'b0),
+	.we(intr_test_pkt_sent_we),
+	.wd(intr_test_pkt_sent_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[310]),
+	.q(reg2hw[311]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_disconnected(
+	.re(1'b0),
+	.we(intr_test_disconnected_we),
+	.wd(intr_test_disconnected_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[308]),
+	.q(reg2hw[309]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_host_lost(
+	.re(1'b0),
+	.we(intr_test_host_lost_we),
+	.wd(intr_test_host_lost_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[306]),
+	.q(reg2hw[307]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_link_reset(
+	.re(1'b0),
+	.we(intr_test_link_reset_we),
+	.wd(intr_test_link_reset_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[304]),
+	.q(reg2hw[305]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_link_suspend(
+	.re(1'b0),
+	.we(intr_test_link_suspend_we),
+	.wd(intr_test_link_suspend_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[302]),
+	.q(reg2hw[303]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_link_resume(
+	.re(1'b0),
+	.we(intr_test_link_resume_we),
+	.wd(intr_test_link_resume_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[300]),
+	.q(reg2hw[301]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_av_empty(
+	.re(1'b0),
+	.we(intr_test_av_empty_we),
+	.wd(intr_test_av_empty_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[298]),
+	.q(reg2hw[299]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_rx_full(
+	.re(1'b0),
+	.we(intr_test_rx_full_we),
+	.wd(intr_test_rx_full_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[296]),
+	.q(reg2hw[297]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_av_overflow(
+	.re(1'b0),
+	.we(intr_test_av_overflow_we),
+	.wd(intr_test_av_overflow_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[294]),
+	.q(reg2hw[295]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_link_in_err(
+	.re(1'b0),
+	.we(intr_test_link_in_err_we),
+	.wd(intr_test_link_in_err_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[292]),
+	.q(reg2hw[293]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_rx_crc_err(
+	.re(1'b0),
+	.we(intr_test_rx_crc_err_we),
+	.wd(intr_test_rx_crc_err_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[290]),
+	.q(reg2hw[291]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_rx_pid_err(
+	.re(1'b0),
+	.we(intr_test_rx_pid_err_we),
+	.wd(intr_test_rx_pid_err_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[288]),
+	.q(reg2hw[289]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_rx_bitstuff_err(
+	.re(1'b0),
+	.we(intr_test_rx_bitstuff_err_we),
+	.wd(intr_test_rx_bitstuff_err_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[286]),
+	.q(reg2hw[287]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_frame(
+	.re(1'b0),
+	.we(intr_test_frame_we),
+	.wd(intr_test_frame_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[284]),
+	.q(reg2hw[285]),
+	.qs()
+);
+prim_subreg_ext #(.DW(1)) u_intr_test_connected(
+	.re(1'b0),
+	.we(intr_test_connected_we),
+	.wd(intr_test_connected_wd),
+	.d(1'b0),
+	.qre(),
+	.qe(reg2hw[282]),
+	.q(reg2hw[283]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_usbctrl_enable(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(usbctrl_enable_we),
+	.wd(usbctrl_enable_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[281]),
+	.qs(usbctrl_enable_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_usbctrl_device_address(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(usbctrl_device_address_we),
+	.wd(usbctrl_device_address_wd),
+	.de(hw2reg[137]),
+	.d(hw2reg[144-:7]),
+	.qe(),
+	.q(reg2hw[280-:7]),
+	.qs(usbctrl_device_address_qs)
+);
+prim_subreg_ext #(.DW(11)) u_usbstat_frame(
+	.re(usbstat_frame_re),
+	.we(1'b0),
+	.wd({11 {1'b0}}),
+	.d(hw2reg[136-:11]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_frame_qs)
+);
+prim_subreg_ext #(.DW(1)) u_usbstat_host_lost(
+	.re(usbstat_host_lost_re),
+	.we(1'b0),
+	.wd(1'b0),
+	.d(hw2reg[125]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_host_lost_qs)
+);
+prim_subreg_ext #(.DW(3)) u_usbstat_link_state(
+	.re(usbstat_link_state_re),
+	.we(1'b0),
+	.wd({3 {1'b0}}),
+	.d(hw2reg[124-:3]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_link_state_qs)
+);
+prim_subreg_ext #(.DW(1)) u_usbstat_sense(
+	.re(usbstat_sense_re),
+	.we(1'b0),
+	.wd(1'b0),
+	.d(hw2reg[121]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_sense_qs)
+);
+prim_subreg_ext #(.DW(3)) u_usbstat_av_depth(
+	.re(usbstat_av_depth_re),
+	.we(1'b0),
+	.wd({3 {1'b0}}),
+	.d(hw2reg[120-:3]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_av_depth_qs)
+);
+prim_subreg_ext #(.DW(1)) u_usbstat_av_full(
+	.re(usbstat_av_full_re),
+	.we(1'b0),
+	.wd(1'b0),
+	.d(hw2reg[117]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_av_full_qs)
+);
+prim_subreg_ext #(.DW(3)) u_usbstat_rx_depth(
+	.re(usbstat_rx_depth_re),
+	.we(1'b0),
+	.wd({3 {1'b0}}),
+	.d(hw2reg[116-:3]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_rx_depth_qs)
+);
+prim_subreg_ext #(.DW(1)) u_usbstat_rx_empty(
+	.re(usbstat_rx_empty_re),
+	.we(1'b0),
+	.wd(1'b0),
+	.d(hw2reg[113]),
+	.qre(),
+	.qe(),
+	.q(),
+	.qs(usbstat_rx_empty_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("WO"),
+	.RESVAL(5'h00)
+) u_avbuffer(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(avbuffer_we),
+	.wd(avbuffer_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(reg2hw[268]),
+	.q(reg2hw[273-:5]),
+	.qs()
+);
+prim_subreg_ext #(.DW(5)) u_rxfifo_buffer(
+	.re(rxfifo_buffer_re),
+	.we(1'b0),
+	.wd({5 {1'b0}}),
+	.d(hw2reg[112-:5]),
+	.qre(reg2hw[262]),
+	.qe(),
+	.q(reg2hw[267-:5]),
+	.qs(rxfifo_buffer_qs)
+);
+prim_subreg_ext #(.DW(7)) u_rxfifo_size(
+	.re(rxfifo_size_re),
+	.we(1'b0),
+	.wd({7 {1'b0}}),
+	.d(hw2reg[107-:7]),
+	.qre(reg2hw[254]),
+	.qe(),
+	.q(reg2hw[261-:7]),
+	.qs(rxfifo_size_qs)
+);
+prim_subreg_ext #(.DW(1)) u_rxfifo_setup(
+	.re(rxfifo_setup_re),
+	.we(1'b0),
+	.wd(1'b0),
+	.d(hw2reg[100]),
+	.qre(reg2hw[252]),
+	.qe(),
+	.q(reg2hw[253]),
+	.qs(rxfifo_setup_qs)
+);
+prim_subreg_ext #(.DW(4)) u_rxfifo_ep(
+	.re(rxfifo_ep_re),
+	.we(1'b0),
+	.wd({4 {1'b0}}),
+	.d(hw2reg[99-:4]),
+	.qre(reg2hw[247]),
+	.qe(),
+	.q(reg2hw[251-:4]),
+	.qs(rxfifo_ep_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup0_we),
+	.wd(rxenable_setup_setup0_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[235]),
+	.qs(rxenable_setup_setup0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup1_we),
+	.wd(rxenable_setup_setup1_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[236]),
+	.qs(rxenable_setup_setup1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup2_we),
+	.wd(rxenable_setup_setup2_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[237]),
+	.qs(rxenable_setup_setup2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup3_we),
+	.wd(rxenable_setup_setup3_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[238]),
+	.qs(rxenable_setup_setup3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup4_we),
+	.wd(rxenable_setup_setup4_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[239]),
+	.qs(rxenable_setup_setup4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup5_we),
+	.wd(rxenable_setup_setup5_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[240]),
+	.qs(rxenable_setup_setup5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup6_we),
+	.wd(rxenable_setup_setup6_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[241]),
+	.qs(rxenable_setup_setup6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup7_we),
+	.wd(rxenable_setup_setup7_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[242]),
+	.qs(rxenable_setup_setup7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup8_we),
+	.wd(rxenable_setup_setup8_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[243]),
+	.qs(rxenable_setup_setup8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup9_we),
+	.wd(rxenable_setup_setup9_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[244]),
+	.qs(rxenable_setup_setup9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup10_we),
+	.wd(rxenable_setup_setup10_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[245]),
+	.qs(rxenable_setup_setup10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_setup_setup11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_setup_setup11_we),
+	.wd(rxenable_setup_setup11_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[246]),
+	.qs(rxenable_setup_setup11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out0_we),
+	.wd(rxenable_out_out0_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[223]),
+	.qs(rxenable_out_out0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out1_we),
+	.wd(rxenable_out_out1_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[224]),
+	.qs(rxenable_out_out1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out2_we),
+	.wd(rxenable_out_out2_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[225]),
+	.qs(rxenable_out_out2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out3_we),
+	.wd(rxenable_out_out3_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[226]),
+	.qs(rxenable_out_out3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out4_we),
+	.wd(rxenable_out_out4_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[227]),
+	.qs(rxenable_out_out4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out5_we),
+	.wd(rxenable_out_out5_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[228]),
+	.qs(rxenable_out_out5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out6_we),
+	.wd(rxenable_out_out6_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[229]),
+	.qs(rxenable_out_out6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out7_we),
+	.wd(rxenable_out_out7_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[230]),
+	.qs(rxenable_out_out7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out8_we),
+	.wd(rxenable_out_out8_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[231]),
+	.qs(rxenable_out_out8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out9_we),
+	.wd(rxenable_out_out9_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[232]),
+	.qs(rxenable_out_out9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out10_we),
+	.wd(rxenable_out_out10_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[233]),
+	.qs(rxenable_out_out10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_rxenable_out_out11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(rxenable_out_out11_we),
+	.wd(rxenable_out_out11_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[234]),
+	.qs(rxenable_out_out11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent0_we),
+	.wd(in_sent_sent0_wd),
+	.de(hw2reg[72]),
+	.d(hw2reg[73]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent1_we),
+	.wd(in_sent_sent1_wd),
+	.de(hw2reg[74]),
+	.d(hw2reg[75]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent2_we),
+	.wd(in_sent_sent2_wd),
+	.de(hw2reg[76]),
+	.d(hw2reg[77]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent3_we),
+	.wd(in_sent_sent3_wd),
+	.de(hw2reg[78]),
+	.d(hw2reg[79]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent4_we),
+	.wd(in_sent_sent4_wd),
+	.de(hw2reg[80]),
+	.d(hw2reg[81]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent5_we),
+	.wd(in_sent_sent5_wd),
+	.de(hw2reg[82]),
+	.d(hw2reg[83]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent6_we),
+	.wd(in_sent_sent6_wd),
+	.de(hw2reg[84]),
+	.d(hw2reg[85]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent7_we),
+	.wd(in_sent_sent7_wd),
+	.de(hw2reg[86]),
+	.d(hw2reg[87]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent8_we),
+	.wd(in_sent_sent8_wd),
+	.de(hw2reg[88]),
+	.d(hw2reg[89]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent9_we),
+	.wd(in_sent_sent9_wd),
+	.de(hw2reg[90]),
+	.d(hw2reg[91]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent10_we),
+	.wd(in_sent_sent10_wd),
+	.de(hw2reg[92]),
+	.d(hw2reg[93]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_in_sent_sent11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(in_sent_sent11_we),
+	.wd(in_sent_sent11_wd),
+	.de(hw2reg[94]),
+	.d(hw2reg[95]),
+	.qe(),
+	.q(),
+	.qs(in_sent_sent11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall0_we),
+	.wd(stall_stall0_wd),
+	.de(hw2reg[48]),
+	.d(hw2reg[49]),
+	.qe(),
+	.q(reg2hw[211]),
+	.qs(stall_stall0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall1_we),
+	.wd(stall_stall1_wd),
+	.de(hw2reg[50]),
+	.d(hw2reg[51]),
+	.qe(),
+	.q(reg2hw[212]),
+	.qs(stall_stall1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall2_we),
+	.wd(stall_stall2_wd),
+	.de(hw2reg[52]),
+	.d(hw2reg[53]),
+	.qe(),
+	.q(reg2hw[213]),
+	.qs(stall_stall2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall3_we),
+	.wd(stall_stall3_wd),
+	.de(hw2reg[54]),
+	.d(hw2reg[55]),
+	.qe(),
+	.q(reg2hw[214]),
+	.qs(stall_stall3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall4_we),
+	.wd(stall_stall4_wd),
+	.de(hw2reg[56]),
+	.d(hw2reg[57]),
+	.qe(),
+	.q(reg2hw[215]),
+	.qs(stall_stall4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall5_we),
+	.wd(stall_stall5_wd),
+	.de(hw2reg[58]),
+	.d(hw2reg[59]),
+	.qe(),
+	.q(reg2hw[216]),
+	.qs(stall_stall5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall6_we),
+	.wd(stall_stall6_wd),
+	.de(hw2reg[60]),
+	.d(hw2reg[61]),
+	.qe(),
+	.q(reg2hw[217]),
+	.qs(stall_stall6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall7_we),
+	.wd(stall_stall7_wd),
+	.de(hw2reg[62]),
+	.d(hw2reg[63]),
+	.qe(),
+	.q(reg2hw[218]),
+	.qs(stall_stall7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall8_we),
+	.wd(stall_stall8_wd),
+	.de(hw2reg[64]),
+	.d(hw2reg[65]),
+	.qe(),
+	.q(reg2hw[219]),
+	.qs(stall_stall8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall9_we),
+	.wd(stall_stall9_wd),
+	.de(hw2reg[66]),
+	.d(hw2reg[67]),
+	.qe(),
+	.q(reg2hw[220]),
+	.qs(stall_stall9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall10_we),
+	.wd(stall_stall10_wd),
+	.de(hw2reg[68]),
+	.d(hw2reg[69]),
+	.qe(),
+	.q(reg2hw[221]),
+	.qs(stall_stall10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_stall_stall11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(stall_stall11_we),
+	.wd(stall_stall11_wd),
+	.de(hw2reg[70]),
+	.d(hw2reg[71]),
+	.qe(),
+	.q(reg2hw[222]),
+	.qs(stall_stall11_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin0_buffer0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin0_buffer0_we),
+	.wd(configin0_buffer0_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[56-:5]),
+	.qs(configin0_buffer0_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin0_size0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin0_size0_we),
+	.wd(configin0_size0_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[51-:7]),
+	.qs(configin0_size0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin0_pend0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin0_pend0_we),
+	.wd(configin0_pend0_wd),
+	.de(hw2reg[2]),
+	.d(hw2reg[3]),
+	.qe(),
+	.q(reg2hw[44]),
+	.qs(configin0_pend0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin0_rdy0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin0_rdy0_we),
+	.wd(configin0_rdy0_wd),
+	.de(hw2reg[0]),
+	.d(hw2reg[1]),
+	.qe(),
+	.q(reg2hw[43]),
+	.qs(configin0_rdy0_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin1_buffer1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin1_buffer1_we),
+	.wd(configin1_buffer1_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[70-:5]),
+	.qs(configin1_buffer1_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin1_size1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin1_size1_we),
+	.wd(configin1_size1_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[65-:7]),
+	.qs(configin1_size1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin1_pend1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin1_pend1_we),
+	.wd(configin1_pend1_wd),
+	.de(hw2reg[6]),
+	.d(hw2reg[7]),
+	.qe(),
+	.q(reg2hw[58]),
+	.qs(configin1_pend1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin1_rdy1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin1_rdy1_we),
+	.wd(configin1_rdy1_wd),
+	.de(hw2reg[4]),
+	.d(hw2reg[5]),
+	.qe(),
+	.q(reg2hw[57]),
+	.qs(configin1_rdy1_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin2_buffer2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin2_buffer2_we),
+	.wd(configin2_buffer2_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[84-:5]),
+	.qs(configin2_buffer2_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin2_size2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin2_size2_we),
+	.wd(configin2_size2_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[79-:7]),
+	.qs(configin2_size2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin2_pend2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin2_pend2_we),
+	.wd(configin2_pend2_wd),
+	.de(hw2reg[10]),
+	.d(hw2reg[11]),
+	.qe(),
+	.q(reg2hw[72]),
+	.qs(configin2_pend2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin2_rdy2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin2_rdy2_we),
+	.wd(configin2_rdy2_wd),
+	.de(hw2reg[8]),
+	.d(hw2reg[9]),
+	.qe(),
+	.q(reg2hw[71]),
+	.qs(configin2_rdy2_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin3_buffer3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin3_buffer3_we),
+	.wd(configin3_buffer3_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[98-:5]),
+	.qs(configin3_buffer3_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin3_size3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin3_size3_we),
+	.wd(configin3_size3_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[93-:7]),
+	.qs(configin3_size3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin3_pend3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin3_pend3_we),
+	.wd(configin3_pend3_wd),
+	.de(hw2reg[14]),
+	.d(hw2reg[15]),
+	.qe(),
+	.q(reg2hw[86]),
+	.qs(configin3_pend3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin3_rdy3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin3_rdy3_we),
+	.wd(configin3_rdy3_wd),
+	.de(hw2reg[12]),
+	.d(hw2reg[13]),
+	.qe(),
+	.q(reg2hw[85]),
+	.qs(configin3_rdy3_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin4_buffer4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin4_buffer4_we),
+	.wd(configin4_buffer4_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[112-:5]),
+	.qs(configin4_buffer4_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin4_size4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin4_size4_we),
+	.wd(configin4_size4_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[107-:7]),
+	.qs(configin4_size4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin4_pend4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin4_pend4_we),
+	.wd(configin4_pend4_wd),
+	.de(hw2reg[18]),
+	.d(hw2reg[19]),
+	.qe(),
+	.q(reg2hw[100]),
+	.qs(configin4_pend4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin4_rdy4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin4_rdy4_we),
+	.wd(configin4_rdy4_wd),
+	.de(hw2reg[16]),
+	.d(hw2reg[17]),
+	.qe(),
+	.q(reg2hw[99]),
+	.qs(configin4_rdy4_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin5_buffer5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin5_buffer5_we),
+	.wd(configin5_buffer5_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[126-:5]),
+	.qs(configin5_buffer5_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin5_size5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin5_size5_we),
+	.wd(configin5_size5_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[121-:7]),
+	.qs(configin5_size5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin5_pend5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin5_pend5_we),
+	.wd(configin5_pend5_wd),
+	.de(hw2reg[22]),
+	.d(hw2reg[23]),
+	.qe(),
+	.q(reg2hw[114]),
+	.qs(configin5_pend5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin5_rdy5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin5_rdy5_we),
+	.wd(configin5_rdy5_wd),
+	.de(hw2reg[20]),
+	.d(hw2reg[21]),
+	.qe(),
+	.q(reg2hw[113]),
+	.qs(configin5_rdy5_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin6_buffer6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin6_buffer6_we),
+	.wd(configin6_buffer6_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[140-:5]),
+	.qs(configin6_buffer6_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin6_size6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin6_size6_we),
+	.wd(configin6_size6_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[135-:7]),
+	.qs(configin6_size6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin6_pend6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin6_pend6_we),
+	.wd(configin6_pend6_wd),
+	.de(hw2reg[26]),
+	.d(hw2reg[27]),
+	.qe(),
+	.q(reg2hw[128]),
+	.qs(configin6_pend6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin6_rdy6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin6_rdy6_we),
+	.wd(configin6_rdy6_wd),
+	.de(hw2reg[24]),
+	.d(hw2reg[25]),
+	.qe(),
+	.q(reg2hw[127]),
+	.qs(configin6_rdy6_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin7_buffer7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin7_buffer7_we),
+	.wd(configin7_buffer7_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[154-:5]),
+	.qs(configin7_buffer7_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin7_size7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin7_size7_we),
+	.wd(configin7_size7_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[149-:7]),
+	.qs(configin7_size7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin7_pend7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin7_pend7_we),
+	.wd(configin7_pend7_wd),
+	.de(hw2reg[30]),
+	.d(hw2reg[31]),
+	.qe(),
+	.q(reg2hw[142]),
+	.qs(configin7_pend7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin7_rdy7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin7_rdy7_we),
+	.wd(configin7_rdy7_wd),
+	.de(hw2reg[28]),
+	.d(hw2reg[29]),
+	.qe(),
+	.q(reg2hw[141]),
+	.qs(configin7_rdy7_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin8_buffer8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin8_buffer8_we),
+	.wd(configin8_buffer8_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[168-:5]),
+	.qs(configin8_buffer8_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin8_size8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin8_size8_we),
+	.wd(configin8_size8_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[163-:7]),
+	.qs(configin8_size8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin8_pend8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin8_pend8_we),
+	.wd(configin8_pend8_wd),
+	.de(hw2reg[34]),
+	.d(hw2reg[35]),
+	.qe(),
+	.q(reg2hw[156]),
+	.qs(configin8_pend8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin8_rdy8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin8_rdy8_we),
+	.wd(configin8_rdy8_wd),
+	.de(hw2reg[32]),
+	.d(hw2reg[33]),
+	.qe(),
+	.q(reg2hw[155]),
+	.qs(configin8_rdy8_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin9_buffer9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin9_buffer9_we),
+	.wd(configin9_buffer9_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[182-:5]),
+	.qs(configin9_buffer9_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin9_size9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin9_size9_we),
+	.wd(configin9_size9_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[177-:7]),
+	.qs(configin9_size9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin9_pend9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin9_pend9_we),
+	.wd(configin9_pend9_wd),
+	.de(hw2reg[38]),
+	.d(hw2reg[39]),
+	.qe(),
+	.q(reg2hw[170]),
+	.qs(configin9_pend9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin9_rdy9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin9_rdy9_we),
+	.wd(configin9_rdy9_wd),
+	.de(hw2reg[36]),
+	.d(hw2reg[37]),
+	.qe(),
+	.q(reg2hw[169]),
+	.qs(configin9_rdy9_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin10_buffer10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin10_buffer10_we),
+	.wd(configin10_buffer10_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[196-:5]),
+	.qs(configin10_buffer10_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin10_size10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin10_size10_we),
+	.wd(configin10_size10_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[191-:7]),
+	.qs(configin10_size10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin10_pend10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin10_pend10_we),
+	.wd(configin10_pend10_wd),
+	.de(hw2reg[42]),
+	.d(hw2reg[43]),
+	.qe(),
+	.q(reg2hw[184]),
+	.qs(configin10_pend10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin10_rdy10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin10_rdy10_we),
+	.wd(configin10_rdy10_wd),
+	.de(hw2reg[40]),
+	.d(hw2reg[41]),
+	.qe(),
+	.q(reg2hw[183]),
+	.qs(configin10_rdy10_qs)
+);
+prim_subreg #(
+	.DW(5),
+	.SWACCESS("RW"),
+	.RESVAL(5'h00)
+) u_configin11_buffer11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin11_buffer11_we),
+	.wd(configin11_buffer11_wd),
+	.de(1'b0),
+	.d({5 {1'b0}}),
+	.qe(),
+	.q(reg2hw[210-:5]),
+	.qs(configin11_buffer11_qs)
+);
+prim_subreg #(
+	.DW(7),
+	.SWACCESS("RW"),
+	.RESVAL(7'h00)
+) u_configin11_size11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin11_size11_we),
+	.wd(configin11_size11_wd),
+	.de(1'b0),
+	.d({7 {1'b0}}),
+	.qe(),
+	.q(reg2hw[205-:7]),
+	.qs(configin11_size11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("W1C"),
+	.RESVAL(1'h0)
+) u_configin11_pend11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin11_pend11_we),
+	.wd(configin11_pend11_wd),
+	.de(hw2reg[46]),
+	.d(hw2reg[47]),
+	.qe(),
+	.q(reg2hw[198]),
+	.qs(configin11_pend11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_configin11_rdy11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(configin11_rdy11_we),
+	.wd(configin11_rdy11_wd),
+	.de(hw2reg[44]),
+	.d(hw2reg[45]),
+	.qe(),
+	.q(reg2hw[197]),
+	.qs(configin11_rdy11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso0_we),
+	.wd(iso_iso0_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[31]),
+	.qs(iso_iso0_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso1_we),
+	.wd(iso_iso1_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[32]),
+	.qs(iso_iso1_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso2_we),
+	.wd(iso_iso2_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[33]),
+	.qs(iso_iso2_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso3_we),
+	.wd(iso_iso3_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[34]),
+	.qs(iso_iso3_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso4_we),
+	.wd(iso_iso4_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[35]),
+	.qs(iso_iso4_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso5_we),
+	.wd(iso_iso5_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[36]),
+	.qs(iso_iso5_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso6_we),
+	.wd(iso_iso6_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[37]),
+	.qs(iso_iso6_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso7_we),
+	.wd(iso_iso7_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[38]),
+	.qs(iso_iso7_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso8_we),
+	.wd(iso_iso8_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[39]),
+	.qs(iso_iso8_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso9_we),
+	.wd(iso_iso9_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[40]),
+	.qs(iso_iso9_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso10_we),
+	.wd(iso_iso10_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[41]),
+	.qs(iso_iso10_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_iso_iso11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(iso_iso11_we),
+	.wd(iso_iso11_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[42]),
+	.qs(iso_iso11_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear0(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear0_we),
+	.wd(data_toggle_clear_clear0_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[7]),
+	.q(reg2hw[8]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear1(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear1_we),
+	.wd(data_toggle_clear_clear1_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[9]),
+	.q(reg2hw[10]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear2(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear2_we),
+	.wd(data_toggle_clear_clear2_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[11]),
+	.q(reg2hw[12]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear3(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear3_we),
+	.wd(data_toggle_clear_clear3_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[13]),
+	.q(reg2hw[14]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear4(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear4_we),
+	.wd(data_toggle_clear_clear4_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[15]),
+	.q(reg2hw[16]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear5(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear5_we),
+	.wd(data_toggle_clear_clear5_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[17]),
+	.q(reg2hw[18]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear6(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear6_we),
+	.wd(data_toggle_clear_clear6_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[19]),
+	.q(reg2hw[20]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear7(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear7_we),
+	.wd(data_toggle_clear_clear7_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[21]),
+	.q(reg2hw[22]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear8(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear8_we),
+	.wd(data_toggle_clear_clear8_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[23]),
+	.q(reg2hw[24]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear9(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear9_we),
+	.wd(data_toggle_clear_clear9_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[25]),
+	.q(reg2hw[26]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear10(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear10_we),
+	.wd(data_toggle_clear_clear10_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[27]),
+	.q(reg2hw[28]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("WO"),
+	.RESVAL(1'h0)
+) u_data_toggle_clear_clear11(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(data_toggle_clear_clear11_we),
+	.wd(data_toggle_clear_clear11_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(reg2hw[29]),
+	.q(reg2hw[30]),
+	.qs()
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_phy_config_rx_differential_mode(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_rx_differential_mode_we),
+	.wd(phy_config_rx_differential_mode_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[6]),
+	.qs(phy_config_rx_differential_mode_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_phy_config_tx_differential_mode(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_tx_differential_mode_we),
+	.wd(phy_config_tx_differential_mode_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[5]),
+	.qs(phy_config_tx_differential_mode_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h1)
+) u_phy_config_eop_single_bit(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_eop_single_bit_we),
+	.wd(phy_config_eop_single_bit_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[4]),
+	.qs(phy_config_eop_single_bit_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_phy_config_override_pwr_sense_en(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_override_pwr_sense_en_we),
+	.wd(phy_config_override_pwr_sense_en_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[3]),
+	.qs(phy_config_override_pwr_sense_en_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_phy_config_override_pwr_sense_val(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_override_pwr_sense_val_we),
+	.wd(phy_config_override_pwr_sense_val_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[2]),
+	.qs(phy_config_override_pwr_sense_val_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_phy_config_pinflip(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_pinflip_we),
+	.wd(phy_config_pinflip_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[1]),
+	.qs(phy_config_pinflip_qs)
+);
+prim_subreg #(
+	.DW(1),
+	.SWACCESS("RW"),
+	.RESVAL(1'h0)
+) u_phy_config_usb_ref_disable(
+	.clk_i(clk_i),
+	.rst_ni(rst_ni),
+	.we(phy_config_usb_ref_disable_we),
+	.wd(phy_config_usb_ref_disable_wd),
+	.de(1'b0),
+	.d(1'b0),
+	.qe(),
+	.q(reg2hw[-0]),
+	.qs(phy_config_usb_ref_disable_qs)
+);
 
   logic [25:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = {26 {1'b0}};
     addr_hit[ 0] = (reg_addr == USBDEV_INTR_STATE_OFFSET);
     addr_hit[ 1] = (reg_addr == USBDEV_INTR_ENABLE_OFFSET);
     addr_hit[ 2] = (reg_addr == USBDEV_INTR_TEST_OFFSET);
@@ -5976,7 +3982,7 @@ module usbdev_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {32 {1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = intr_state_pkt_received_qs;
@@ -6052,7 +4058,7 @@ module usbdev_reg_top (
       end
 
       addr_hit[5]: begin
-        reg_rdata_next[4:0] = '0;
+        reg_rdata_next[4:0] = {5 {1'b0}};
       end
 
       addr_hit[6]: begin
@@ -6247,7 +4253,7 @@ module usbdev_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {32 {1'b1}};
       end
     endcase
   end
diff --git a/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv b/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv
index bf3bc9fc3..88828411c 100644
--- a/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv
+++ b/hw/top_earlgrey/ip/pinmux/rtl/autogen/pinmux_reg_top.sv
@@ -14,8 +14,10 @@ module pinmux_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output pinmux_reg_pkg::pinmux_reg2hw_t reg2hw, // Write
-  input  pinmux_reg_pkg::pinmux_hw2reg_t hw2reg, // Read
+  //output pinmux_reg_pkg::pinmux_reg2hw_t reg2hw, // Write
+  //input  pinmux_reg_pkg::pinmux_hw2reg_t hw2reg, // Read
+  output wire [660:0] reg2hw,
+  input wire [37:0] hw2reg,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -598,4263 +600,2417 @@ module pinmux_reg_top (
   logic wkup_cause_cause7_wd;
   logic wkup_cause_cause7_we;
   logic wkup_cause_cause7_re;
-
-  // Register instances
-  // R[regen]: V(False)
-
   prim_subreg #(
-    .DW      (1),
+    .DW(1),
     .SWACCESS("W0C"),
-    .RESVAL  (1'h1)
-  ) u_regen (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (regen_we),
-    .wd     (regen_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (regen_qs)
-  );
-
-
-
-  // Subregister 0 of Multireg periph_insel
-  // R[periph_insel0]: V(False)
-
-  // F[in0]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in0_we & regen_qs),
-    .wd     (periph_insel0_in0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[0].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in0_qs)
-  );
-
-
-  // F[in1]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in1_we & regen_qs),
-    .wd     (periph_insel0_in1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[1].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in1_qs)
-  );
-
-
-  // F[in2]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in2_we & regen_qs),
-    .wd     (periph_insel0_in2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[2].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in2_qs)
-  );
-
-
-  // F[in3]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in3_we & regen_qs),
-    .wd     (periph_insel0_in3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[3].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in3_qs)
-  );
-
-
-  // F[in4]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel0_in4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel0_in4_we & regen_qs),
-    .wd     (periph_insel0_in4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[4].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel0_in4_qs)
-  );
-
-
-  // Subregister 5 of Multireg periph_insel
-  // R[periph_insel1]: V(False)
-
-  // F[in5]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in5_we & regen_qs),
-    .wd     (periph_insel1_in5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[5].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in5_qs)
-  );
-
-
-  // F[in6]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in6_we & regen_qs),
-    .wd     (periph_insel1_in6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[6].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in6_qs)
-  );
-
-
-  // F[in7]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in7_we & regen_qs),
-    .wd     (periph_insel1_in7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[7].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in7_qs)
-  );
-
-
-  // F[in8]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in8_we & regen_qs),
-    .wd     (periph_insel1_in8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[8].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in8_qs)
-  );
-
-
-  // F[in9]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel1_in9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel1_in9_we & regen_qs),
-    .wd     (periph_insel1_in9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[9].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel1_in9_qs)
-  );
-
-
-  // Subregister 10 of Multireg periph_insel
-  // R[periph_insel2]: V(False)
-
-  // F[in10]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in10_we & regen_qs),
-    .wd     (periph_insel2_in10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[10].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in10_qs)
-  );
-
-
-  // F[in11]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in11_we & regen_qs),
-    .wd     (periph_insel2_in11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[11].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in11_qs)
-  );
-
-
-  // F[in12]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in12_we & regen_qs),
-    .wd     (periph_insel2_in12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[12].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in12_qs)
-  );
-
-
-  // F[in13]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in13_we & regen_qs),
-    .wd     (periph_insel2_in13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[13].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in13_qs)
-  );
-
-
-  // F[in14]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel2_in14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel2_in14_we & regen_qs),
-    .wd     (periph_insel2_in14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[14].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel2_in14_qs)
-  );
-
-
-  // Subregister 15 of Multireg periph_insel
-  // R[periph_insel3]: V(False)
-
-  // F[in15]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in15_we & regen_qs),
-    .wd     (periph_insel3_in15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[15].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in15_qs)
-  );
-
-
-  // F[in16]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in16_we & regen_qs),
-    .wd     (periph_insel3_in16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[16].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in16_qs)
-  );
-
-
-  // F[in17]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in17_we & regen_qs),
-    .wd     (periph_insel3_in17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[17].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in17_qs)
-  );
-
-
-  // F[in18]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in18_we & regen_qs),
-    .wd     (periph_insel3_in18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[18].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in18_qs)
-  );
-
-
-  // F[in19]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel3_in19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel3_in19_we & regen_qs),
-    .wd     (periph_insel3_in19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[19].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel3_in19_qs)
-  );
-
-
-  // Subregister 20 of Multireg periph_insel
-  // R[periph_insel4]: V(False)
-
-  // F[in20]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in20_we & regen_qs),
-    .wd     (periph_insel4_in20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[20].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in20_qs)
-  );
-
-
-  // F[in21]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in21_we & regen_qs),
-    .wd     (periph_insel4_in21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[21].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in21_qs)
-  );
-
-
-  // F[in22]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in22_we & regen_qs),
-    .wd     (periph_insel4_in22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[22].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in22_qs)
-  );
-
-
-  // F[in23]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in23_we & regen_qs),
-    .wd     (periph_insel4_in23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[23].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in23_qs)
-  );
-
-
-  // F[in24]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel4_in24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel4_in24_we & regen_qs),
-    .wd     (periph_insel4_in24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[24].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel4_in24_qs)
-  );
-
-
-  // Subregister 25 of Multireg periph_insel
-  // R[periph_insel5]: V(False)
-
-  // F[in25]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in25_we & regen_qs),
-    .wd     (periph_insel5_in25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[25].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in25_qs)
+    .RESVAL(1'h1)
+  ) u_regen(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(regen_we),
+    .wd(regen_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(),
+    .qs(regen_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in0_we & regen_qs),
+    .wd(periph_insel0_in0_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[474-:6]),
+    .qs(periph_insel0_in0_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in1_we & regen_qs),
+    .wd(periph_insel0_in1_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[480-:6]),
+    .qs(periph_insel0_in1_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in2_we & regen_qs),
+    .wd(periph_insel0_in2_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[486-:6]),
+    .qs(periph_insel0_in2_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in3_we & regen_qs),
+    .wd(periph_insel0_in3_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[492-:6]),
+    .qs(periph_insel0_in3_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel0_in4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel0_in4_we & regen_qs),
+    .wd(periph_insel0_in4_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[498-:6]),
+    .qs(periph_insel0_in4_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in5_we & regen_qs),
+    .wd(periph_insel1_in5_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[504-:6]),
+    .qs(periph_insel1_in5_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in6_we & regen_qs),
+    .wd(periph_insel1_in6_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[510-:6]),
+    .qs(periph_insel1_in6_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in7_we & regen_qs),
+    .wd(periph_insel1_in7_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[516-:6]),
+    .qs(periph_insel1_in7_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in8(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in8_we & regen_qs),
+    .wd(periph_insel1_in8_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[522-:6]),
+    .qs(periph_insel1_in8_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel1_in9(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel1_in9_we & regen_qs),
+    .wd(periph_insel1_in9_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[528-:6]),
+    .qs(periph_insel1_in9_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in10(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in10_we & regen_qs),
+    .wd(periph_insel2_in10_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[534-:6]),
+    .qs(periph_insel2_in10_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in11(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in11_we & regen_qs),
+    .wd(periph_insel2_in11_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[540-:6]),
+    .qs(periph_insel2_in11_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in12(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in12_we & regen_qs),
+    .wd(periph_insel2_in12_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[546-:6]),
+    .qs(periph_insel2_in12_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in13(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in13_we & regen_qs),
+    .wd(periph_insel2_in13_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[552-:6]),
+    .qs(periph_insel2_in13_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel2_in14(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel2_in14_we & regen_qs),
+    .wd(periph_insel2_in14_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[558-:6]),
+    .qs(periph_insel2_in14_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in15(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in15_we & regen_qs),
+    .wd(periph_insel3_in15_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[564-:6]),
+    .qs(periph_insel3_in15_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in16(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in16_we & regen_qs),
+    .wd(periph_insel3_in16_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[570-:6]),
+    .qs(periph_insel3_in16_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in17(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in17_we & regen_qs),
+    .wd(periph_insel3_in17_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[576-:6]),
+    .qs(periph_insel3_in17_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in18(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in18_we & regen_qs),
+    .wd(periph_insel3_in18_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[582-:6]),
+    .qs(periph_insel3_in18_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel3_in19(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel3_in19_we & regen_qs),
+    .wd(periph_insel3_in19_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[588-:6]),
+    .qs(periph_insel3_in19_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in20(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in20_we & regen_qs),
+    .wd(periph_insel4_in20_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[594-:6]),
+    .qs(periph_insel4_in20_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in21(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in21_we & regen_qs),
+    .wd(periph_insel4_in21_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[600-:6]),
+    .qs(periph_insel4_in21_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in22(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in22_we & regen_qs),
+    .wd(periph_insel4_in22_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[606-:6]),
+    .qs(periph_insel4_in22_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in23(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in23_we & regen_qs),
+    .wd(periph_insel4_in23_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[612-:6]),
+    .qs(periph_insel4_in23_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel4_in24(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel4_in24_we & regen_qs),
+    .wd(periph_insel4_in24_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[618-:6]),
+    .qs(periph_insel4_in24_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in25(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in25_we & regen_qs),
+    .wd(periph_insel5_in25_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[624-:6]),
+    .qs(periph_insel5_in25_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in26(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in26_we & regen_qs),
+    .wd(periph_insel5_in26_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[630-:6]),
+    .qs(periph_insel5_in26_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in27(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in27_we & regen_qs),
+    .wd(periph_insel5_in27_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[636-:6]),
+    .qs(periph_insel5_in27_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in28(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in28_we & regen_qs),
+    .wd(periph_insel5_in28_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[642-:6]),
+    .qs(periph_insel5_in28_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel5_in29(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel5_in29_we & regen_qs),
+    .wd(periph_insel5_in29_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[648-:6]),
+    .qs(periph_insel5_in29_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel6_in30(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel6_in30_we & regen_qs),
+    .wd(periph_insel6_in30_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[654-:6]),
+    .qs(periph_insel6_in30_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h00)
+  ) u_periph_insel6_in31(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(periph_insel6_in31_we & regen_qs),
+    .wd(periph_insel6_in31_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[660-:6]),
+    .qs(periph_insel6_in31_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out0_we & regen_qs),
+    .wd(mio_outsel0_out0_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[282-:6]),
+    .qs(mio_outsel0_out0_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out1_we & regen_qs),
+    .wd(mio_outsel0_out1_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[288-:6]),
+    .qs(mio_outsel0_out1_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out2_we & regen_qs),
+    .wd(mio_outsel0_out2_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[294-:6]),
+    .qs(mio_outsel0_out2_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out3_we & regen_qs),
+    .wd(mio_outsel0_out3_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[300-:6]),
+    .qs(mio_outsel0_out3_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel0_out4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel0_out4_we & regen_qs),
+    .wd(mio_outsel0_out4_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[306-:6]),
+    .qs(mio_outsel0_out4_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out5_we & regen_qs),
+    .wd(mio_outsel1_out5_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[312-:6]),
+    .qs(mio_outsel1_out5_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out6_we & regen_qs),
+    .wd(mio_outsel1_out6_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[318-:6]),
+    .qs(mio_outsel1_out6_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out7_we & regen_qs),
+    .wd(mio_outsel1_out7_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[324-:6]),
+    .qs(mio_outsel1_out7_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out8(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out8_we & regen_qs),
+    .wd(mio_outsel1_out8_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[330-:6]),
+    .qs(mio_outsel1_out8_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel1_out9(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel1_out9_we & regen_qs),
+    .wd(mio_outsel1_out9_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[336-:6]),
+    .qs(mio_outsel1_out9_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out10(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out10_we & regen_qs),
+    .wd(mio_outsel2_out10_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[342-:6]),
+    .qs(mio_outsel2_out10_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out11(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out11_we & regen_qs),
+    .wd(mio_outsel2_out11_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[348-:6]),
+    .qs(mio_outsel2_out11_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out12(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out12_we & regen_qs),
+    .wd(mio_outsel2_out12_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[354-:6]),
+    .qs(mio_outsel2_out12_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out13(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out13_we & regen_qs),
+    .wd(mio_outsel2_out13_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[360-:6]),
+    .qs(mio_outsel2_out13_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel2_out14(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel2_out14_we & regen_qs),
+    .wd(mio_outsel2_out14_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[366-:6]),
+    .qs(mio_outsel2_out14_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out15(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out15_we & regen_qs),
+    .wd(mio_outsel3_out15_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[372-:6]),
+    .qs(mio_outsel3_out15_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out16(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out16_we & regen_qs),
+    .wd(mio_outsel3_out16_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[378-:6]),
+    .qs(mio_outsel3_out16_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out17(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out17_we & regen_qs),
+    .wd(mio_outsel3_out17_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[384-:6]),
+    .qs(mio_outsel3_out17_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out18(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out18_we & regen_qs),
+    .wd(mio_outsel3_out18_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[390-:6]),
+    .qs(mio_outsel3_out18_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel3_out19(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel3_out19_we & regen_qs),
+    .wd(mio_outsel3_out19_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[396-:6]),
+    .qs(mio_outsel3_out19_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out20(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out20_we & regen_qs),
+    .wd(mio_outsel4_out20_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[402-:6]),
+    .qs(mio_outsel4_out20_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out21(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out21_we & regen_qs),
+    .wd(mio_outsel4_out21_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[408-:6]),
+    .qs(mio_outsel4_out21_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out22(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out22_we & regen_qs),
+    .wd(mio_outsel4_out22_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[414-:6]),
+    .qs(mio_outsel4_out22_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out23(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out23_we & regen_qs),
+    .wd(mio_outsel4_out23_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[420-:6]),
+    .qs(mio_outsel4_out23_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel4_out24(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel4_out24_we & regen_qs),
+    .wd(mio_outsel4_out24_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[426-:6]),
+    .qs(mio_outsel4_out24_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out25(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out25_we & regen_qs),
+    .wd(mio_outsel5_out25_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[432-:6]),
+    .qs(mio_outsel5_out25_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out26(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out26_we & regen_qs),
+    .wd(mio_outsel5_out26_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[438-:6]),
+    .qs(mio_outsel5_out26_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out27(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out27_we & regen_qs),
+    .wd(mio_outsel5_out27_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[444-:6]),
+    .qs(mio_outsel5_out27_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out28(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out28_we & regen_qs),
+    .wd(mio_outsel5_out28_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[450-:6]),
+    .qs(mio_outsel5_out28_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel5_out29(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel5_out29_we & regen_qs),
+    .wd(mio_outsel5_out29_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[456-:6]),
+    .qs(mio_outsel5_out29_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel6_out30(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel6_out30_we & regen_qs),
+    .wd(mio_outsel6_out30_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[462-:6]),
+    .qs(mio_outsel6_out30_qs)
+  );
+  prim_subreg #(
+    .DW(6),
+    .SWACCESS("RW"),
+    .RESVAL(6'h02)
+  ) u_mio_outsel6_out31(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_outsel6_out31_we & regen_qs),
+    .wd(mio_outsel6_out31_wd),
+    .de(1'b0),
+    .d({6 {1'b0}}),
+    .qe(),
+    .q(reg2hw[468-:6]),
+    .qs(mio_outsel6_out31_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out0_we & regen_qs),
+    .wd(mio_out_sleep_val0_out0_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[214-:2]),
+    .qs(mio_out_sleep_val0_out0_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out1_we & regen_qs),
+    .wd(mio_out_sleep_val0_out1_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[216-:2]),
+    .qs(mio_out_sleep_val0_out1_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out2_we & regen_qs),
+    .wd(mio_out_sleep_val0_out2_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[218-:2]),
+    .qs(mio_out_sleep_val0_out2_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out3_we & regen_qs),
+    .wd(mio_out_sleep_val0_out3_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[220-:2]),
+    .qs(mio_out_sleep_val0_out3_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out4_we & regen_qs),
+    .wd(mio_out_sleep_val0_out4_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[222-:2]),
+    .qs(mio_out_sleep_val0_out4_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out5_we & regen_qs),
+    .wd(mio_out_sleep_val0_out5_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[224-:2]),
+    .qs(mio_out_sleep_val0_out5_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out6_we & regen_qs),
+    .wd(mio_out_sleep_val0_out6_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[226-:2]),
+    .qs(mio_out_sleep_val0_out6_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out7_we & regen_qs),
+    .wd(mio_out_sleep_val0_out7_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[228-:2]),
+    .qs(mio_out_sleep_val0_out7_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out8(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out8_we & regen_qs),
+    .wd(mio_out_sleep_val0_out8_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[230-:2]),
+    .qs(mio_out_sleep_val0_out8_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out9(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out9_we & regen_qs),
+    .wd(mio_out_sleep_val0_out9_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[232-:2]),
+    .qs(mio_out_sleep_val0_out9_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out10(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out10_we & regen_qs),
+    .wd(mio_out_sleep_val0_out10_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[234-:2]),
+    .qs(mio_out_sleep_val0_out10_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out11(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out11_we & regen_qs),
+    .wd(mio_out_sleep_val0_out11_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[236-:2]),
+    .qs(mio_out_sleep_val0_out11_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out12(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out12_we & regen_qs),
+    .wd(mio_out_sleep_val0_out12_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[238-:2]),
+    .qs(mio_out_sleep_val0_out12_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out13(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out13_we & regen_qs),
+    .wd(mio_out_sleep_val0_out13_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[240-:2]),
+    .qs(mio_out_sleep_val0_out13_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out14(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out14_we & regen_qs),
+    .wd(mio_out_sleep_val0_out14_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[242-:2]),
+    .qs(mio_out_sleep_val0_out14_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val0_out15(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val0_out15_we & regen_qs),
+    .wd(mio_out_sleep_val0_out15_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[244-:2]),
+    .qs(mio_out_sleep_val0_out15_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out16(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out16_we & regen_qs),
+    .wd(mio_out_sleep_val1_out16_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[246-:2]),
+    .qs(mio_out_sleep_val1_out16_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out17(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out17_we & regen_qs),
+    .wd(mio_out_sleep_val1_out17_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[248-:2]),
+    .qs(mio_out_sleep_val1_out17_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out18(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out18_we & regen_qs),
+    .wd(mio_out_sleep_val1_out18_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[250-:2]),
+    .qs(mio_out_sleep_val1_out18_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out19(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out19_we & regen_qs),
+    .wd(mio_out_sleep_val1_out19_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[252-:2]),
+    .qs(mio_out_sleep_val1_out19_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out20(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out20_we & regen_qs),
+    .wd(mio_out_sleep_val1_out20_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[254-:2]),
+    .qs(mio_out_sleep_val1_out20_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out21(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out21_we & regen_qs),
+    .wd(mio_out_sleep_val1_out21_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[256-:2]),
+    .qs(mio_out_sleep_val1_out21_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out22(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out22_we & regen_qs),
+    .wd(mio_out_sleep_val1_out22_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[258-:2]),
+    .qs(mio_out_sleep_val1_out22_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out23(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out23_we & regen_qs),
+    .wd(mio_out_sleep_val1_out23_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[260-:2]),
+    .qs(mio_out_sleep_val1_out23_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out24(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out24_we & regen_qs),
+    .wd(mio_out_sleep_val1_out24_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[262-:2]),
+    .qs(mio_out_sleep_val1_out24_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out25(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out25_we & regen_qs),
+    .wd(mio_out_sleep_val1_out25_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[264-:2]),
+    .qs(mio_out_sleep_val1_out25_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out26(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out26_we & regen_qs),
+    .wd(mio_out_sleep_val1_out26_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[266-:2]),
+    .qs(mio_out_sleep_val1_out26_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out27(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out27_we & regen_qs),
+    .wd(mio_out_sleep_val1_out27_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[268-:2]),
+    .qs(mio_out_sleep_val1_out27_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out28(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out28_we & regen_qs),
+    .wd(mio_out_sleep_val1_out28_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[270-:2]),
+    .qs(mio_out_sleep_val1_out28_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out29(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out29_we & regen_qs),
+    .wd(mio_out_sleep_val1_out29_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[272-:2]),
+    .qs(mio_out_sleep_val1_out29_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out30(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out30_we & regen_qs),
+    .wd(mio_out_sleep_val1_out30_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[274-:2]),
+    .qs(mio_out_sleep_val1_out30_qs)
+  );
+  prim_subreg #(
+    .DW(2),
+    .SWACCESS("RW"),
+    .RESVAL(2'h2)
+  ) u_mio_out_sleep_val1_out31(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(mio_out_sleep_val1_out31_we & regen_qs),
+    .wd(mio_out_sleep_val1_out31_wd),
+    .de(1'b0),
+    .d({2 {1'b0}}),
+    .qe(),
+    .q(reg2hw[276-:2]),
+    .qs(mio_out_sleep_val1_out31_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out0(
+    .re(dio_out_sleep_val_out0_re),
+    .we(dio_out_sleep_val_out0_we & regen_qs),
+    .wd(dio_out_sleep_val_out0_wd),
+    .d(hw2reg[9-:2]),
+    .qre(),
+    .qe(reg2hw[168]),
+    .q(reg2hw[170-:2]),
+    .qs(dio_out_sleep_val_out0_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out1(
+    .re(dio_out_sleep_val_out1_re),
+    .we(dio_out_sleep_val_out1_we & regen_qs),
+    .wd(dio_out_sleep_val_out1_wd),
+    .d(hw2reg[11-:2]),
+    .qre(),
+    .qe(reg2hw[171]),
+    .q(reg2hw[173-:2]),
+    .qs(dio_out_sleep_val_out1_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out2(
+    .re(dio_out_sleep_val_out2_re),
+    .we(dio_out_sleep_val_out2_we & regen_qs),
+    .wd(dio_out_sleep_val_out2_wd),
+    .d(hw2reg[13-:2]),
+    .qre(),
+    .qe(reg2hw[174]),
+    .q(reg2hw[176-:2]),
+    .qs(dio_out_sleep_val_out2_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out3(
+    .re(dio_out_sleep_val_out3_re),
+    .we(dio_out_sleep_val_out3_we & regen_qs),
+    .wd(dio_out_sleep_val_out3_wd),
+    .d(hw2reg[15-:2]),
+    .qre(),
+    .qe(reg2hw[177]),
+    .q(reg2hw[179-:2]),
+    .qs(dio_out_sleep_val_out3_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out4(
+    .re(dio_out_sleep_val_out4_re),
+    .we(dio_out_sleep_val_out4_we & regen_qs),
+    .wd(dio_out_sleep_val_out4_wd),
+    .d(hw2reg[17-:2]),
+    .qre(),
+    .qe(reg2hw[180]),
+    .q(reg2hw[182-:2]),
+    .qs(dio_out_sleep_val_out4_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out5(
+    .re(dio_out_sleep_val_out5_re),
+    .we(dio_out_sleep_val_out5_we & regen_qs),
+    .wd(dio_out_sleep_val_out5_wd),
+    .d(hw2reg[19-:2]),
+    .qre(),
+    .qe(reg2hw[183]),
+    .q(reg2hw[185-:2]),
+    .qs(dio_out_sleep_val_out5_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out6(
+    .re(dio_out_sleep_val_out6_re),
+    .we(dio_out_sleep_val_out6_we & regen_qs),
+    .wd(dio_out_sleep_val_out6_wd),
+    .d(hw2reg[21-:2]),
+    .qre(),
+    .qe(reg2hw[186]),
+    .q(reg2hw[188-:2]),
+    .qs(dio_out_sleep_val_out6_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out7(
+    .re(dio_out_sleep_val_out7_re),
+    .we(dio_out_sleep_val_out7_we & regen_qs),
+    .wd(dio_out_sleep_val_out7_wd),
+    .d(hw2reg[23-:2]),
+    .qre(),
+    .qe(reg2hw[189]),
+    .q(reg2hw[191-:2]),
+    .qs(dio_out_sleep_val_out7_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out8(
+    .re(dio_out_sleep_val_out8_re),
+    .we(dio_out_sleep_val_out8_we & regen_qs),
+    .wd(dio_out_sleep_val_out8_wd),
+    .d(hw2reg[25-:2]),
+    .qre(),
+    .qe(reg2hw[192]),
+    .q(reg2hw[194-:2]),
+    .qs(dio_out_sleep_val_out8_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out9(
+    .re(dio_out_sleep_val_out9_re),
+    .we(dio_out_sleep_val_out9_we & regen_qs),
+    .wd(dio_out_sleep_val_out9_wd),
+    .d(hw2reg[27-:2]),
+    .qre(),
+    .qe(reg2hw[195]),
+    .q(reg2hw[197-:2]),
+    .qs(dio_out_sleep_val_out9_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out10(
+    .re(dio_out_sleep_val_out10_re),
+    .we(dio_out_sleep_val_out10_we & regen_qs),
+    .wd(dio_out_sleep_val_out10_wd),
+    .d(hw2reg[29-:2]),
+    .qre(),
+    .qe(reg2hw[198]),
+    .q(reg2hw[200-:2]),
+    .qs(dio_out_sleep_val_out10_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out11(
+    .re(dio_out_sleep_val_out11_re),
+    .we(dio_out_sleep_val_out11_we & regen_qs),
+    .wd(dio_out_sleep_val_out11_wd),
+    .d(hw2reg[31-:2]),
+    .qre(),
+    .qe(reg2hw[201]),
+    .q(reg2hw[203-:2]),
+    .qs(dio_out_sleep_val_out11_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out12(
+    .re(dio_out_sleep_val_out12_re),
+    .we(dio_out_sleep_val_out12_we & regen_qs),
+    .wd(dio_out_sleep_val_out12_wd),
+    .d(hw2reg[33-:2]),
+    .qre(),
+    .qe(reg2hw[204]),
+    .q(reg2hw[206-:2]),
+    .qs(dio_out_sleep_val_out12_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out13(
+    .re(dio_out_sleep_val_out13_re),
+    .we(dio_out_sleep_val_out13_we & regen_qs),
+    .wd(dio_out_sleep_val_out13_wd),
+    .d(hw2reg[35-:2]),
+    .qre(),
+    .qe(reg2hw[207]),
+    .q(reg2hw[209-:2]),
+    .qs(dio_out_sleep_val_out13_qs)
+  );
+  prim_subreg_ext #(.DW(2)) u_dio_out_sleep_val_out14(
+    .re(dio_out_sleep_val_out14_re),
+    .we(dio_out_sleep_val_out14_we & regen_qs),
+    .wd(dio_out_sleep_val_out14_wd),
+    .d(hw2reg[37-:2]),
+    .qre(),
+    .qe(reg2hw[210]),
+    .q(reg2hw[212-:2]),
+    .qs(dio_out_sleep_val_out14_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en0_we & regen_qs),
+    .wd(wkup_detector_en_en0_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[160]),
+    .qs(wkup_detector_en_en0_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en1_we & regen_qs),
+    .wd(wkup_detector_en_en1_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[161]),
+    .qs(wkup_detector_en_en1_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en2_we & regen_qs),
+    .wd(wkup_detector_en_en2_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[162]),
+    .qs(wkup_detector_en_en2_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en3_we & regen_qs),
+    .wd(wkup_detector_en_en3_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[163]),
+    .qs(wkup_detector_en_en3_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en4_we & regen_qs),
+    .wd(wkup_detector_en_en4_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[164]),
+    .qs(wkup_detector_en_en4_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en5_we & regen_qs),
+    .wd(wkup_detector_en_en5_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[165]),
+    .qs(wkup_detector_en_en5_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en6_we & regen_qs),
+    .wd(wkup_detector_en_en6_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[166]),
+    .qs(wkup_detector_en_en6_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector_en_en7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_en_en7_we & regen_qs),
+    .wd(wkup_detector_en_en7_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[167]),
+    .qs(wkup_detector_en_en7_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector0_mode0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector0_mode0_we & regen_qs),
+    .wd(wkup_detector0_mode0_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[124-:3]),
+    .qs(wkup_detector0_mode0_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector0_filter0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector0_filter0_we & regen_qs),
+    .wd(wkup_detector0_filter0_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[121]),
+    .qs(wkup_detector0_filter0_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector0_miodio0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector0_miodio0_we & regen_qs),
+    .wd(wkup_detector0_miodio0_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[120]),
+    .qs(wkup_detector0_miodio0_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector1_mode1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector1_mode1_we & regen_qs),
+    .wd(wkup_detector1_mode1_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[129-:3]),
+    .qs(wkup_detector1_mode1_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector1_filter1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector1_filter1_we & regen_qs),
+    .wd(wkup_detector1_filter1_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[126]),
+    .qs(wkup_detector1_filter1_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector1_miodio1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector1_miodio1_we & regen_qs),
+    .wd(wkup_detector1_miodio1_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[125]),
+    .qs(wkup_detector1_miodio1_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector2_mode2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector2_mode2_we & regen_qs),
+    .wd(wkup_detector2_mode2_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[134-:3]),
+    .qs(wkup_detector2_mode2_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector2_filter2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector2_filter2_we & regen_qs),
+    .wd(wkup_detector2_filter2_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[131]),
+    .qs(wkup_detector2_filter2_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector2_miodio2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector2_miodio2_we & regen_qs),
+    .wd(wkup_detector2_miodio2_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[130]),
+    .qs(wkup_detector2_miodio2_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector3_mode3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector3_mode3_we & regen_qs),
+    .wd(wkup_detector3_mode3_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[139-:3]),
+    .qs(wkup_detector3_mode3_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector3_filter3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector3_filter3_we & regen_qs),
+    .wd(wkup_detector3_filter3_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[136]),
+    .qs(wkup_detector3_filter3_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector3_miodio3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector3_miodio3_we & regen_qs),
+    .wd(wkup_detector3_miodio3_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[135]),
+    .qs(wkup_detector3_miodio3_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector4_mode4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector4_mode4_we & regen_qs),
+    .wd(wkup_detector4_mode4_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[144-:3]),
+    .qs(wkup_detector4_mode4_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector4_filter4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector4_filter4_we & regen_qs),
+    .wd(wkup_detector4_filter4_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[141]),
+    .qs(wkup_detector4_filter4_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector4_miodio4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector4_miodio4_we & regen_qs),
+    .wd(wkup_detector4_miodio4_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[140]),
+    .qs(wkup_detector4_miodio4_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector5_mode5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector5_mode5_we & regen_qs),
+    .wd(wkup_detector5_mode5_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[149-:3]),
+    .qs(wkup_detector5_mode5_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector5_filter5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector5_filter5_we & regen_qs),
+    .wd(wkup_detector5_filter5_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[146]),
+    .qs(wkup_detector5_filter5_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector5_miodio5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector5_miodio5_we & regen_qs),
+    .wd(wkup_detector5_miodio5_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[145]),
+    .qs(wkup_detector5_miodio5_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector6_mode6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector6_mode6_we & regen_qs),
+    .wd(wkup_detector6_mode6_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[154-:3]),
+    .qs(wkup_detector6_mode6_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector6_filter6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector6_filter6_we & regen_qs),
+    .wd(wkup_detector6_filter6_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[151]),
+    .qs(wkup_detector6_filter6_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector6_miodio6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector6_miodio6_we & regen_qs),
+    .wd(wkup_detector6_miodio6_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[150]),
+    .qs(wkup_detector6_miodio6_qs)
+  );
+  prim_subreg #(
+    .DW(3),
+    .SWACCESS("RW"),
+    .RESVAL(3'h0)
+  ) u_wkup_detector7_mode7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector7_mode7_we & regen_qs),
+    .wd(wkup_detector7_mode7_wd),
+    .de(1'b0),
+    .d({3 {1'b0}}),
+    .qe(),
+    .q(reg2hw[159-:3]),
+    .qs(wkup_detector7_mode7_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector7_filter7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector7_filter7_we & regen_qs),
+    .wd(wkup_detector7_filter7_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[156]),
+    .qs(wkup_detector7_filter7_qs)
+  );
+  prim_subreg #(
+    .DW(1),
+    .SWACCESS("RW"),
+    .RESVAL(1'h0)
+  ) u_wkup_detector7_miodio7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector7_miodio7_we & regen_qs),
+    .wd(wkup_detector7_miodio7_wd),
+    .de(1'b0),
+    .d(1'b0),
+    .qe(),
+    .q(reg2hw[155]),
+    .qs(wkup_detector7_miodio7_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th0_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th0_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[63-:8]),
+    .qs(wkup_detector_cnt_th0_th0_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th1_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th1_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[71-:8]),
+    .qs(wkup_detector_cnt_th0_th1_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th2_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th2_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[79-:8]),
+    .qs(wkup_detector_cnt_th0_th2_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th0_th3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th0_th3_we & regen_qs),
+    .wd(wkup_detector_cnt_th0_th3_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[87-:8]),
+    .qs(wkup_detector_cnt_th0_th3_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th4_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th4_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[95-:8]),
+    .qs(wkup_detector_cnt_th1_th4_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th5_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th5_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[103-:8]),
+    .qs(wkup_detector_cnt_th1_th5_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th6_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th6_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[111-:8]),
+    .qs(wkup_detector_cnt_th1_th6_qs)
+  );
+  prim_subreg #(
+    .DW(8),
+    .SWACCESS("RW"),
+    .RESVAL(8'h00)
+  ) u_wkup_detector_cnt_th1_th7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_cnt_th1_th7_we & regen_qs),
+    .wd(wkup_detector_cnt_th1_th7_wd),
+    .de(1'b0),
+    .d({8 {1'b0}}),
+    .qe(),
+    .q(reg2hw[119-:8]),
+    .qs(wkup_detector_cnt_th1_th7_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel0(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel0_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel0_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[20-:5]),
+    .qs(wkup_detector_padsel0_sel0_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel1(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel1_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel1_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[25-:5]),
+    .qs(wkup_detector_padsel0_sel1_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel2(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel2_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel2_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[30-:5]),
+    .qs(wkup_detector_padsel0_sel2_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel3(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel3_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel3_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[35-:5]),
+    .qs(wkup_detector_padsel0_sel3_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel4(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel4_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel4_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[40-:5]),
+    .qs(wkup_detector_padsel0_sel4_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel0_sel5(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel0_sel5_we & regen_qs),
+    .wd(wkup_detector_padsel0_sel5_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[45-:5]),
+    .qs(wkup_detector_padsel0_sel5_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel1_sel6(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel1_sel6_we & regen_qs),
+    .wd(wkup_detector_padsel1_sel6_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[50-:5]),
+    .qs(wkup_detector_padsel1_sel6_qs)
+  );
+  prim_subreg #(
+    .DW(5),
+    .SWACCESS("RW"),
+    .RESVAL(5'h00)
+  ) u_wkup_detector_padsel1_sel7(
+    .clk_i(clk_i),
+    .rst_ni(rst_ni),
+    .we(wkup_detector_padsel1_sel7_we & regen_qs),
+    .wd(wkup_detector_padsel1_sel7_wd),
+    .de(1'b0),
+    .d({5 {1'b0}}),
+    .qe(),
+    .q(reg2hw[55-:5]),
+    .qs(wkup_detector_padsel1_sel7_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause0(
+    .re(wkup_cause_cause0_re),
+    .we(wkup_cause_cause0_we & regen_qs),
+    .wd(wkup_cause_cause0_wd),
+    .d(hw2reg[0]),
+    .qre(),
+    .qe(reg2hw[0]),
+    .q(reg2hw[1]),
+    .qs(wkup_cause_cause0_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause1(
+    .re(wkup_cause_cause1_re),
+    .we(wkup_cause_cause1_we & regen_qs),
+    .wd(wkup_cause_cause1_wd),
+    .d(hw2reg[1]),
+    .qre(),
+    .qe(reg2hw[2]),
+    .q(reg2hw[3]),
+    .qs(wkup_cause_cause1_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause2(
+    .re(wkup_cause_cause2_re),
+    .we(wkup_cause_cause2_we & regen_qs),
+    .wd(wkup_cause_cause2_wd),
+    .d(hw2reg[2]),
+    .qre(),
+    .qe(reg2hw[4]),
+    .q(reg2hw[5]),
+    .qs(wkup_cause_cause2_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause3(
+    .re(wkup_cause_cause3_re),
+    .we(wkup_cause_cause3_we & regen_qs),
+    .wd(wkup_cause_cause3_wd),
+    .d(hw2reg[3]),
+    .qre(),
+    .qe(reg2hw[6]),
+    .q(reg2hw[7]),
+    .qs(wkup_cause_cause3_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause4(
+    .re(wkup_cause_cause4_re),
+    .we(wkup_cause_cause4_we & regen_qs),
+    .wd(wkup_cause_cause4_wd),
+    .d(hw2reg[4]),
+    .qre(),
+    .qe(reg2hw[8]),
+    .q(reg2hw[9]),
+    .qs(wkup_cause_cause4_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause5(
+    .re(wkup_cause_cause5_re),
+    .we(wkup_cause_cause5_we & regen_qs),
+    .wd(wkup_cause_cause5_wd),
+    .d(hw2reg[5]),
+    .qre(),
+    .qe(reg2hw[10]),
+    .q(reg2hw[11]),
+    .qs(wkup_cause_cause5_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause6(
+    .re(wkup_cause_cause6_re),
+    .we(wkup_cause_cause6_we & regen_qs),
+    .wd(wkup_cause_cause6_wd),
+    .d(hw2reg[6]),
+    .qre(),
+    .qe(reg2hw[12]),
+    .q(reg2hw[13]),
+    .qs(wkup_cause_cause6_qs)
+  );
+  prim_subreg_ext #(.DW(1)) u_wkup_cause_cause7(
+    .re(wkup_cause_cause7_re),
+    .we(wkup_cause_cause7_we & regen_qs),
+    .wd(wkup_cause_cause7_wd),
+    .d(hw2reg[7]),
+    .qre(),
+    .qe(reg2hw[14]),
+    .q(reg2hw[15]),
+    .qs(wkup_cause_cause7_qs)
   );
 
-
-  // F[in26]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in26_we & regen_qs),
-    .wd     (periph_insel5_in26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[26].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in26_qs)
-  );
-
-
-  // F[in27]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in27_we & regen_qs),
-    .wd     (periph_insel5_in27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[27].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in27_qs)
-  );
-
-
-  // F[in28]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in28_we & regen_qs),
-    .wd     (periph_insel5_in28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[28].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in28_qs)
-  );
-
-
-  // F[in29]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel5_in29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel5_in29_we & regen_qs),
-    .wd     (periph_insel5_in29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[29].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel5_in29_qs)
-  );
-
-
-  // Subregister 30 of Multireg periph_insel
-  // R[periph_insel6]: V(False)
-
-  // F[in30]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel6_in30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel6_in30_we & regen_qs),
-    .wd     (periph_insel6_in30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[30].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel6_in30_qs)
-  );
-
-
-  // F[in31]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h0)
-  ) u_periph_insel6_in31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (periph_insel6_in31_we & regen_qs),
-    .wd     (periph_insel6_in31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.periph_insel[31].q ),
-
-    // to register interface (read)
-    .qs     (periph_insel6_in31_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg mio_outsel
-  // R[mio_outsel0]: V(False)
-
-  // F[out0]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out0_we & regen_qs),
-    .wd     (mio_outsel0_out0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[0].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out0_qs)
-  );
-
-
-  // F[out1]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out1_we & regen_qs),
-    .wd     (mio_outsel0_out1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[1].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out1_qs)
-  );
-
-
-  // F[out2]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out2_we & regen_qs),
-    .wd     (mio_outsel0_out2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[2].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out2_qs)
-  );
-
-
-  // F[out3]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out3_we & regen_qs),
-    .wd     (mio_outsel0_out3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[3].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out3_qs)
-  );
-
-
-  // F[out4]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel0_out4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel0_out4_we & regen_qs),
-    .wd     (mio_outsel0_out4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[4].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel0_out4_qs)
-  );
-
-
-  // Subregister 5 of Multireg mio_outsel
-  // R[mio_outsel1]: V(False)
-
-  // F[out5]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out5_we & regen_qs),
-    .wd     (mio_outsel1_out5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[5].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out5_qs)
-  );
-
-
-  // F[out6]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out6_we & regen_qs),
-    .wd     (mio_outsel1_out6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[6].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out6_qs)
-  );
-
-
-  // F[out7]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out7_we & regen_qs),
-    .wd     (mio_outsel1_out7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[7].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out7_qs)
-  );
-
-
-  // F[out8]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out8_we & regen_qs),
-    .wd     (mio_outsel1_out8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[8].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out8_qs)
-  );
-
-
-  // F[out9]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel1_out9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel1_out9_we & regen_qs),
-    .wd     (mio_outsel1_out9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[9].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel1_out9_qs)
-  );
-
-
-  // Subregister 10 of Multireg mio_outsel
-  // R[mio_outsel2]: V(False)
-
-  // F[out10]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out10_we & regen_qs),
-    .wd     (mio_outsel2_out10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[10].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out10_qs)
-  );
-
-
-  // F[out11]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out11_we & regen_qs),
-    .wd     (mio_outsel2_out11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[11].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out11_qs)
-  );
-
-
-  // F[out12]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out12_we & regen_qs),
-    .wd     (mio_outsel2_out12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[12].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out12_qs)
-  );
-
-
-  // F[out13]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out13_we & regen_qs),
-    .wd     (mio_outsel2_out13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[13].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out13_qs)
-  );
-
-
-  // F[out14]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel2_out14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel2_out14_we & regen_qs),
-    .wd     (mio_outsel2_out14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[14].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel2_out14_qs)
-  );
-
-
-  // Subregister 15 of Multireg mio_outsel
-  // R[mio_outsel3]: V(False)
-
-  // F[out15]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out15_we & regen_qs),
-    .wd     (mio_outsel3_out15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[15].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out15_qs)
-  );
-
-
-  // F[out16]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out16_we & regen_qs),
-    .wd     (mio_outsel3_out16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[16].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out16_qs)
-  );
-
-
-  // F[out17]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out17_we & regen_qs),
-    .wd     (mio_outsel3_out17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[17].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out17_qs)
-  );
-
-
-  // F[out18]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out18_we & regen_qs),
-    .wd     (mio_outsel3_out18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[18].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out18_qs)
-  );
-
-
-  // F[out19]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel3_out19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel3_out19_we & regen_qs),
-    .wd     (mio_outsel3_out19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[19].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel3_out19_qs)
-  );
-
-
-  // Subregister 20 of Multireg mio_outsel
-  // R[mio_outsel4]: V(False)
-
-  // F[out20]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out20_we & regen_qs),
-    .wd     (mio_outsel4_out20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[20].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out20_qs)
-  );
-
-
-  // F[out21]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out21_we & regen_qs),
-    .wd     (mio_outsel4_out21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[21].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out21_qs)
-  );
-
-
-  // F[out22]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out22_we & regen_qs),
-    .wd     (mio_outsel4_out22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[22].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out22_qs)
-  );
-
-
-  // F[out23]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out23_we & regen_qs),
-    .wd     (mio_outsel4_out23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[23].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out23_qs)
-  );
-
-
-  // F[out24]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel4_out24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel4_out24_we & regen_qs),
-    .wd     (mio_outsel4_out24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[24].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel4_out24_qs)
-  );
-
-
-  // Subregister 25 of Multireg mio_outsel
-  // R[mio_outsel5]: V(False)
-
-  // F[out25]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out25_we & regen_qs),
-    .wd     (mio_outsel5_out25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[25].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out25_qs)
-  );
-
-
-  // F[out26]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out26_we & regen_qs),
-    .wd     (mio_outsel5_out26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[26].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out26_qs)
-  );
-
-
-  // F[out27]: 17:12
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out27_we & regen_qs),
-    .wd     (mio_outsel5_out27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[27].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out27_qs)
-  );
-
-
-  // F[out28]: 23:18
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out28_we & regen_qs),
-    .wd     (mio_outsel5_out28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[28].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out28_qs)
-  );
-
-
-  // F[out29]: 29:24
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel5_out29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel5_out29_we & regen_qs),
-    .wd     (mio_outsel5_out29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[29].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel5_out29_qs)
-  );
-
-
-  // Subregister 30 of Multireg mio_outsel
-  // R[mio_outsel6]: V(False)
-
-  // F[out30]: 5:0
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel6_out30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel6_out30_we & regen_qs),
-    .wd     (mio_outsel6_out30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[30].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel6_out30_qs)
-  );
-
-
-  // F[out31]: 11:6
-  prim_subreg #(
-    .DW      (6),
-    .SWACCESS("RW"),
-    .RESVAL  (6'h2)
-  ) u_mio_outsel6_out31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_outsel6_out31_we & regen_qs),
-    .wd     (mio_outsel6_out31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_outsel[31].q ),
-
-    // to register interface (read)
-    .qs     (mio_outsel6_out31_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg mio_out_sleep_val
-  // R[mio_out_sleep_val0]: V(False)
-
-  // F[out0]: 1:0
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out0_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[0].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out0_qs)
-  );
-
-
-  // F[out1]: 3:2
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out1_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[1].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out1_qs)
-  );
-
-
-  // F[out2]: 5:4
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out2_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[2].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out2_qs)
-  );
-
-
-  // F[out3]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out3_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[3].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out3_qs)
-  );
-
-
-  // F[out4]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out4_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[4].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out4_qs)
-  );
-
-
-  // F[out5]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out5_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[5].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out5_qs)
-  );
-
-
-  // F[out6]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out6_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[6].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out6_qs)
-  );
-
-
-  // F[out7]: 15:14
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out7_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[7].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out7_qs)
-  );
-
-
-  // F[out8]: 17:16
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out8_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[8].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out8_qs)
-  );
-
-
-  // F[out9]: 19:18
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out9_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[9].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out9_qs)
-  );
-
-
-  // F[out10]: 21:20
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out10_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[10].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out10_qs)
-  );
-
-
-  // F[out11]: 23:22
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out11_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[11].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out11_qs)
-  );
-
-
-  // F[out12]: 25:24
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out12_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[12].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out12_qs)
-  );
-
-
-  // F[out13]: 27:26
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out13_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[13].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out13_qs)
-  );
-
-
-  // F[out14]: 29:28
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out14_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[14].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out14_qs)
-  );
-
-
-  // F[out15]: 31:30
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val0_out15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val0_out15_we & regen_qs),
-    .wd     (mio_out_sleep_val0_out15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[15].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val0_out15_qs)
-  );
-
-
-  // Subregister 16 of Multireg mio_out_sleep_val
-  // R[mio_out_sleep_val1]: V(False)
-
-  // F[out16]: 1:0
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out16_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[16].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out16_qs)
-  );
-
-
-  // F[out17]: 3:2
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out17_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[17].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out17_qs)
-  );
-
-
-  // F[out18]: 5:4
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out18_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[18].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out18_qs)
-  );
-
-
-  // F[out19]: 7:6
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out19_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[19].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out19_qs)
-  );
-
-
-  // F[out20]: 9:8
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out20_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[20].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out20_qs)
-  );
-
-
-  // F[out21]: 11:10
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out21_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[21].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out21_qs)
-  );
-
-
-  // F[out22]: 13:12
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out22_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[22].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out22_qs)
-  );
-
-
-  // F[out23]: 15:14
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out23_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[23].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out23_qs)
-  );
-
-
-  // F[out24]: 17:16
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out24_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[24].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out24_qs)
-  );
-
-
-  // F[out25]: 19:18
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out25_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[25].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out25_qs)
-  );
-
-
-  // F[out26]: 21:20
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out26_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[26].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out26_qs)
-  );
-
-
-  // F[out27]: 23:22
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out27_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[27].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out27_qs)
-  );
-
-
-  // F[out28]: 25:24
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out28_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[28].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out28_qs)
-  );
-
-
-  // F[out29]: 27:26
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out29_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[29].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out29_qs)
-  );
-
-
-  // F[out30]: 29:28
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out30_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[30].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out30_qs)
-  );
-
-
-  // F[out31]: 31:30
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h2)
-  ) u_mio_out_sleep_val1_out31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (mio_out_sleep_val1_out31_we & regen_qs),
-    .wd     (mio_out_sleep_val1_out31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.mio_out_sleep_val[31].q ),
-
-    // to register interface (read)
-    .qs     (mio_out_sleep_val1_out31_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg dio_out_sleep_val
-  // R[dio_out_sleep_val]: V(True)
-
-  // F[out0]: 1:0
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out0 (
-    .re     (dio_out_sleep_val_out0_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out0_we & regen_qs),
-    .wd     (dio_out_sleep_val_out0_wd),
-    .d      (hw2reg.dio_out_sleep_val[0].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[0].qe),
-    .q      (reg2hw.dio_out_sleep_val[0].q ),
-    .qs     (dio_out_sleep_val_out0_qs)
-  );
-
-
-  // F[out1]: 3:2
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out1 (
-    .re     (dio_out_sleep_val_out1_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out1_we & regen_qs),
-    .wd     (dio_out_sleep_val_out1_wd),
-    .d      (hw2reg.dio_out_sleep_val[1].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[1].qe),
-    .q      (reg2hw.dio_out_sleep_val[1].q ),
-    .qs     (dio_out_sleep_val_out1_qs)
-  );
-
-
-  // F[out2]: 5:4
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out2 (
-    .re     (dio_out_sleep_val_out2_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out2_we & regen_qs),
-    .wd     (dio_out_sleep_val_out2_wd),
-    .d      (hw2reg.dio_out_sleep_val[2].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[2].qe),
-    .q      (reg2hw.dio_out_sleep_val[2].q ),
-    .qs     (dio_out_sleep_val_out2_qs)
-  );
-
-
-  // F[out3]: 7:6
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out3 (
-    .re     (dio_out_sleep_val_out3_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out3_we & regen_qs),
-    .wd     (dio_out_sleep_val_out3_wd),
-    .d      (hw2reg.dio_out_sleep_val[3].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[3].qe),
-    .q      (reg2hw.dio_out_sleep_val[3].q ),
-    .qs     (dio_out_sleep_val_out3_qs)
-  );
-
-
-  // F[out4]: 9:8
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out4 (
-    .re     (dio_out_sleep_val_out4_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out4_we & regen_qs),
-    .wd     (dio_out_sleep_val_out4_wd),
-    .d      (hw2reg.dio_out_sleep_val[4].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[4].qe),
-    .q      (reg2hw.dio_out_sleep_val[4].q ),
-    .qs     (dio_out_sleep_val_out4_qs)
-  );
-
-
-  // F[out5]: 11:10
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out5 (
-    .re     (dio_out_sleep_val_out5_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out5_we & regen_qs),
-    .wd     (dio_out_sleep_val_out5_wd),
-    .d      (hw2reg.dio_out_sleep_val[5].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[5].qe),
-    .q      (reg2hw.dio_out_sleep_val[5].q ),
-    .qs     (dio_out_sleep_val_out5_qs)
-  );
-
-
-  // F[out6]: 13:12
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out6 (
-    .re     (dio_out_sleep_val_out6_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out6_we & regen_qs),
-    .wd     (dio_out_sleep_val_out6_wd),
-    .d      (hw2reg.dio_out_sleep_val[6].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[6].qe),
-    .q      (reg2hw.dio_out_sleep_val[6].q ),
-    .qs     (dio_out_sleep_val_out6_qs)
-  );
-
-
-  // F[out7]: 15:14
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out7 (
-    .re     (dio_out_sleep_val_out7_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out7_we & regen_qs),
-    .wd     (dio_out_sleep_val_out7_wd),
-    .d      (hw2reg.dio_out_sleep_val[7].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[7].qe),
-    .q      (reg2hw.dio_out_sleep_val[7].q ),
-    .qs     (dio_out_sleep_val_out7_qs)
-  );
-
-
-  // F[out8]: 17:16
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out8 (
-    .re     (dio_out_sleep_val_out8_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out8_we & regen_qs),
-    .wd     (dio_out_sleep_val_out8_wd),
-    .d      (hw2reg.dio_out_sleep_val[8].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[8].qe),
-    .q      (reg2hw.dio_out_sleep_val[8].q ),
-    .qs     (dio_out_sleep_val_out8_qs)
-  );
-
-
-  // F[out9]: 19:18
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out9 (
-    .re     (dio_out_sleep_val_out9_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out9_we & regen_qs),
-    .wd     (dio_out_sleep_val_out9_wd),
-    .d      (hw2reg.dio_out_sleep_val[9].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[9].qe),
-    .q      (reg2hw.dio_out_sleep_val[9].q ),
-    .qs     (dio_out_sleep_val_out9_qs)
-  );
-
-
-  // F[out10]: 21:20
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out10 (
-    .re     (dio_out_sleep_val_out10_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out10_we & regen_qs),
-    .wd     (dio_out_sleep_val_out10_wd),
-    .d      (hw2reg.dio_out_sleep_val[10].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[10].qe),
-    .q      (reg2hw.dio_out_sleep_val[10].q ),
-    .qs     (dio_out_sleep_val_out10_qs)
-  );
-
-
-  // F[out11]: 23:22
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out11 (
-    .re     (dio_out_sleep_val_out11_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out11_we & regen_qs),
-    .wd     (dio_out_sleep_val_out11_wd),
-    .d      (hw2reg.dio_out_sleep_val[11].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[11].qe),
-    .q      (reg2hw.dio_out_sleep_val[11].q ),
-    .qs     (dio_out_sleep_val_out11_qs)
-  );
-
-
-  // F[out12]: 25:24
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out12 (
-    .re     (dio_out_sleep_val_out12_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out12_we & regen_qs),
-    .wd     (dio_out_sleep_val_out12_wd),
-    .d      (hw2reg.dio_out_sleep_val[12].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[12].qe),
-    .q      (reg2hw.dio_out_sleep_val[12].q ),
-    .qs     (dio_out_sleep_val_out12_qs)
-  );
-
-
-  // F[out13]: 27:26
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out13 (
-    .re     (dio_out_sleep_val_out13_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out13_we & regen_qs),
-    .wd     (dio_out_sleep_val_out13_wd),
-    .d      (hw2reg.dio_out_sleep_val[13].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[13].qe),
-    .q      (reg2hw.dio_out_sleep_val[13].q ),
-    .qs     (dio_out_sleep_val_out13_qs)
-  );
-
-
-  // F[out14]: 29:28
-  prim_subreg_ext #(
-    .DW    (2)
-  ) u_dio_out_sleep_val_out14 (
-    .re     (dio_out_sleep_val_out14_re),
-    // qualified with register enable
-    .we     (dio_out_sleep_val_out14_we & regen_qs),
-    .wd     (dio_out_sleep_val_out14_wd),
-    .d      (hw2reg.dio_out_sleep_val[14].d),
-    .qre    (),
-    .qe     (reg2hw.dio_out_sleep_val[14].qe),
-    .q      (reg2hw.dio_out_sleep_val[14].q ),
-    .qs     (dio_out_sleep_val_out14_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector_en
-  // R[wkup_detector_en]: V(False)
-
-  // F[en0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en0_we & regen_qs),
-    .wd     (wkup_detector_en_en0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[0].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en0_qs)
-  );
-
-
-  // F[en1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en1_we & regen_qs),
-    .wd     (wkup_detector_en_en1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[1].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en1_qs)
-  );
-
-
-  // F[en2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en2_we & regen_qs),
-    .wd     (wkup_detector_en_en2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[2].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en2_qs)
-  );
-
-
-  // F[en3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en3_we & regen_qs),
-    .wd     (wkup_detector_en_en3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[3].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en3_qs)
-  );
-
-
-  // F[en4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en4_we & regen_qs),
-    .wd     (wkup_detector_en_en4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[4].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en4_qs)
-  );
-
-
-  // F[en5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en5_we & regen_qs),
-    .wd     (wkup_detector_en_en5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[5].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en5_qs)
-  );
-
-
-  // F[en6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en6_we & regen_qs),
-    .wd     (wkup_detector_en_en6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[6].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en6_qs)
-  );
-
-
-  // F[en7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector_en_en7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_en_en7_we & regen_qs),
-    .wd     (wkup_detector_en_en7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_en[7].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_en_en7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector
-  // R[wkup_detector0]: V(False)
-
-  // F[mode0]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector0_mode0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector0_mode0_we & regen_qs),
-    .wd     (wkup_detector0_mode0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[0].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector0_mode0_qs)
-  );
-
-
-  // F[filter0]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector0_filter0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector0_filter0_we & regen_qs),
-    .wd     (wkup_detector0_filter0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[0].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector0_filter0_qs)
-  );
-
-
-  // F[miodio0]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector0_miodio0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector0_miodio0_we & regen_qs),
-    .wd     (wkup_detector0_miodio0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[0].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector0_miodio0_qs)
-  );
-
-
-  // Subregister 1 of Multireg wkup_detector
-  // R[wkup_detector1]: V(False)
-
-  // F[mode1]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector1_mode1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector1_mode1_we & regen_qs),
-    .wd     (wkup_detector1_mode1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[1].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector1_mode1_qs)
-  );
-
-
-  // F[filter1]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector1_filter1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector1_filter1_we & regen_qs),
-    .wd     (wkup_detector1_filter1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[1].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector1_filter1_qs)
-  );
-
-
-  // F[miodio1]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector1_miodio1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector1_miodio1_we & regen_qs),
-    .wd     (wkup_detector1_miodio1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[1].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector1_miodio1_qs)
-  );
-
-
-  // Subregister 2 of Multireg wkup_detector
-  // R[wkup_detector2]: V(False)
-
-  // F[mode2]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector2_mode2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector2_mode2_we & regen_qs),
-    .wd     (wkup_detector2_mode2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[2].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector2_mode2_qs)
-  );
-
-
-  // F[filter2]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector2_filter2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector2_filter2_we & regen_qs),
-    .wd     (wkup_detector2_filter2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[2].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector2_filter2_qs)
-  );
-
-
-  // F[miodio2]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector2_miodio2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector2_miodio2_we & regen_qs),
-    .wd     (wkup_detector2_miodio2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[2].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector2_miodio2_qs)
-  );
-
-
-  // Subregister 3 of Multireg wkup_detector
-  // R[wkup_detector3]: V(False)
-
-  // F[mode3]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector3_mode3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector3_mode3_we & regen_qs),
-    .wd     (wkup_detector3_mode3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[3].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector3_mode3_qs)
-  );
-
-
-  // F[filter3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector3_filter3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector3_filter3_we & regen_qs),
-    .wd     (wkup_detector3_filter3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[3].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector3_filter3_qs)
-  );
-
-
-  // F[miodio3]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector3_miodio3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector3_miodio3_we & regen_qs),
-    .wd     (wkup_detector3_miodio3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[3].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector3_miodio3_qs)
-  );
-
-
-  // Subregister 4 of Multireg wkup_detector
-  // R[wkup_detector4]: V(False)
-
-  // F[mode4]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector4_mode4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector4_mode4_we & regen_qs),
-    .wd     (wkup_detector4_mode4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[4].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector4_mode4_qs)
-  );
-
-
-  // F[filter4]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector4_filter4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector4_filter4_we & regen_qs),
-    .wd     (wkup_detector4_filter4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[4].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector4_filter4_qs)
-  );
-
-
-  // F[miodio4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector4_miodio4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector4_miodio4_we & regen_qs),
-    .wd     (wkup_detector4_miodio4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[4].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector4_miodio4_qs)
-  );
-
-
-  // Subregister 5 of Multireg wkup_detector
-  // R[wkup_detector5]: V(False)
-
-  // F[mode5]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector5_mode5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector5_mode5_we & regen_qs),
-    .wd     (wkup_detector5_mode5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[5].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector5_mode5_qs)
-  );
-
-
-  // F[filter5]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector5_filter5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector5_filter5_we & regen_qs),
-    .wd     (wkup_detector5_filter5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[5].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector5_filter5_qs)
-  );
-
-
-  // F[miodio5]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector5_miodio5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector5_miodio5_we & regen_qs),
-    .wd     (wkup_detector5_miodio5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[5].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector5_miodio5_qs)
-  );
-
-
-  // Subregister 6 of Multireg wkup_detector
-  // R[wkup_detector6]: V(False)
-
-  // F[mode6]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector6_mode6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector6_mode6_we & regen_qs),
-    .wd     (wkup_detector6_mode6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[6].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector6_mode6_qs)
-  );
-
-
-  // F[filter6]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector6_filter6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector6_filter6_we & regen_qs),
-    .wd     (wkup_detector6_filter6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[6].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector6_filter6_qs)
-  );
-
-
-  // F[miodio6]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector6_miodio6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector6_miodio6_we & regen_qs),
-    .wd     (wkup_detector6_miodio6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[6].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector6_miodio6_qs)
-  );
-
-
-  // Subregister 7 of Multireg wkup_detector
-  // R[wkup_detector7]: V(False)
-
-  // F[mode7]: 2:0
-  prim_subreg #(
-    .DW      (3),
-    .SWACCESS("RW"),
-    .RESVAL  (3'h0)
-  ) u_wkup_detector7_mode7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector7_mode7_we & regen_qs),
-    .wd     (wkup_detector7_mode7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[7].mode.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector7_mode7_qs)
-  );
-
-
-  // F[filter7]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector7_filter7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector7_filter7_we & regen_qs),
-    .wd     (wkup_detector7_filter7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[7].filter.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector7_filter7_qs)
-  );
-
-
-  // F[miodio7]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_wkup_detector7_miodio7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector7_miodio7_we & regen_qs),
-    .wd     (wkup_detector7_miodio7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector[7].miodio.q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector7_miodio7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector_cnt_th
-  // R[wkup_detector_cnt_th0]: V(False)
-
-  // F[th0]: 7:0
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th0_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[0].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th0_qs)
-  );
-
-
-  // F[th1]: 15:8
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th1_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[1].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th1_qs)
-  );
-
-
-  // F[th2]: 23:16
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th2_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[2].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th2_qs)
-  );
-
-
-  // F[th3]: 31:24
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th0_th3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th0_th3_we & regen_qs),
-    .wd     (wkup_detector_cnt_th0_th3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[3].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th0_th3_qs)
-  );
-
-
-  // Subregister 4 of Multireg wkup_detector_cnt_th
-  // R[wkup_detector_cnt_th1]: V(False)
-
-  // F[th4]: 7:0
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th4_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[4].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th4_qs)
-  );
-
-
-  // F[th5]: 15:8
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th5_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[5].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th5_qs)
-  );
-
-
-  // F[th6]: 23:16
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th6_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[6].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th6_qs)
-  );
-
-
-  // F[th7]: 31:24
-  prim_subreg #(
-    .DW      (8),
-    .SWACCESS("RW"),
-    .RESVAL  (8'h0)
-  ) u_wkup_detector_cnt_th1_th7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_cnt_th1_th7_we & regen_qs),
-    .wd     (wkup_detector_cnt_th1_th7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_cnt_th[7].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_cnt_th1_th7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_detector_padsel
-  // R[wkup_detector_padsel0]: V(False)
-
-  // F[sel0]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel0_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[0].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel0_qs)
-  );
-
-
-  // F[sel1]: 9:5
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel1_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[1].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel1_qs)
-  );
-
-
-  // F[sel2]: 14:10
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel2_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[2].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel2_qs)
-  );
-
-
-  // F[sel3]: 19:15
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel3_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[3].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel3_qs)
-  );
-
-
-  // F[sel4]: 24:20
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel4_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[4].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel4_qs)
-  );
-
-
-  // F[sel5]: 29:25
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel0_sel5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel0_sel5_we & regen_qs),
-    .wd     (wkup_detector_padsel0_sel5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[5].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel0_sel5_qs)
-  );
-
-
-  // Subregister 6 of Multireg wkup_detector_padsel
-  // R[wkup_detector_padsel1]: V(False)
-
-  // F[sel6]: 4:0
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel1_sel6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel1_sel6_we & regen_qs),
-    .wd     (wkup_detector_padsel1_sel6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[6].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel1_sel6_qs)
-  );
-
-
-  // F[sel7]: 9:5
-  prim_subreg #(
-    .DW      (5),
-    .SWACCESS("RW"),
-    .RESVAL  (5'h0)
-  ) u_wkup_detector_padsel1_sel7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface (qualified with register enable)
-    .we     (wkup_detector_padsel1_sel7_we & regen_qs),
-    .wd     (wkup_detector_padsel1_sel7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.wkup_detector_padsel[7].q ),
-
-    // to register interface (read)
-    .qs     (wkup_detector_padsel1_sel7_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg wkup_cause
-  // R[wkup_cause]: V(True)
-
-  // F[cause0]: 0:0
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause0 (
-    .re     (wkup_cause_cause0_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause0_we & regen_qs),
-    .wd     (wkup_cause_cause0_wd),
-    .d      (hw2reg.wkup_cause[0].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[0].qe),
-    .q      (reg2hw.wkup_cause[0].q ),
-    .qs     (wkup_cause_cause0_qs)
-  );
-
-
-  // F[cause1]: 1:1
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause1 (
-    .re     (wkup_cause_cause1_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause1_we & regen_qs),
-    .wd     (wkup_cause_cause1_wd),
-    .d      (hw2reg.wkup_cause[1].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[1].qe),
-    .q      (reg2hw.wkup_cause[1].q ),
-    .qs     (wkup_cause_cause1_qs)
-  );
-
-
-  // F[cause2]: 2:2
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause2 (
-    .re     (wkup_cause_cause2_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause2_we & regen_qs),
-    .wd     (wkup_cause_cause2_wd),
-    .d      (hw2reg.wkup_cause[2].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[2].qe),
-    .q      (reg2hw.wkup_cause[2].q ),
-    .qs     (wkup_cause_cause2_qs)
-  );
-
-
-  // F[cause3]: 3:3
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause3 (
-    .re     (wkup_cause_cause3_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause3_we & regen_qs),
-    .wd     (wkup_cause_cause3_wd),
-    .d      (hw2reg.wkup_cause[3].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[3].qe),
-    .q      (reg2hw.wkup_cause[3].q ),
-    .qs     (wkup_cause_cause3_qs)
-  );
-
-
-  // F[cause4]: 4:4
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause4 (
-    .re     (wkup_cause_cause4_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause4_we & regen_qs),
-    .wd     (wkup_cause_cause4_wd),
-    .d      (hw2reg.wkup_cause[4].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[4].qe),
-    .q      (reg2hw.wkup_cause[4].q ),
-    .qs     (wkup_cause_cause4_qs)
-  );
-
-
-  // F[cause5]: 5:5
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause5 (
-    .re     (wkup_cause_cause5_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause5_we & regen_qs),
-    .wd     (wkup_cause_cause5_wd),
-    .d      (hw2reg.wkup_cause[5].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[5].qe),
-    .q      (reg2hw.wkup_cause[5].q ),
-    .qs     (wkup_cause_cause5_qs)
-  );
-
-
-  // F[cause6]: 6:6
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause6 (
-    .re     (wkup_cause_cause6_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause6_we & regen_qs),
-    .wd     (wkup_cause_cause6_wd),
-    .d      (hw2reg.wkup_cause[6].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[6].qe),
-    .q      (reg2hw.wkup_cause[6].q ),
-    .qs     (wkup_cause_cause6_qs)
-  );
-
-
-  // F[cause7]: 7:7
-  prim_subreg_ext #(
-    .DW    (1)
-  ) u_wkup_cause_cause7 (
-    .re     (wkup_cause_cause7_re),
-    // qualified with register enable
-    .we     (wkup_cause_cause7_we & regen_qs),
-    .wd     (wkup_cause_cause7_wd),
-    .d      (hw2reg.wkup_cause[7].d),
-    .qre    (),
-    .qe     (reg2hw.wkup_cause[7].qe),
-    .q      (reg2hw.wkup_cause[7].q ),
-    .qs     (wkup_cause_cause7_qs)
-  );
-
-
-
-
-
+  // Register instances
+  // R[regen]: V(False)
   logic [31:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = {32 {1'b0}};
     addr_hit[ 0] = (reg_addr == PINMUX_REGEN_OFFSET);
     addr_hit[ 1] = (reg_addr == PINMUX_PERIPH_INSEL0_OFFSET);
     addr_hit[ 2] = (reg_addr == PINMUX_PERIPH_INSEL1_OFFSET);
@@ -5457,7 +3613,7 @@ module pinmux_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {32 {1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = regen_qs;
@@ -5724,7 +3880,7 @@ module pinmux_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {32 {1'b1}};
       end
     endcase
   end
diff --git a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv
index f771dd35a..61c74e42d 100644
--- a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv
+++ b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_pkg.sv
@@ -116,7 +116,7 @@ package pwrmgr_reg_pkg;
     pwrmgr_reg2hw_intr_test_reg_t intr_test; // [17:16]
     pwrmgr_reg2hw_control_reg_t control; // [15:12]
     pwrmgr_reg2hw_cfg_cdc_sync_reg_t cfg_cdc_sync; // [11:10]
-    pwrmgr_reg2hw_wakeup_en_mreg_t [0:0] wakeup_en; // [9:9]
+    pwrmgr_reg2hw_wakeup_en_mreg_t wakeup_en; // [9:9]
     pwrmgr_reg2hw_reset_en_reg_t reset_en; // [8:7]
     pwrmgr_reg2hw_wake_info_capture_dis_reg_t wake_info_capture_dis; // [6:6]
     pwrmgr_reg2hw_wake_info_reg_t wake_info; // [5:0]
diff --git a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv
index 2365da52c..e64c9cca6 100644
--- a/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv
+++ b/hw/top_earlgrey/ip/pwrmgr/rtl/autogen/pwrmgr_reg_top.sv
@@ -170,7 +170,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -189,7 +189,7 @@ module pwrmgr_reg_top (
     .re     (1'b0),
     .we     (intr_test_we),
     .wd     (intr_test_wd),
-    .d      ('0),
+    .d      (1'b0),
     .qre    (),
     .qe     (reg2hw.intr_test.qe),
     .q      (reg2hw.intr_test.q ),
@@ -204,7 +204,7 @@ module pwrmgr_reg_top (
   ) u_ctrl_cfg_regwen (
     .re     (ctrl_cfg_regwen_re),
     .we     (1'b0),
-    .wd     ('0),
+    .wd     (1'b0),
     .d      (hw2reg.ctrl_cfg_regwen.d),
     .qre    (),
     .qe     (),
@@ -256,7 +256,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -282,7 +282,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -308,7 +308,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -362,7 +362,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -391,11 +391,11 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.wakeup_en[0].q ),
+    .q      (reg2hw.wakeup_en.q ),
 
     // to register interface (read)
     .qs     (wakeup_en_qs)
@@ -426,7 +426,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -453,7 +453,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -486,7 +486,7 @@ module pwrmgr_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0  ),
+    .d      (1'b0  ),
 
     // to internal hardware
     .qe     (),
@@ -548,7 +548,7 @@ module pwrmgr_reg_top (
 
   logic [13:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = {14{1'b0}};
     addr_hit[ 0] = (reg_addr == PWRMGR_INTR_STATE_OFFSET);
     addr_hit[ 1] = (reg_addr == PWRMGR_INTR_ENABLE_OFFSET);
     addr_hit[ 2] = (reg_addr == PWRMGR_INTR_TEST_OFFSET);
@@ -643,7 +643,7 @@ module pwrmgr_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {DW{1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = intr_state_qs;
@@ -654,7 +654,7 @@ module pwrmgr_reg_top (
       end
 
       addr_hit[2]: begin
-        reg_rdata_next[0] = '0;
+        reg_rdata_next[0] = 1'b0;
       end
 
       addr_hit[3]: begin
@@ -707,7 +707,7 @@ module pwrmgr_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {DW{1'b1}};
       end
     endcase
   end
diff --git a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv
index c516c01ca..0868b6d65 100644
--- a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv
+++ b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic.sv
@@ -38,13 +38,15 @@ module rv_plic import rv_plic_reg_pkg::*; #(
 
   // Interrupt notification to targets
   output [NumTarget-1:0] irq_o,
-  output [SRCW-1:0]      irq_id_o [NumTarget],
+  output [SRCW-1:0]      irq_id_o,
 
   output logic [NumTarget-1:0] msip_o
 );
 
-  rv_plic_reg2hw_t reg2hw;
-  rv_plic_hw2reg_t hw2reg;
+  wire [343:0] reg2hw;
+  wire [172:0] hw2reg;
+  //rv_plic_reg2hw_t reg2hw;
+  //rv_plic_hw2reg_t hw2reg;
 
   localparam int MAX_PRIO    = 3;
   localparam int PRIOW = $clog2(MAX_PRIO+1);
@@ -52,35 +54,35 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   logic [NumSrc-1:0] le; // 0:level 1:edge
   logic [NumSrc-1:0] ip;
 
-  logic [NumSrc-1:0] ie [NumTarget];
+  logic [NumSrc-1:0] ie;
 
   logic [NumTarget-1:0] claim_re; // Target read indicator
-  logic [SRCW-1:0]      claim_id [NumTarget];
+  logic [SRCW-1:0]      claim_id;
   logic [NumSrc-1:0]    claim; // Converted from claim_re/claim_id
 
   logic [NumTarget-1:0] complete_we; // Target write indicator
-  logic [SRCW-1:0]      complete_id [NumTarget];
+  logic [SRCW-1:0]      complete_id;
   logic [NumSrc-1:0]    complete; // Converted from complete_re/complete_id
 
-  logic [SRCW-1:0]      cc_id [NumTarget]; // Write ID
+  logic [SRCW-1:0]      cc_id; // Write ID
 
   logic [PRIOW-1:0] prio [NumSrc];
 
-  logic [PRIOW-1:0] threshold [NumTarget];
+  logic [PRIOW-1:0] threshold;
 
   // Glue logic between rv_plic_reg_top and others
   assign cc_id = irq_id_o;
 
   always_comb begin
-    claim = '0;
+    claim = {NumSrc{1'b0}};
     for (int i = 0 ; i < NumTarget ; i++) begin
-      if (claim_re[i]) claim[claim_id[i]] = 1'b1;
+      if (claim_re[i]) claim[claim_id] = 1'b1;
     end
   end
   always_comb begin
-    complete = '0;
+    complete = {NumSrc{1'b0}};
     for (int i = 0 ; i < NumTarget ; i++) begin
-      if (complete_we[i]) complete[complete_id[i]] = 1'b1;
+      if (complete_we[i]) complete[complete_id] = 1'b1;
     end
   end
 
@@ -94,129 +96,129 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   //////////////
   // Priority //
   //////////////
-  assign prio[0] = reg2hw.prio0.q;
-  assign prio[1] = reg2hw.prio1.q;
-  assign prio[2] = reg2hw.prio2.q;
-  assign prio[3] = reg2hw.prio3.q;
-  assign prio[4] = reg2hw.prio4.q;
-  assign prio[5] = reg2hw.prio5.q;
-  assign prio[6] = reg2hw.prio6.q;
-  assign prio[7] = reg2hw.prio7.q;
-  assign prio[8] = reg2hw.prio8.q;
-  assign prio[9] = reg2hw.prio9.q;
-  assign prio[10] = reg2hw.prio10.q;
-  assign prio[11] = reg2hw.prio11.q;
-  assign prio[12] = reg2hw.prio12.q;
-  assign prio[13] = reg2hw.prio13.q;
-  assign prio[14] = reg2hw.prio14.q;
-  assign prio[15] = reg2hw.prio15.q;
-  assign prio[16] = reg2hw.prio16.q;
-  assign prio[17] = reg2hw.prio17.q;
-  assign prio[18] = reg2hw.prio18.q;
-  assign prio[19] = reg2hw.prio19.q;
-  assign prio[20] = reg2hw.prio20.q;
-  assign prio[21] = reg2hw.prio21.q;
-  assign prio[22] = reg2hw.prio22.q;
-  assign prio[23] = reg2hw.prio23.q;
-  assign prio[24] = reg2hw.prio24.q;
-  assign prio[25] = reg2hw.prio25.q;
-  assign prio[26] = reg2hw.prio26.q;
-  assign prio[27] = reg2hw.prio27.q;
-  assign prio[28] = reg2hw.prio28.q;
-  assign prio[29] = reg2hw.prio29.q;
-  assign prio[30] = reg2hw.prio30.q;
-  assign prio[31] = reg2hw.prio31.q;
-  assign prio[32] = reg2hw.prio32.q;
-  assign prio[33] = reg2hw.prio33.q;
-  assign prio[34] = reg2hw.prio34.q;
-  assign prio[35] = reg2hw.prio35.q;
-  assign prio[36] = reg2hw.prio36.q;
-  assign prio[37] = reg2hw.prio37.q;
-  assign prio[38] = reg2hw.prio38.q;
-  assign prio[39] = reg2hw.prio39.q;
-  assign prio[40] = reg2hw.prio40.q;
-  assign prio[41] = reg2hw.prio41.q;
-  assign prio[42] = reg2hw.prio42.q;
-  assign prio[43] = reg2hw.prio43.q;
-  assign prio[44] = reg2hw.prio44.q;
-  assign prio[45] = reg2hw.prio45.q;
-  assign prio[46] = reg2hw.prio46.q;
-  assign prio[47] = reg2hw.prio47.q;
-  assign prio[48] = reg2hw.prio48.q;
-  assign prio[49] = reg2hw.prio49.q;
-  assign prio[50] = reg2hw.prio50.q;
-  assign prio[51] = reg2hw.prio51.q;
-  assign prio[52] = reg2hw.prio52.q;
-  assign prio[53] = reg2hw.prio53.q;
-  assign prio[54] = reg2hw.prio54.q;
-  assign prio[55] = reg2hw.prio55.q;
-  assign prio[56] = reg2hw.prio56.q;
-  assign prio[57] = reg2hw.prio57.q;
-  assign prio[58] = reg2hw.prio58.q;
-  assign prio[59] = reg2hw.prio59.q;
-  assign prio[60] = reg2hw.prio60.q;
-  assign prio[61] = reg2hw.prio61.q;
-  assign prio[62] = reg2hw.prio62.q;
-  assign prio[63] = reg2hw.prio63.q;
-  assign prio[64] = reg2hw.prio64.q;
-  assign prio[65] = reg2hw.prio65.q;
-  assign prio[66] = reg2hw.prio66.q;
-  assign prio[67] = reg2hw.prio67.q;
-  assign prio[68] = reg2hw.prio68.q;
-  assign prio[69] = reg2hw.prio69.q;
-  assign prio[70] = reg2hw.prio70.q;
-  assign prio[71] = reg2hw.prio71.q;
-  assign prio[72] = reg2hw.prio72.q;
-  assign prio[73] = reg2hw.prio73.q;
-  assign prio[74] = reg2hw.prio74.q;
-  assign prio[75] = reg2hw.prio75.q;
-  assign prio[76] = reg2hw.prio76.q;
-  assign prio[77] = reg2hw.prio77.q;
-  assign prio[78] = reg2hw.prio78.q;
-  assign prio[79] = reg2hw.prio79.q;
-  assign prio[80] = reg2hw.prio80.q;
-  assign prio[81] = reg2hw.prio81.q;
-  assign prio[82] = reg2hw.prio82.q;
+  assign prio[0] = reg2hw[260-:2];
+  assign prio[1] = reg2hw[258-:2];
+  assign prio[2] = reg2hw[256-:2];
+  assign prio[3] = reg2hw[254-:2];
+  assign prio[4] = reg2hw[252-:2];
+  assign prio[5] = reg2hw[250-:2];
+  assign prio[6] = reg2hw[248-:2];
+  assign prio[7] = reg2hw[246-:2];
+  assign prio[8] = reg2hw[244-:2];
+  assign prio[9] = reg2hw[242-:2];
+  assign prio[10] = reg2hw[240-:2];
+  assign prio[11] = reg2hw[238-:2];
+  assign prio[12] = reg2hw[236-:2];
+  assign prio[13] = reg2hw[234-:2];
+  assign prio[14] = reg2hw[232-:2];
+  assign prio[15] = reg2hw[230-:2];
+  assign prio[16] = reg2hw[228-:2];
+  assign prio[17] = reg2hw[226-:2];
+  assign prio[18] = reg2hw[224-:2];
+  assign prio[19] = reg2hw[222-:2];
+  assign prio[20] = reg2hw[220-:2];
+  assign prio[21] = reg2hw[218-:2];
+  assign prio[22] = reg2hw[216-:2];
+  assign prio[23] = reg2hw[214-:2];
+  assign prio[24] = reg2hw[212-:2];
+  assign prio[25] = reg2hw[210-:2];
+  assign prio[26] = reg2hw[208-:2];
+  assign prio[27] = reg2hw[206-:2];
+  assign prio[28] = reg2hw[204-:2];
+  assign prio[29] = reg2hw[202-:2];
+  assign prio[30] = reg2hw[200-:2];
+  assign prio[31] = reg2hw[198-:2];
+  assign prio[32] = reg2hw[196-:2];
+  assign prio[33] = reg2hw[194-:2];
+  assign prio[34] = reg2hw[192-:2];
+  assign prio[35] = reg2hw[190-:2];
+  assign prio[36] = reg2hw[188-:2];
+  assign prio[37] = reg2hw[186-:2];
+  assign prio[38] = reg2hw[184-:2];
+  assign prio[39] = reg2hw[182-:2];
+  assign prio[40] = reg2hw[180-:2];
+  assign prio[41] = reg2hw[178-:2];
+  assign prio[42] = reg2hw[176-:2];
+  assign prio[43] = reg2hw[174-:2];
+  assign prio[44] = reg2hw[172-:2];
+  assign prio[45] = reg2hw[170-:2];
+  assign prio[46] = reg2hw[168-:2];
+  assign prio[47] = reg2hw[166-:2];
+  assign prio[48] = reg2hw[164-:2];
+  assign prio[49] = reg2hw[162-:2];
+  assign prio[50] = reg2hw[160-:2];
+  assign prio[51] = reg2hw[158-:2];
+  assign prio[52] = reg2hw[156-:2];
+  assign prio[53] = reg2hw[154-:2];
+  assign prio[54] = reg2hw[152-:2];
+  assign prio[55] = reg2hw[150-:2];
+  assign prio[56] = reg2hw[148-:2];
+  assign prio[57] = reg2hw[146-:2];
+  assign prio[58] = reg2hw[144-:2];
+  assign prio[59] = reg2hw[142-:2];
+  assign prio[60] = reg2hw[140-:2];
+  assign prio[61] = reg2hw[138-:2];
+  assign prio[62] = reg2hw[136-:2];
+  assign prio[63] = reg2hw[134-:2];
+  assign prio[64] = reg2hw[132-:2];
+  assign prio[65] = reg2hw[130-:2];
+  assign prio[66] = reg2hw[128-:2];
+  assign prio[67] = reg2hw[126-:2];
+  assign prio[68] = reg2hw[124-:2];
+  assign prio[69] = reg2hw[122-:2];
+  assign prio[70] = reg2hw[120-:2];
+  assign prio[71] = reg2hw[118-:2];
+  assign prio[72] = reg2hw[116-:2];
+  assign prio[73] = reg2hw[114-:2];
+  assign prio[74] = reg2hw[112-:2];
+  assign prio[75] = reg2hw[110-:2];
+  assign prio[76] = reg2hw[108-:2];
+  assign prio[77] = reg2hw[106-:2];
+  assign prio[78] = reg2hw[104-:2];
+  assign prio[79] = reg2hw[102-:2];
+  assign prio[80] = reg2hw[100-:2];
+  assign prio[81] = reg2hw[98-:2];
+  assign prio[82] = reg2hw[96-:2];
 
   //////////////////////
   // Interrupt Enable //
   //////////////////////
   for (genvar s = 0; s < 83; s++) begin : gen_ie0
-    assign ie[0][s] = reg2hw.ie0[s].q;
+    assign ie[s] = reg2hw[12 + s];
   end
 
   ////////////////////////
   // THRESHOLD register //
   ////////////////////////
-  assign threshold[0] = reg2hw.threshold0.q;
+  assign threshold = reg2hw[11-:2];
 
   /////////////////
   // CC register //
   /////////////////
-  assign claim_re[0]    = reg2hw.cc0.re;
-  assign claim_id[0]    = irq_id_o[0];
-  assign complete_we[0] = reg2hw.cc0.qe;
-  assign complete_id[0] = reg2hw.cc0.q;
-  assign hw2reg.cc0.d   = cc_id[0];
+  assign claim_re[0]    = reg2hw[1];
+  assign claim_id    = irq_id_o;
+  assign complete_we[0] = reg2hw[2];
+  assign complete_id = reg2hw[9-:7];
+  assign hw2reg[6-:7]   = cc_id;
 
   ///////////////////
   // MSIP register //
   ///////////////////
-  assign msip_o[0] = reg2hw.msip0.q;
+  assign msip_o[0] = reg2hw[-0];
 
   ////////
   // IP //
   ////////
   for (genvar s = 0; s < 83; s++) begin : gen_ip
-    assign hw2reg.ip[s].de = 1'b1; // Always write
-    assign hw2reg.ip[s].d  = ip[s];
+    assign hw2reg[7 + (s * 2)] = 1'b1; // Always write
+    assign hw2reg[7 + ((s * 2) + 1)] = ip[s];
   end
 
   ///////////////////////////////////
   // Detection:: 0: Level, 1: Edge //
   ///////////////////////////////////
   for (genvar s = 0; s < 83; s++) begin : gen_le
-    assign le[s] = reg2hw.le[s].q;
+    assign le[s] = reg2hw[261 + s];
   end
 
   //////////////
@@ -249,13 +251,13 @@ module rv_plic import rv_plic_reg_pkg::*; #(
       .rst_ni,
 
       .ip_i        (ip),
-      .ie_i        (ie[i]),
+      .ie_i        (ie),
 
       .prio_i      (prio),
-      .threshold_i (threshold[i]),
+      .threshold_i (threshold),
 
       .irq_o       (irq_o[i]),
-      .irq_id_o    (irq_id_o[i])
+      .irq_id_o    (irq_id_o)
 
     );
   end
diff --git a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv
index 72339602f..7c0140e62 100644
--- a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv
+++ b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_pkg.sv
@@ -382,7 +382,7 @@ package rv_plic_reg_pkg;
   // Register to internal design logic //
   ///////////////////////////////////////
   typedef struct packed {
-    rv_plic_reg2hw_le_mreg_t [82:0] le; // [343:261]
+    logic [82:0] le; // [343:261]
     rv_plic_reg2hw_prio0_reg_t prio0; // [260:259]
     rv_plic_reg2hw_prio1_reg_t prio1; // [258:257]
     rv_plic_reg2hw_prio2_reg_t prio2; // [256:255]
@@ -466,7 +466,7 @@ package rv_plic_reg_pkg;
     rv_plic_reg2hw_prio80_reg_t prio80; // [100:99]
     rv_plic_reg2hw_prio81_reg_t prio81; // [98:97]
     rv_plic_reg2hw_prio82_reg_t prio82; // [96:95]
-    rv_plic_reg2hw_ie0_mreg_t [82:0] ie0; // [94:12]
+    logic [82:0] ie0; // [94:12]
     rv_plic_reg2hw_threshold0_reg_t threshold0; // [11:10]
     rv_plic_reg2hw_cc0_reg_t cc0; // [9:1]
     rv_plic_reg2hw_msip0_reg_t msip0; // [0:0]
@@ -476,7 +476,7 @@ package rv_plic_reg_pkg;
   // Internal design logic to register //
   ///////////////////////////////////////
   typedef struct packed {
-    rv_plic_hw2reg_ip_mreg_t [82:0] ip; // [172:7]
+    logic [82:0] ip [2]; // [172:7]
     rv_plic_hw2reg_cc0_reg_t cc0; // [6:-2]
   } rv_plic_hw2reg_t;
 
diff --git a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv
index 64b285761..4125e8d4f 100644
--- a/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv
+++ b/hw/top_earlgrey/ip/rv_plic/rtl/autogen/rv_plic_reg_top.sv
@@ -14,8 +14,10 @@ module rv_plic_reg_top (
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
-  output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
-  input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read
+  output wire [343:0] reg2hw,
+  input wire [172:0] hw2reg,
+  //output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
+  //input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -917,8742 +919,5030 @@ module rv_plic_reg_top (
   // Subregister 0 of Multireg ip
   // R[ip0]: V(False)
 
-  // F[p0]: 0:0
   prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[0].de),
-    .d      (hw2reg.ip[0].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p0_qs)
-  );
-
-
-  // F[p1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[1].de),
-    .d      (hw2reg.ip[1].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p1_qs)
-  );
-
-
-  // F[p2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[2].de),
-    .d      (hw2reg.ip[2].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p2_qs)
-  );
-
-
-  // F[p3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[3].de),
-    .d      (hw2reg.ip[3].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p3_qs)
-  );
-
-
-  // F[p4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[4].de),
-    .d      (hw2reg.ip[4].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p4_qs)
-  );
-
-
-  // F[p5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[5].de),
-    .d      (hw2reg.ip[5].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p5_qs)
-  );
-
-
-  // F[p6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[6].de),
-    .d      (hw2reg.ip[6].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p6_qs)
-  );
-
-
-  // F[p7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[7].de),
-    .d      (hw2reg.ip[7].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p7_qs)
-  );
-
-
-  // F[p8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[8].de),
-    .d      (hw2reg.ip[8].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p8_qs)
-  );
-
-
-  // F[p9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[9].de),
-    .d      (hw2reg.ip[9].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p9_qs)
-  );
-
-
-  // F[p10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[10].de),
-    .d      (hw2reg.ip[10].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p10_qs)
-  );
-
-
-  // F[p11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[11].de),
-    .d      (hw2reg.ip[11].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p11_qs)
-  );
-
-
-  // F[p12]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[12].de),
-    .d      (hw2reg.ip[12].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p12_qs)
-  );
-
-
-  // F[p13]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[13].de),
-    .d      (hw2reg.ip[13].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p13_qs)
-  );
-
-
-  // F[p14]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[14].de),
-    .d      (hw2reg.ip[14].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p14_qs)
-  );
-
-
-  // F[p15]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[15].de),
-    .d      (hw2reg.ip[15].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p15_qs)
-  );
-
-
-  // F[p16]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[16].de),
-    .d      (hw2reg.ip[16].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p16_qs)
-  );
-
-
-  // F[p17]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[17].de),
-    .d      (hw2reg.ip[17].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p17_qs)
-  );
-
-
-  // F[p18]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[18].de),
-    .d      (hw2reg.ip[18].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p18_qs)
-  );
-
-
-  // F[p19]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[19].de),
-    .d      (hw2reg.ip[19].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p19_qs)
-  );
-
-
-  // F[p20]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[20].de),
-    .d      (hw2reg.ip[20].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p20_qs)
-  );
-
-
-  // F[p21]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[21].de),
-    .d      (hw2reg.ip[21].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p21_qs)
-  );
-
-
-  // F[p22]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[22].de),
-    .d      (hw2reg.ip[22].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p22_qs)
-  );
-
-
-  // F[p23]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[23].de),
-    .d      (hw2reg.ip[23].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p23_qs)
-  );
-
-
-  // F[p24]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[24].de),
-    .d      (hw2reg.ip[24].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p24_qs)
-  );
-
-
-  // F[p25]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[25].de),
-    .d      (hw2reg.ip[25].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p25_qs)
-  );
-
-
-  // F[p26]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[26].de),
-    .d      (hw2reg.ip[26].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p26_qs)
-  );
-
-
-  // F[p27]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[27].de),
-    .d      (hw2reg.ip[27].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p27_qs)
-  );
-
-
-  // F[p28]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[28].de),
-    .d      (hw2reg.ip[28].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p28_qs)
-  );
-
-
-  // F[p29]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[29].de),
-    .d      (hw2reg.ip[29].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p29_qs)
-  );
-
-
-  // F[p30]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[30].de),
-    .d      (hw2reg.ip[30].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p30_qs)
-  );
-
-
-  // F[p31]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip0_p31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[31].de),
-    .d      (hw2reg.ip[31].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip0_p31_qs)
-  );
-
-
-  // Subregister 32 of Multireg ip
-  // R[ip1]: V(False)
-
-  // F[p32]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[32].de),
-    .d      (hw2reg.ip[32].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p32_qs)
-  );
-
-
-  // F[p33]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[33].de),
-    .d      (hw2reg.ip[33].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p33_qs)
-  );
-
-
-  // F[p34]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[34].de),
-    .d      (hw2reg.ip[34].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p34_qs)
-  );
-
-
-  // F[p35]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[35].de),
-    .d      (hw2reg.ip[35].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p35_qs)
-  );
-
-
-  // F[p36]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[36].de),
-    .d      (hw2reg.ip[36].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p36_qs)
-  );
-
-
-  // F[p37]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[37].de),
-    .d      (hw2reg.ip[37].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p37_qs)
-  );
-
-
-  // F[p38]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[38].de),
-    .d      (hw2reg.ip[38].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p38_qs)
-  );
-
-
-  // F[p39]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[39].de),
-    .d      (hw2reg.ip[39].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p39_qs)
-  );
-
-
-  // F[p40]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[40].de),
-    .d      (hw2reg.ip[40].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p40_qs)
-  );
-
-
-  // F[p41]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[41].de),
-    .d      (hw2reg.ip[41].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p41_qs)
-  );
-
-
-  // F[p42]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[42].de),
-    .d      (hw2reg.ip[42].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p42_qs)
-  );
-
-
-  // F[p43]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[43].de),
-    .d      (hw2reg.ip[43].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p43_qs)
-  );
-
-
-  // F[p44]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[44].de),
-    .d      (hw2reg.ip[44].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p44_qs)
-  );
-
-
-  // F[p45]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[45].de),
-    .d      (hw2reg.ip[45].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p45_qs)
-  );
-
-
-  // F[p46]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[46].de),
-    .d      (hw2reg.ip[46].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p46_qs)
-  );
-
-
-  // F[p47]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[47].de),
-    .d      (hw2reg.ip[47].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p47_qs)
-  );
-
-
-  // F[p48]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[48].de),
-    .d      (hw2reg.ip[48].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p48_qs)
-  );
-
-
-  // F[p49]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[49].de),
-    .d      (hw2reg.ip[49].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p49_qs)
-  );
-
-
-  // F[p50]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[50].de),
-    .d      (hw2reg.ip[50].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p50_qs)
-  );
-
-
-  // F[p51]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[51].de),
-    .d      (hw2reg.ip[51].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p51_qs)
-  );
-
-
-  // F[p52]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[52].de),
-    .d      (hw2reg.ip[52].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p52_qs)
-  );
-
-
-  // F[p53]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[53].de),
-    .d      (hw2reg.ip[53].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p53_qs)
-  );
-
-
-  // F[p54]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[54].de),
-    .d      (hw2reg.ip[54].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p54_qs)
-  );
-
-
-  // F[p55]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[55].de),
-    .d      (hw2reg.ip[55].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p55_qs)
-  );
-
-
-  // F[p56]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[56].de),
-    .d      (hw2reg.ip[56].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p56_qs)
-  );
-
-
-  // F[p57]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[57].de),
-    .d      (hw2reg.ip[57].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p57_qs)
-  );
-
-
-  // F[p58]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[58].de),
-    .d      (hw2reg.ip[58].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p58_qs)
-  );
-
-
-  // F[p59]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[59].de),
-    .d      (hw2reg.ip[59].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p59_qs)
-  );
-
-
-  // F[p60]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[60].de),
-    .d      (hw2reg.ip[60].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p60_qs)
-  );
-
-
-  // F[p61]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[61].de),
-    .d      (hw2reg.ip[61].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p61_qs)
-  );
-
-
-  // F[p62]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[62].de),
-    .d      (hw2reg.ip[62].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p62_qs)
-  );
-
-
-  // F[p63]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip1_p63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[63].de),
-    .d      (hw2reg.ip[63].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip1_p63_qs)
-  );
-
-
-  // Subregister 64 of Multireg ip
-  // R[ip2]: V(False)
-
-  // F[p64]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[64].de),
-    .d      (hw2reg.ip[64].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p64_qs)
-  );
-
-
-  // F[p65]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[65].de),
-    .d      (hw2reg.ip[65].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p65_qs)
-  );
-
-
-  // F[p66]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[66].de),
-    .d      (hw2reg.ip[66].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p66_qs)
-  );
-
-
-  // F[p67]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[67].de),
-    .d      (hw2reg.ip[67].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p67_qs)
-  );
-
-
-  // F[p68]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[68].de),
-    .d      (hw2reg.ip[68].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p68_qs)
-  );
-
-
-  // F[p69]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[69].de),
-    .d      (hw2reg.ip[69].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p69_qs)
-  );
-
-
-  // F[p70]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[70].de),
-    .d      (hw2reg.ip[70].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p70_qs)
-  );
-
-
-  // F[p71]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[71].de),
-    .d      (hw2reg.ip[71].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p71_qs)
-  );
-
-
-  // F[p72]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[72].de),
-    .d      (hw2reg.ip[72].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p72_qs)
-  );
-
-
-  // F[p73]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[73].de),
-    .d      (hw2reg.ip[73].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p73_qs)
-  );
-
-
-  // F[p74]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[74].de),
-    .d      (hw2reg.ip[74].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p74_qs)
-  );
-
-
-  // F[p75]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[75].de),
-    .d      (hw2reg.ip[75].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p75_qs)
-  );
-
-
-  // F[p76]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[76].de),
-    .d      (hw2reg.ip[76].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p76_qs)
-  );
-
-
-  // F[p77]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[77].de),
-    .d      (hw2reg.ip[77].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p77_qs)
-  );
-
-
-  // F[p78]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[78].de),
-    .d      (hw2reg.ip[78].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p78_qs)
-  );
-
-
-  // F[p79]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[79].de),
-    .d      (hw2reg.ip[79].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p79_qs)
-  );
-
-
-  // F[p80]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[80].de),
-    .d      (hw2reg.ip[80].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p80_qs)
-  );
-
-
-  // F[p81]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[81].de),
-    .d      (hw2reg.ip[81].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p81_qs)
-  );
-
-
-  // F[p82]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RO"),
-    .RESVAL  (1'h0)
-  ) u_ip2_p82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    .we     (1'b0),
-    .wd     ('0  ),
-
-    // from internal hardware
-    .de     (hw2reg.ip[82].de),
-    .d      (hw2reg.ip[82].d ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (),
-
-    // to register interface (read)
-    .qs     (ip2_p82_qs)
-  );
-
-
-
-
-  // Subregister 0 of Multireg le
-  // R[le0]: V(False)
-
-  // F[le0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le0_we),
-    .wd     (le0_le0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[0].q ),
-
-    // to register interface (read)
-    .qs     (le0_le0_qs)
-  );
-
-
-  // F[le1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le1_we),
-    .wd     (le0_le1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[1].q ),
-
-    // to register interface (read)
-    .qs     (le0_le1_qs)
-  );
-
-
-  // F[le2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le2_we),
-    .wd     (le0_le2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[2].q ),
-
-    // to register interface (read)
-    .qs     (le0_le2_qs)
-  );
-
-
-  // F[le3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le3_we),
-    .wd     (le0_le3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[3].q ),
-
-    // to register interface (read)
-    .qs     (le0_le3_qs)
-  );
-
-
-  // F[le4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le4_we),
-    .wd     (le0_le4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[4].q ),
-
-    // to register interface (read)
-    .qs     (le0_le4_qs)
-  );
-
-
-  // F[le5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le5_we),
-    .wd     (le0_le5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[5].q ),
-
-    // to register interface (read)
-    .qs     (le0_le5_qs)
-  );
-
-
-  // F[le6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le6_we),
-    .wd     (le0_le6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[6].q ),
-
-    // to register interface (read)
-    .qs     (le0_le6_qs)
-  );
-
-
-  // F[le7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le7_we),
-    .wd     (le0_le7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[7].q ),
-
-    // to register interface (read)
-    .qs     (le0_le7_qs)
-  );
-
-
-  // F[le8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le8_we),
-    .wd     (le0_le8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[8].q ),
-
-    // to register interface (read)
-    .qs     (le0_le8_qs)
-  );
-
-
-  // F[le9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le9_we),
-    .wd     (le0_le9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[9].q ),
-
-    // to register interface (read)
-    .qs     (le0_le9_qs)
-  );
-
-
-  // F[le10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le10_we),
-    .wd     (le0_le10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[10].q ),
-
-    // to register interface (read)
-    .qs     (le0_le10_qs)
-  );
-
-
-  // F[le11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le11_we),
-    .wd     (le0_le11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[11].q ),
-
-    // to register interface (read)
-    .qs     (le0_le11_qs)
-  );
-
-
-  // F[le12]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le12_we),
-    .wd     (le0_le12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[12].q ),
-
-    // to register interface (read)
-    .qs     (le0_le12_qs)
-  );
-
-
-  // F[le13]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le13_we),
-    .wd     (le0_le13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[13].q ),
-
-    // to register interface (read)
-    .qs     (le0_le13_qs)
-  );
-
-
-  // F[le14]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le14_we),
-    .wd     (le0_le14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[14].q ),
-
-    // to register interface (read)
-    .qs     (le0_le14_qs)
-  );
-
-
-  // F[le15]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le15_we),
-    .wd     (le0_le15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[15].q ),
-
-    // to register interface (read)
-    .qs     (le0_le15_qs)
-  );
-
-
-  // F[le16]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le16_we),
-    .wd     (le0_le16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[16].q ),
-
-    // to register interface (read)
-    .qs     (le0_le16_qs)
-  );
-
-
-  // F[le17]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le17_we),
-    .wd     (le0_le17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[17].q ),
-
-    // to register interface (read)
-    .qs     (le0_le17_qs)
-  );
-
-
-  // F[le18]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le18_we),
-    .wd     (le0_le18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[18].q ),
-
-    // to register interface (read)
-    .qs     (le0_le18_qs)
-  );
-
-
-  // F[le19]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le19_we),
-    .wd     (le0_le19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[19].q ),
-
-    // to register interface (read)
-    .qs     (le0_le19_qs)
-  );
-
-
-  // F[le20]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le20_we),
-    .wd     (le0_le20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[20].q ),
-
-    // to register interface (read)
-    .qs     (le0_le20_qs)
-  );
-
-
-  // F[le21]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le21_we),
-    .wd     (le0_le21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[21].q ),
-
-    // to register interface (read)
-    .qs     (le0_le21_qs)
-  );
-
-
-  // F[le22]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le22_we),
-    .wd     (le0_le22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[22].q ),
-
-    // to register interface (read)
-    .qs     (le0_le22_qs)
-  );
-
-
-  // F[le23]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le23_we),
-    .wd     (le0_le23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[23].q ),
-
-    // to register interface (read)
-    .qs     (le0_le23_qs)
-  );
-
-
-  // F[le24]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le24_we),
-    .wd     (le0_le24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[24].q ),
-
-    // to register interface (read)
-    .qs     (le0_le24_qs)
-  );
-
-
-  // F[le25]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le25_we),
-    .wd     (le0_le25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[25].q ),
-
-    // to register interface (read)
-    .qs     (le0_le25_qs)
-  );
-
-
-  // F[le26]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le26_we),
-    .wd     (le0_le26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[26].q ),
-
-    // to register interface (read)
-    .qs     (le0_le26_qs)
-  );
-
-
-  // F[le27]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le27_we),
-    .wd     (le0_le27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[27].q ),
-
-    // to register interface (read)
-    .qs     (le0_le27_qs)
-  );
-
-
-  // F[le28]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le28_we),
-    .wd     (le0_le28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[28].q ),
-
-    // to register interface (read)
-    .qs     (le0_le28_qs)
-  );
-
-
-  // F[le29]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le29_we),
-    .wd     (le0_le29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[29].q ),
-
-    // to register interface (read)
-    .qs     (le0_le29_qs)
-  );
-
-
-  // F[le30]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le30_we),
-    .wd     (le0_le30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[30].q ),
-
-    // to register interface (read)
-    .qs     (le0_le30_qs)
-  );
-
-
-  // F[le31]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le0_le31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le0_le31_we),
-    .wd     (le0_le31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[31].q ),
-
-    // to register interface (read)
-    .qs     (le0_le31_qs)
-  );
-
-
-  // Subregister 32 of Multireg le
-  // R[le1]: V(False)
-
-  // F[le32]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le32_we),
-    .wd     (le1_le32_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[32].q ),
-
-    // to register interface (read)
-    .qs     (le1_le32_qs)
-  );
-
-
-  // F[le33]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le33_we),
-    .wd     (le1_le33_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[33].q ),
-
-    // to register interface (read)
-    .qs     (le1_le33_qs)
-  );
-
-
-  // F[le34]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le34_we),
-    .wd     (le1_le34_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[34].q ),
-
-    // to register interface (read)
-    .qs     (le1_le34_qs)
-  );
-
-
-  // F[le35]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le35_we),
-    .wd     (le1_le35_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[35].q ),
-
-    // to register interface (read)
-    .qs     (le1_le35_qs)
-  );
-
-
-  // F[le36]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le36_we),
-    .wd     (le1_le36_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[36].q ),
-
-    // to register interface (read)
-    .qs     (le1_le36_qs)
-  );
-
-
-  // F[le37]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le37_we),
-    .wd     (le1_le37_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[37].q ),
-
-    // to register interface (read)
-    .qs     (le1_le37_qs)
-  );
-
-
-  // F[le38]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le38_we),
-    .wd     (le1_le38_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[38].q ),
-
-    // to register interface (read)
-    .qs     (le1_le38_qs)
-  );
-
-
-  // F[le39]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le39_we),
-    .wd     (le1_le39_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[39].q ),
-
-    // to register interface (read)
-    .qs     (le1_le39_qs)
-  );
-
-
-  // F[le40]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le40_we),
-    .wd     (le1_le40_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[40].q ),
-
-    // to register interface (read)
-    .qs     (le1_le40_qs)
-  );
-
-
-  // F[le41]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le41_we),
-    .wd     (le1_le41_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[41].q ),
-
-    // to register interface (read)
-    .qs     (le1_le41_qs)
-  );
-
-
-  // F[le42]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le42_we),
-    .wd     (le1_le42_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[42].q ),
-
-    // to register interface (read)
-    .qs     (le1_le42_qs)
-  );
-
-
-  // F[le43]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le43_we),
-    .wd     (le1_le43_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[43].q ),
-
-    // to register interface (read)
-    .qs     (le1_le43_qs)
-  );
-
-
-  // F[le44]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le44_we),
-    .wd     (le1_le44_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[44].q ),
-
-    // to register interface (read)
-    .qs     (le1_le44_qs)
-  );
-
-
-  // F[le45]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le45_we),
-    .wd     (le1_le45_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[45].q ),
-
-    // to register interface (read)
-    .qs     (le1_le45_qs)
-  );
-
-
-  // F[le46]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le46_we),
-    .wd     (le1_le46_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[46].q ),
-
-    // to register interface (read)
-    .qs     (le1_le46_qs)
-  );
-
-
-  // F[le47]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le47_we),
-    .wd     (le1_le47_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[47].q ),
-
-    // to register interface (read)
-    .qs     (le1_le47_qs)
-  );
-
-
-  // F[le48]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le48_we),
-    .wd     (le1_le48_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[48].q ),
-
-    // to register interface (read)
-    .qs     (le1_le48_qs)
-  );
-
-
-  // F[le49]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le49_we),
-    .wd     (le1_le49_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[49].q ),
-
-    // to register interface (read)
-    .qs     (le1_le49_qs)
-  );
-
-
-  // F[le50]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le50_we),
-    .wd     (le1_le50_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[50].q ),
-
-    // to register interface (read)
-    .qs     (le1_le50_qs)
-  );
-
-
-  // F[le51]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le51_we),
-    .wd     (le1_le51_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[51].q ),
-
-    // to register interface (read)
-    .qs     (le1_le51_qs)
-  );
-
-
-  // F[le52]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le52_we),
-    .wd     (le1_le52_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[52].q ),
-
-    // to register interface (read)
-    .qs     (le1_le52_qs)
-  );
-
-
-  // F[le53]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le53_we),
-    .wd     (le1_le53_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[53].q ),
-
-    // to register interface (read)
-    .qs     (le1_le53_qs)
-  );
-
-
-  // F[le54]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le54_we),
-    .wd     (le1_le54_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[54].q ),
-
-    // to register interface (read)
-    .qs     (le1_le54_qs)
-  );
-
-
-  // F[le55]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le55_we),
-    .wd     (le1_le55_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[55].q ),
-
-    // to register interface (read)
-    .qs     (le1_le55_qs)
-  );
-
-
-  // F[le56]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le56_we),
-    .wd     (le1_le56_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[56].q ),
-
-    // to register interface (read)
-    .qs     (le1_le56_qs)
-  );
-
-
-  // F[le57]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le57_we),
-    .wd     (le1_le57_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[57].q ),
-
-    // to register interface (read)
-    .qs     (le1_le57_qs)
-  );
-
-
-  // F[le58]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le58_we),
-    .wd     (le1_le58_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[58].q ),
-
-    // to register interface (read)
-    .qs     (le1_le58_qs)
-  );
-
-
-  // F[le59]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le59_we),
-    .wd     (le1_le59_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[59].q ),
-
-    // to register interface (read)
-    .qs     (le1_le59_qs)
-  );
-
-
-  // F[le60]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le60_we),
-    .wd     (le1_le60_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[60].q ),
-
-    // to register interface (read)
-    .qs     (le1_le60_qs)
-  );
-
-
-  // F[le61]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le61_we),
-    .wd     (le1_le61_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[61].q ),
-
-    // to register interface (read)
-    .qs     (le1_le61_qs)
-  );
-
-
-  // F[le62]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le62_we),
-    .wd     (le1_le62_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[62].q ),
-
-    // to register interface (read)
-    .qs     (le1_le62_qs)
-  );
-
-
-  // F[le63]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le1_le63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le1_le63_we),
-    .wd     (le1_le63_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[63].q ),
-
-    // to register interface (read)
-    .qs     (le1_le63_qs)
-  );
-
-
-  // Subregister 64 of Multireg le
-  // R[le2]: V(False)
-
-  // F[le64]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le64_we),
-    .wd     (le2_le64_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[64].q ),
-
-    // to register interface (read)
-    .qs     (le2_le64_qs)
-  );
-
-
-  // F[le65]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le65_we),
-    .wd     (le2_le65_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[65].q ),
-
-    // to register interface (read)
-    .qs     (le2_le65_qs)
-  );
-
-
-  // F[le66]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le66_we),
-    .wd     (le2_le66_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[66].q ),
-
-    // to register interface (read)
-    .qs     (le2_le66_qs)
-  );
-
-
-  // F[le67]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le67_we),
-    .wd     (le2_le67_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[67].q ),
-
-    // to register interface (read)
-    .qs     (le2_le67_qs)
-  );
-
-
-  // F[le68]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le68_we),
-    .wd     (le2_le68_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[68].q ),
-
-    // to register interface (read)
-    .qs     (le2_le68_qs)
-  );
-
-
-  // F[le69]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le69_we),
-    .wd     (le2_le69_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[69].q ),
-
-    // to register interface (read)
-    .qs     (le2_le69_qs)
-  );
-
-
-  // F[le70]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le70_we),
-    .wd     (le2_le70_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[70].q ),
-
-    // to register interface (read)
-    .qs     (le2_le70_qs)
-  );
-
-
-  // F[le71]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le71_we),
-    .wd     (le2_le71_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[71].q ),
-
-    // to register interface (read)
-    .qs     (le2_le71_qs)
-  );
-
-
-  // F[le72]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le72_we),
-    .wd     (le2_le72_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[72].q ),
-
-    // to register interface (read)
-    .qs     (le2_le72_qs)
-  );
-
-
-  // F[le73]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le73_we),
-    .wd     (le2_le73_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[73].q ),
-
-    // to register interface (read)
-    .qs     (le2_le73_qs)
-  );
-
-
-  // F[le74]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le74_we),
-    .wd     (le2_le74_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[74].q ),
-
-    // to register interface (read)
-    .qs     (le2_le74_qs)
-  );
-
-
-  // F[le75]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le75_we),
-    .wd     (le2_le75_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[75].q ),
-
-    // to register interface (read)
-    .qs     (le2_le75_qs)
-  );
-
-
-  // F[le76]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le76_we),
-    .wd     (le2_le76_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[76].q ),
-
-    // to register interface (read)
-    .qs     (le2_le76_qs)
-  );
-
-
-  // F[le77]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le77_we),
-    .wd     (le2_le77_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[77].q ),
-
-    // to register interface (read)
-    .qs     (le2_le77_qs)
-  );
-
-
-  // F[le78]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le78_we),
-    .wd     (le2_le78_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[78].q ),
-
-    // to register interface (read)
-    .qs     (le2_le78_qs)
-  );
-
-
-  // F[le79]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le79_we),
-    .wd     (le2_le79_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[79].q ),
-
-    // to register interface (read)
-    .qs     (le2_le79_qs)
-  );
-
-
-  // F[le80]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le80_we),
-    .wd     (le2_le80_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[80].q ),
-
-    // to register interface (read)
-    .qs     (le2_le80_qs)
-  );
-
-
-  // F[le81]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le81_we),
-    .wd     (le2_le81_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[81].q ),
-
-    // to register interface (read)
-    .qs     (le2_le81_qs)
-  );
-
-
-  // F[le82]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_le2_le82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (le2_le82_we),
-    .wd     (le2_le82_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.le[82].q ),
-
-    // to register interface (read)
-    .qs     (le2_le82_qs)
-  );
-
-
-
-  // R[prio0]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio0_we),
-    .wd     (prio0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio0.q ),
-
-    // to register interface (read)
-    .qs     (prio0_qs)
-  );
-
-
-  // R[prio1]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio1_we),
-    .wd     (prio1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio1.q ),
-
-    // to register interface (read)
-    .qs     (prio1_qs)
-  );
-
-
-  // R[prio2]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio2_we),
-    .wd     (prio2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio2.q ),
-
-    // to register interface (read)
-    .qs     (prio2_qs)
-  );
-
-
-  // R[prio3]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio3_we),
-    .wd     (prio3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio3.q ),
-
-    // to register interface (read)
-    .qs     (prio3_qs)
-  );
-
-
-  // R[prio4]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio4_we),
-    .wd     (prio4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio4.q ),
-
-    // to register interface (read)
-    .qs     (prio4_qs)
-  );
-
-
-  // R[prio5]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio5_we),
-    .wd     (prio5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio5.q ),
-
-    // to register interface (read)
-    .qs     (prio5_qs)
-  );
-
-
-  // R[prio6]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio6_we),
-    .wd     (prio6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio6.q ),
-
-    // to register interface (read)
-    .qs     (prio6_qs)
-  );
-
-
-  // R[prio7]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio7_we),
-    .wd     (prio7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio7.q ),
-
-    // to register interface (read)
-    .qs     (prio7_qs)
-  );
-
-
-  // R[prio8]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio8_we),
-    .wd     (prio8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio8.q ),
-
-    // to register interface (read)
-    .qs     (prio8_qs)
-  );
-
-
-  // R[prio9]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio9_we),
-    .wd     (prio9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio9.q ),
-
-    // to register interface (read)
-    .qs     (prio9_qs)
-  );
-
-
-  // R[prio10]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio10_we),
-    .wd     (prio10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio10.q ),
-
-    // to register interface (read)
-    .qs     (prio10_qs)
-  );
-
-
-  // R[prio11]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio11_we),
-    .wd     (prio11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio11.q ),
-
-    // to register interface (read)
-    .qs     (prio11_qs)
-  );
-
-
-  // R[prio12]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio12_we),
-    .wd     (prio12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio12.q ),
-
-    // to register interface (read)
-    .qs     (prio12_qs)
-  );
-
-
-  // R[prio13]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio13_we),
-    .wd     (prio13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio13.q ),
-
-    // to register interface (read)
-    .qs     (prio13_qs)
-  );
-
-
-  // R[prio14]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio14_we),
-    .wd     (prio14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio14.q ),
-
-    // to register interface (read)
-    .qs     (prio14_qs)
-  );
-
-
-  // R[prio15]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio15_we),
-    .wd     (prio15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio15.q ),
-
-    // to register interface (read)
-    .qs     (prio15_qs)
-  );
-
-
-  // R[prio16]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio16_we),
-    .wd     (prio16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio16.q ),
-
-    // to register interface (read)
-    .qs     (prio16_qs)
-  );
-
-
-  // R[prio17]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio17_we),
-    .wd     (prio17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio17.q ),
-
-    // to register interface (read)
-    .qs     (prio17_qs)
-  );
-
-
-  // R[prio18]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio18_we),
-    .wd     (prio18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio18.q ),
-
-    // to register interface (read)
-    .qs     (prio18_qs)
-  );
-
-
-  // R[prio19]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio19_we),
-    .wd     (prio19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio19.q ),
-
-    // to register interface (read)
-    .qs     (prio19_qs)
-  );
-
-
-  // R[prio20]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio20_we),
-    .wd     (prio20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio20.q ),
-
-    // to register interface (read)
-    .qs     (prio20_qs)
-  );
-
-
-  // R[prio21]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio21_we),
-    .wd     (prio21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio21.q ),
-
-    // to register interface (read)
-    .qs     (prio21_qs)
-  );
-
-
-  // R[prio22]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio22_we),
-    .wd     (prio22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio22.q ),
-
-    // to register interface (read)
-    .qs     (prio22_qs)
-  );
-
-
-  // R[prio23]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio23_we),
-    .wd     (prio23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio23.q ),
-
-    // to register interface (read)
-    .qs     (prio23_qs)
-  );
-
-
-  // R[prio24]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio24_we),
-    .wd     (prio24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio24.q ),
-
-    // to register interface (read)
-    .qs     (prio24_qs)
-  );
-
-
-  // R[prio25]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio25_we),
-    .wd     (prio25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio25.q ),
-
-    // to register interface (read)
-    .qs     (prio25_qs)
-  );
-
-
-  // R[prio26]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio26_we),
-    .wd     (prio26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio26.q ),
-
-    // to register interface (read)
-    .qs     (prio26_qs)
-  );
-
-
-  // R[prio27]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio27_we),
-    .wd     (prio27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio27.q ),
-
-    // to register interface (read)
-    .qs     (prio27_qs)
-  );
-
-
-  // R[prio28]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio28_we),
-    .wd     (prio28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio28.q ),
-
-    // to register interface (read)
-    .qs     (prio28_qs)
-  );
-
-
-  // R[prio29]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio29_we),
-    .wd     (prio29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio29.q ),
-
-    // to register interface (read)
-    .qs     (prio29_qs)
-  );
-
-
-  // R[prio30]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio30_we),
-    .wd     (prio30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio30.q ),
-
-    // to register interface (read)
-    .qs     (prio30_qs)
-  );
-
-
-  // R[prio31]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio31_we),
-    .wd     (prio31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio31.q ),
-
-    // to register interface (read)
-    .qs     (prio31_qs)
-  );
-
-
-  // R[prio32]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio32_we),
-    .wd     (prio32_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio32.q ),
-
-    // to register interface (read)
-    .qs     (prio32_qs)
-  );
-
-
-  // R[prio33]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio33_we),
-    .wd     (prio33_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio33.q ),
-
-    // to register interface (read)
-    .qs     (prio33_qs)
-  );
-
-
-  // R[prio34]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio34_we),
-    .wd     (prio34_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio34.q ),
-
-    // to register interface (read)
-    .qs     (prio34_qs)
-  );
-
-
-  // R[prio35]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio35_we),
-    .wd     (prio35_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio35.q ),
-
-    // to register interface (read)
-    .qs     (prio35_qs)
-  );
-
-
-  // R[prio36]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio36_we),
-    .wd     (prio36_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio36.q ),
-
-    // to register interface (read)
-    .qs     (prio36_qs)
-  );
-
-
-  // R[prio37]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio37_we),
-    .wd     (prio37_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio37.q ),
-
-    // to register interface (read)
-    .qs     (prio37_qs)
-  );
-
-
-  // R[prio38]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio38_we),
-    .wd     (prio38_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio38.q ),
-
-    // to register interface (read)
-    .qs     (prio38_qs)
-  );
-
-
-  // R[prio39]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio39_we),
-    .wd     (prio39_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio39.q ),
-
-    // to register interface (read)
-    .qs     (prio39_qs)
-  );
-
-
-  // R[prio40]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio40_we),
-    .wd     (prio40_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio40.q ),
-
-    // to register interface (read)
-    .qs     (prio40_qs)
-  );
-
-
-  // R[prio41]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio41_we),
-    .wd     (prio41_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio41.q ),
-
-    // to register interface (read)
-    .qs     (prio41_qs)
-  );
-
-
-  // R[prio42]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio42_we),
-    .wd     (prio42_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio42.q ),
-
-    // to register interface (read)
-    .qs     (prio42_qs)
-  );
-
-
-  // R[prio43]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio43_we),
-    .wd     (prio43_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio43.q ),
-
-    // to register interface (read)
-    .qs     (prio43_qs)
-  );
-
-
-  // R[prio44]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio44_we),
-    .wd     (prio44_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio44.q ),
-
-    // to register interface (read)
-    .qs     (prio44_qs)
-  );
-
-
-  // R[prio45]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio45_we),
-    .wd     (prio45_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio45.q ),
-
-    // to register interface (read)
-    .qs     (prio45_qs)
-  );
-
-
-  // R[prio46]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio46_we),
-    .wd     (prio46_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio46.q ),
-
-    // to register interface (read)
-    .qs     (prio46_qs)
-  );
-
-
-  // R[prio47]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio47_we),
-    .wd     (prio47_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio47.q ),
-
-    // to register interface (read)
-    .qs     (prio47_qs)
-  );
-
-
-  // R[prio48]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio48_we),
-    .wd     (prio48_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio48.q ),
-
-    // to register interface (read)
-    .qs     (prio48_qs)
-  );
-
-
-  // R[prio49]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio49_we),
-    .wd     (prio49_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio49.q ),
-
-    // to register interface (read)
-    .qs     (prio49_qs)
-  );
-
-
-  // R[prio50]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio50_we),
-    .wd     (prio50_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio50.q ),
-
-    // to register interface (read)
-    .qs     (prio50_qs)
-  );
-
-
-  // R[prio51]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio51_we),
-    .wd     (prio51_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio51.q ),
-
-    // to register interface (read)
-    .qs     (prio51_qs)
-  );
-
-
-  // R[prio52]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio52_we),
-    .wd     (prio52_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio52.q ),
-
-    // to register interface (read)
-    .qs     (prio52_qs)
-  );
-
-
-  // R[prio53]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio53_we),
-    .wd     (prio53_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio53.q ),
-
-    // to register interface (read)
-    .qs     (prio53_qs)
-  );
-
-
-  // R[prio54]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio54_we),
-    .wd     (prio54_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio54.q ),
-
-    // to register interface (read)
-    .qs     (prio54_qs)
-  );
-
-
-  // R[prio55]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio55_we),
-    .wd     (prio55_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio55.q ),
-
-    // to register interface (read)
-    .qs     (prio55_qs)
-  );
-
-
-  // R[prio56]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio56_we),
-    .wd     (prio56_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio56.q ),
-
-    // to register interface (read)
-    .qs     (prio56_qs)
-  );
-
-
-  // R[prio57]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio57_we),
-    .wd     (prio57_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio57.q ),
-
-    // to register interface (read)
-    .qs     (prio57_qs)
-  );
-
-
-  // R[prio58]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio58_we),
-    .wd     (prio58_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio58.q ),
-
-    // to register interface (read)
-    .qs     (prio58_qs)
-  );
-
-
-  // R[prio59]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio59_we),
-    .wd     (prio59_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio59.q ),
-
-    // to register interface (read)
-    .qs     (prio59_qs)
-  );
-
-
-  // R[prio60]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio60_we),
-    .wd     (prio60_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio60.q ),
-
-    // to register interface (read)
-    .qs     (prio60_qs)
-  );
-
-
-  // R[prio61]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio61_we),
-    .wd     (prio61_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio61.q ),
-
-    // to register interface (read)
-    .qs     (prio61_qs)
-  );
-
-
-  // R[prio62]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio62_we),
-    .wd     (prio62_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio62.q ),
-
-    // to register interface (read)
-    .qs     (prio62_qs)
-  );
-
-
-  // R[prio63]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio63_we),
-    .wd     (prio63_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio63.q ),
-
-    // to register interface (read)
-    .qs     (prio63_qs)
-  );
-
-
-  // R[prio64]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio64_we),
-    .wd     (prio64_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio64.q ),
-
-    // to register interface (read)
-    .qs     (prio64_qs)
-  );
-
-
-  // R[prio65]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio65_we),
-    .wd     (prio65_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio65.q ),
-
-    // to register interface (read)
-    .qs     (prio65_qs)
-  );
-
-
-  // R[prio66]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio66_we),
-    .wd     (prio66_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio66.q ),
-
-    // to register interface (read)
-    .qs     (prio66_qs)
-  );
-
-
-  // R[prio67]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio67_we),
-    .wd     (prio67_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio67.q ),
-
-    // to register interface (read)
-    .qs     (prio67_qs)
-  );
-
-
-  // R[prio68]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio68_we),
-    .wd     (prio68_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio68.q ),
-
-    // to register interface (read)
-    .qs     (prio68_qs)
-  );
-
-
-  // R[prio69]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio69_we),
-    .wd     (prio69_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio69.q ),
-
-    // to register interface (read)
-    .qs     (prio69_qs)
-  );
-
-
-  // R[prio70]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio70_we),
-    .wd     (prio70_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio70.q ),
-
-    // to register interface (read)
-    .qs     (prio70_qs)
-  );
-
-
-  // R[prio71]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio71_we),
-    .wd     (prio71_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio71.q ),
-
-    // to register interface (read)
-    .qs     (prio71_qs)
-  );
-
-
-  // R[prio72]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio72_we),
-    .wd     (prio72_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio72.q ),
-
-    // to register interface (read)
-    .qs     (prio72_qs)
-  );
-
-
-  // R[prio73]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio73_we),
-    .wd     (prio73_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio73.q ),
-
-    // to register interface (read)
-    .qs     (prio73_qs)
-  );
-
-
-  // R[prio74]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio74_we),
-    .wd     (prio74_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio74.q ),
-
-    // to register interface (read)
-    .qs     (prio74_qs)
-  );
-
-
-  // R[prio75]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio75_we),
-    .wd     (prio75_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio75.q ),
-
-    // to register interface (read)
-    .qs     (prio75_qs)
-  );
-
-
-  // R[prio76]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio76_we),
-    .wd     (prio76_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio76.q ),
-
-    // to register interface (read)
-    .qs     (prio76_qs)
-  );
-
-
-  // R[prio77]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio77_we),
-    .wd     (prio77_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio77.q ),
-
-    // to register interface (read)
-    .qs     (prio77_qs)
-  );
-
-
-  // R[prio78]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio78_we),
-    .wd     (prio78_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio78.q ),
-
-    // to register interface (read)
-    .qs     (prio78_qs)
-  );
-
-
-  // R[prio79]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio79_we),
-    .wd     (prio79_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio79.q ),
-
-    // to register interface (read)
-    .qs     (prio79_qs)
-  );
-
-
-  // R[prio80]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio80_we),
-    .wd     (prio80_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio80.q ),
-
-    // to register interface (read)
-    .qs     (prio80_qs)
-  );
-
-
-  // R[prio81]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio81_we),
-    .wd     (prio81_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio81.q ),
-
-    // to register interface (read)
-    .qs     (prio81_qs)
-  );
-
-
-  // R[prio82]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_prio82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (prio82_we),
-    .wd     (prio82_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.prio82.q ),
-
-    // to register interface (read)
-    .qs     (prio82_qs)
-  );
-
-
-
-  // Subregister 0 of Multireg ie0
-  // R[ie00]: V(False)
-
-  // F[e0]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e0_we),
-    .wd     (ie00_e0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[0].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e0_qs)
-  );
-
-
-  // F[e1]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e1 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e1_we),
-    .wd     (ie00_e1_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[1].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e1_qs)
-  );
-
-
-  // F[e2]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e2 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e2_we),
-    .wd     (ie00_e2_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[2].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e2_qs)
-  );
-
-
-  // F[e3]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e3 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e3_we),
-    .wd     (ie00_e3_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[3].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e3_qs)
-  );
-
-
-  // F[e4]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e4 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e4_we),
-    .wd     (ie00_e4_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[4].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e4_qs)
-  );
-
-
-  // F[e5]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e5 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e5_we),
-    .wd     (ie00_e5_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[5].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e5_qs)
-  );
-
-
-  // F[e6]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e6 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e6_we),
-    .wd     (ie00_e6_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[6].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e6_qs)
-  );
-
-
-  // F[e7]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e7 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e7_we),
-    .wd     (ie00_e7_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[7].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e7_qs)
-  );
-
-
-  // F[e8]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e8 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e8_we),
-    .wd     (ie00_e8_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[8].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e8_qs)
-  );
-
-
-  // F[e9]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e9 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e9_we),
-    .wd     (ie00_e9_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[9].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e9_qs)
-  );
-
-
-  // F[e10]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e10 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e10_we),
-    .wd     (ie00_e10_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[10].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e10_qs)
-  );
-
-
-  // F[e11]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e11 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e11_we),
-    .wd     (ie00_e11_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[11].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e11_qs)
-  );
-
-
-  // F[e12]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e12 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e12_we),
-    .wd     (ie00_e12_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[12].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e12_qs)
-  );
-
-
-  // F[e13]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e13 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e13_we),
-    .wd     (ie00_e13_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[13].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e13_qs)
-  );
-
-
-  // F[e14]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e14 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e14_we),
-    .wd     (ie00_e14_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[14].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e14_qs)
-  );
-
-
-  // F[e15]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e15 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e15_we),
-    .wd     (ie00_e15_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[15].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e15_qs)
-  );
-
-
-  // F[e16]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e16 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e16_we),
-    .wd     (ie00_e16_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[16].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e16_qs)
-  );
-
-
-  // F[e17]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e17 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e17_we),
-    .wd     (ie00_e17_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[17].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e17_qs)
-  );
-
-
-  // F[e18]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e18 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e18_we),
-    .wd     (ie00_e18_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[18].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e18_qs)
-  );
-
-
-  // F[e19]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e19 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e19_we),
-    .wd     (ie00_e19_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[19].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e19_qs)
-  );
-
-
-  // F[e20]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e20 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e20_we),
-    .wd     (ie00_e20_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[20].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e20_qs)
-  );
-
-
-  // F[e21]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e21 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e21_we),
-    .wd     (ie00_e21_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[21].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e21_qs)
-  );
-
-
-  // F[e22]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e22 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e22_we),
-    .wd     (ie00_e22_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[22].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e22_qs)
-  );
-
-
-  // F[e23]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e23 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e23_we),
-    .wd     (ie00_e23_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[23].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e23_qs)
-  );
-
-
-  // F[e24]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e24 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e24_we),
-    .wd     (ie00_e24_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[24].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e24_qs)
-  );
-
-
-  // F[e25]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e25 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e25_we),
-    .wd     (ie00_e25_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[25].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e25_qs)
-  );
-
-
-  // F[e26]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e26 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e26_we),
-    .wd     (ie00_e26_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[26].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e26_qs)
-  );
-
-
-  // F[e27]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e27 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e27_we),
-    .wd     (ie00_e27_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[27].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e27_qs)
-  );
-
-
-  // F[e28]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e28 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e28_we),
-    .wd     (ie00_e28_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[28].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e28_qs)
-  );
-
-
-  // F[e29]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e29 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e29_we),
-    .wd     (ie00_e29_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[29].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e29_qs)
-  );
-
-
-  // F[e30]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e30 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e30_we),
-    .wd     (ie00_e30_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[30].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e30_qs)
-  );
-
-
-  // F[e31]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie00_e31 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie00_e31_we),
-    .wd     (ie00_e31_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[31].q ),
-
-    // to register interface (read)
-    .qs     (ie00_e31_qs)
-  );
-
-
-  // Subregister 32 of Multireg ie0
-  // R[ie01]: V(False)
-
-  // F[e32]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e32 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e32_we),
-    .wd     (ie01_e32_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[32].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e32_qs)
-  );
-
-
-  // F[e33]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e33 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e33_we),
-    .wd     (ie01_e33_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[33].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e33_qs)
-  );
-
-
-  // F[e34]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e34 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e34_we),
-    .wd     (ie01_e34_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[34].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e34_qs)
-  );
-
-
-  // F[e35]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e35 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e35_we),
-    .wd     (ie01_e35_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[35].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e35_qs)
-  );
-
-
-  // F[e36]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e36 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e36_we),
-    .wd     (ie01_e36_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[36].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e36_qs)
-  );
-
-
-  // F[e37]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e37 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e37_we),
-    .wd     (ie01_e37_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[37].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e37_qs)
-  );
-
-
-  // F[e38]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e38 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e38_we),
-    .wd     (ie01_e38_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[38].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e38_qs)
-  );
-
-
-  // F[e39]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e39 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e39_we),
-    .wd     (ie01_e39_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[39].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e39_qs)
-  );
-
-
-  // F[e40]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e40 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e40_we),
-    .wd     (ie01_e40_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[40].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e40_qs)
-  );
-
-
-  // F[e41]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e41 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e41_we),
-    .wd     (ie01_e41_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[41].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e41_qs)
-  );
-
-
-  // F[e42]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e42 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e42_we),
-    .wd     (ie01_e42_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[42].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e42_qs)
-  );
-
-
-  // F[e43]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e43 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e43_we),
-    .wd     (ie01_e43_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[43].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e43_qs)
-  );
-
-
-  // F[e44]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e44 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e44_we),
-    .wd     (ie01_e44_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[44].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e44_qs)
-  );
-
-
-  // F[e45]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e45 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e45_we),
-    .wd     (ie01_e45_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[45].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e45_qs)
-  );
-
-
-  // F[e46]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e46 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e46_we),
-    .wd     (ie01_e46_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[46].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e46_qs)
-  );
-
-
-  // F[e47]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e47 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e47_we),
-    .wd     (ie01_e47_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[47].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e47_qs)
-  );
-
-
-  // F[e48]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e48 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e48_we),
-    .wd     (ie01_e48_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[48].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e48_qs)
-  );
-
-
-  // F[e49]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e49 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e49_we),
-    .wd     (ie01_e49_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[49].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e49_qs)
-  );
-
-
-  // F[e50]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e50 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e50_we),
-    .wd     (ie01_e50_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[50].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e50_qs)
-  );
-
-
-  // F[e51]: 19:19
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e51 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e51_we),
-    .wd     (ie01_e51_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[51].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e51_qs)
-  );
-
-
-  // F[e52]: 20:20
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e52 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e52_we),
-    .wd     (ie01_e52_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[52].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e52_qs)
-  );
-
-
-  // F[e53]: 21:21
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e53 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e53_we),
-    .wd     (ie01_e53_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[53].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e53_qs)
-  );
-
-
-  // F[e54]: 22:22
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e54 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e54_we),
-    .wd     (ie01_e54_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[54].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e54_qs)
-  );
-
-
-  // F[e55]: 23:23
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e55 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e55_we),
-    .wd     (ie01_e55_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[55].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e55_qs)
-  );
-
-
-  // F[e56]: 24:24
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e56 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e56_we),
-    .wd     (ie01_e56_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[56].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e56_qs)
-  );
-
-
-  // F[e57]: 25:25
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e57 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e57_we),
-    .wd     (ie01_e57_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[57].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e57_qs)
-  );
-
-
-  // F[e58]: 26:26
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e58 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e58_we),
-    .wd     (ie01_e58_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[58].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e58_qs)
-  );
-
-
-  // F[e59]: 27:27
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e59 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e59_we),
-    .wd     (ie01_e59_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[59].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e59_qs)
-  );
-
-
-  // F[e60]: 28:28
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e60 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e60_we),
-    .wd     (ie01_e60_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[60].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e60_qs)
-  );
-
-
-  // F[e61]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e61 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e61_we),
-    .wd     (ie01_e61_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[61].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e61_qs)
-  );
-
-
-  // F[e62]: 30:30
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e62 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e62_we),
-    .wd     (ie01_e62_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[62].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e62_qs)
-  );
-
-
-  // F[e63]: 31:31
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie01_e63 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie01_e63_we),
-    .wd     (ie01_e63_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[63].q ),
-
-    // to register interface (read)
-    .qs     (ie01_e63_qs)
-  );
-
-
-  // Subregister 64 of Multireg ie0
-  // R[ie02]: V(False)
-
-  // F[e64]: 0:0
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e64 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e64_we),
-    .wd     (ie02_e64_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[64].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e64_qs)
-  );
-
-
-  // F[e65]: 1:1
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e65 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e65_we),
-    .wd     (ie02_e65_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[65].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e65_qs)
-  );
-
-
-  // F[e66]: 2:2
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e66 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e66_we),
-    .wd     (ie02_e66_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[66].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e66_qs)
-  );
-
-
-  // F[e67]: 3:3
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e67 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e67_we),
-    .wd     (ie02_e67_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[67].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e67_qs)
-  );
-
-
-  // F[e68]: 4:4
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e68 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e68_we),
-    .wd     (ie02_e68_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[68].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e68_qs)
-  );
-
-
-  // F[e69]: 5:5
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e69 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e69_we),
-    .wd     (ie02_e69_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[69].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e69_qs)
-  );
-
-
-  // F[e70]: 6:6
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e70 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e70_we),
-    .wd     (ie02_e70_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[70].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e70_qs)
-  );
-
-
-  // F[e71]: 7:7
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e71 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e71_we),
-    .wd     (ie02_e71_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[71].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e71_qs)
-  );
-
-
-  // F[e72]: 8:8
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e72 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e72_we),
-    .wd     (ie02_e72_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[72].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e72_qs)
-  );
-
-
-  // F[e73]: 9:9
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e73 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e73_we),
-    .wd     (ie02_e73_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[73].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e73_qs)
-  );
-
-
-  // F[e74]: 10:10
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e74 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e74_we),
-    .wd     (ie02_e74_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[74].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e74_qs)
-  );
-
-
-  // F[e75]: 11:11
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e75 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e75_we),
-    .wd     (ie02_e75_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[75].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e75_qs)
-  );
-
-
-  // F[e76]: 12:12
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e76 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e76_we),
-    .wd     (ie02_e76_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[76].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e76_qs)
-  );
-
-
-  // F[e77]: 13:13
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e77 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e77_we),
-    .wd     (ie02_e77_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[77].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e77_qs)
-  );
-
-
-  // F[e78]: 14:14
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e78 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e78_we),
-    .wd     (ie02_e78_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[78].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e78_qs)
-  );
-
-
-  // F[e79]: 15:15
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e79 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e79_we),
-    .wd     (ie02_e79_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[79].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e79_qs)
-  );
-
-
-  // F[e80]: 16:16
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e80 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e80_we),
-    .wd     (ie02_e80_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[80].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e80_qs)
-  );
-
-
-  // F[e81]: 17:17
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e81 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e81_we),
-    .wd     (ie02_e81_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[81].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e81_qs)
-  );
-
-
-  // F[e82]: 18:18
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_ie02_e82 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (ie02_e82_we),
-    .wd     (ie02_e82_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.ie0[82].q ),
-
-    // to register interface (read)
-    .qs     (ie02_e82_qs)
-  );
-
-
-
-  // R[threshold0]: V(False)
-
-  prim_subreg #(
-    .DW      (2),
-    .SWACCESS("RW"),
-    .RESVAL  (2'h0)
-  ) u_threshold0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (threshold0_we),
-    .wd     (threshold0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.threshold0.q ),
-
-    // to register interface (read)
-    .qs     (threshold0_qs)
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[7]),
+          .d(hw2reg[8]),
+          .qe(),
+          .q(),
+          .qs(ip0_p0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[9]),
+          .d(hw2reg[10]),
+          .qe(),
+          .q(),
+          .qs(ip0_p1_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[11]),
+          .d(hw2reg[12]),
+          .qe(),
+          .q(),
+          .qs(ip0_p2_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[13]),
+          .d(hw2reg[14]),
+          .qe(),
+          .q(),
+          .qs(ip0_p3_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[15]),
+          .d(hw2reg[16]),
+          .qe(),
+          .q(),
+          .qs(ip0_p4_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[17]),
+          .d(hw2reg[18]),
+          .qe(),
+          .q(),
+          .qs(ip0_p5_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[19]),
+          .d(hw2reg[20]),
+          .qe(),
+          .q(),
+          .qs(ip0_p6_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[21]),
+          .d(hw2reg[22]),
+          .qe(),
+          .q(),
+          .qs(ip0_p7_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[23]),
+          .d(hw2reg[24]),
+          .qe(),
+          .q(),
+          .qs(ip0_p8_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[25]),
+          .d(hw2reg[26]),
+          .qe(),
+          .q(),
+          .qs(ip0_p9_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[27]),
+          .d(hw2reg[28]),
+          .qe(),
+          .q(),
+          .qs(ip0_p10_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[29]),
+          .d(hw2reg[30]),
+          .qe(),
+          .q(),
+          .qs(ip0_p11_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[31]),
+          .d(hw2reg[32]),
+          .qe(),
+          .q(),
+          .qs(ip0_p12_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[33]),
+          .d(hw2reg[34]),
+          .qe(),
+          .q(),
+          .qs(ip0_p13_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[35]),
+          .d(hw2reg[36]),
+          .qe(),
+          .q(),
+          .qs(ip0_p14_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[37]),
+          .d(hw2reg[38]),
+          .qe(),
+          .q(),
+          .qs(ip0_p15_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[39]),
+          .d(hw2reg[40]),
+          .qe(),
+          .q(),
+          .qs(ip0_p16_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[41]),
+          .d(hw2reg[42]),
+          .qe(),
+          .q(),
+          .qs(ip0_p17_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[43]),
+          .d(hw2reg[44]),
+          .qe(),
+          .q(),
+          .qs(ip0_p18_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[45]),
+          .d(hw2reg[46]),
+          .qe(),
+          .q(),
+          .qs(ip0_p19_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[47]),
+          .d(hw2reg[48]),
+          .qe(),
+          .q(),
+          .qs(ip0_p20_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[49]),
+          .d(hw2reg[50]),
+          .qe(),
+          .q(),
+          .qs(ip0_p21_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[51]),
+          .d(hw2reg[52]),
+          .qe(),
+          .q(),
+          .qs(ip0_p22_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[53]),
+          .d(hw2reg[54]),
+          .qe(),
+          .q(),
+          .qs(ip0_p23_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[55]),
+          .d(hw2reg[56]),
+          .qe(),
+          .q(),
+          .qs(ip0_p24_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[57]),
+          .d(hw2reg[58]),
+          .qe(),
+          .q(),
+          .qs(ip0_p25_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[59]),
+          .d(hw2reg[60]),
+          .qe(),
+          .q(),
+          .qs(ip0_p26_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[61]),
+          .d(hw2reg[62]),
+          .qe(),
+          .q(),
+          .qs(ip0_p27_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[63]),
+          .d(hw2reg[64]),
+          .qe(),
+          .q(),
+          .qs(ip0_p28_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[65]),
+          .d(hw2reg[66]),
+          .qe(),
+          .q(),
+          .qs(ip0_p29_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[67]),
+          .d(hw2reg[68]),
+          .qe(),
+          .q(),
+          .qs(ip0_p30_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip0_p31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[69]),
+          .d(hw2reg[70]),
+          .qe(),
+          .q(),
+          .qs(ip0_p31_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[71]),
+          .d(hw2reg[72]),
+          .qe(),
+          .q(),
+          .qs(ip1_p32_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[73]),
+          .d(hw2reg[74]),
+          .qe(),
+          .q(),
+          .qs(ip1_p33_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[75]),
+          .d(hw2reg[76]),
+          .qe(),
+          .q(),
+          .qs(ip1_p34_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[77]),
+          .d(hw2reg[78]),
+          .qe(),
+          .q(),
+          .qs(ip1_p35_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[79]),
+          .d(hw2reg[80]),
+          .qe(),
+          .q(),
+          .qs(ip1_p36_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[81]),
+          .d(hw2reg[82]),
+          .qe(),
+          .q(),
+          .qs(ip1_p37_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[83]),
+          .d(hw2reg[84]),
+          .qe(),
+          .q(),
+          .qs(ip1_p38_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[85]),
+          .d(hw2reg[86]),
+          .qe(),
+          .q(),
+          .qs(ip1_p39_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[87]),
+          .d(hw2reg[88]),
+          .qe(),
+          .q(),
+          .qs(ip1_p40_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[89]),
+          .d(hw2reg[90]),
+          .qe(),
+          .q(),
+          .qs(ip1_p41_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[91]),
+          .d(hw2reg[92]),
+          .qe(),
+          .q(),
+          .qs(ip1_p42_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[93]),
+          .d(hw2reg[94]),
+          .qe(),
+          .q(),
+          .qs(ip1_p43_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[95]),
+          .d(hw2reg[96]),
+          .qe(),
+          .q(),
+          .qs(ip1_p44_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[97]),
+          .d(hw2reg[98]),
+          .qe(),
+          .q(),
+          .qs(ip1_p45_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[99]),
+          .d(hw2reg[100]),
+          .qe(),
+          .q(),
+          .qs(ip1_p46_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[101]),
+          .d(hw2reg[102]),
+          .qe(),
+          .q(),
+          .qs(ip1_p47_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[103]),
+          .d(hw2reg[104]),
+          .qe(),
+          .q(),
+          .qs(ip1_p48_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[105]),
+          .d(hw2reg[106]),
+          .qe(),
+          .q(),
+          .qs(ip1_p49_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[107]),
+          .d(hw2reg[108]),
+          .qe(),
+          .q(),
+          .qs(ip1_p50_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[109]),
+          .d(hw2reg[110]),
+          .qe(),
+          .q(),
+          .qs(ip1_p51_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[111]),
+          .d(hw2reg[112]),
+          .qe(),
+          .q(),
+          .qs(ip1_p52_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[113]),
+          .d(hw2reg[114]),
+          .qe(),
+          .q(),
+          .qs(ip1_p53_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[115]),
+          .d(hw2reg[116]),
+          .qe(),
+          .q(),
+          .qs(ip1_p54_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[117]),
+          .d(hw2reg[118]),
+          .qe(),
+          .q(),
+          .qs(ip1_p55_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[119]),
+          .d(hw2reg[120]),
+          .qe(),
+          .q(),
+          .qs(ip1_p56_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[121]),
+          .d(hw2reg[122]),
+          .qe(),
+          .q(),
+          .qs(ip1_p57_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[123]),
+          .d(hw2reg[124]),
+          .qe(),
+          .q(),
+          .qs(ip1_p58_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[125]),
+          .d(hw2reg[126]),
+          .qe(),
+          .q(),
+          .qs(ip1_p59_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[127]),
+          .d(hw2reg[128]),
+          .qe(),
+          .q(),
+          .qs(ip1_p60_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[129]),
+          .d(hw2reg[130]),
+          .qe(),
+          .q(),
+          .qs(ip1_p61_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[131]),
+          .d(hw2reg[132]),
+          .qe(),
+          .q(),
+          .qs(ip1_p62_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip1_p63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[133]),
+          .d(hw2reg[134]),
+          .qe(),
+          .q(),
+          .qs(ip1_p63_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[135]),
+          .d(hw2reg[136]),
+          .qe(),
+          .q(),
+          .qs(ip2_p64_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[137]),
+          .d(hw2reg[138]),
+          .qe(),
+          .q(),
+          .qs(ip2_p65_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[139]),
+          .d(hw2reg[140]),
+          .qe(),
+          .q(),
+          .qs(ip2_p66_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[141]),
+          .d(hw2reg[142]),
+          .qe(),
+          .q(),
+          .qs(ip2_p67_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[143]),
+          .d(hw2reg[144]),
+          .qe(),
+          .q(),
+          .qs(ip2_p68_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[145]),
+          .d(hw2reg[146]),
+          .qe(),
+          .q(),
+          .qs(ip2_p69_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[147]),
+          .d(hw2reg[148]),
+          .qe(),
+          .q(),
+          .qs(ip2_p70_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[149]),
+          .d(hw2reg[150]),
+          .qe(),
+          .q(),
+          .qs(ip2_p71_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[151]),
+          .d(hw2reg[152]),
+          .qe(),
+          .q(),
+          .qs(ip2_p72_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[153]),
+          .d(hw2reg[154]),
+          .qe(),
+          .q(),
+          .qs(ip2_p73_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[155]),
+          .d(hw2reg[156]),
+          .qe(),
+          .q(),
+          .qs(ip2_p74_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[157]),
+          .d(hw2reg[158]),
+          .qe(),
+          .q(),
+          .qs(ip2_p75_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[159]),
+          .d(hw2reg[160]),
+          .qe(),
+          .q(),
+          .qs(ip2_p76_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[161]),
+          .d(hw2reg[162]),
+          .qe(),
+          .q(),
+          .qs(ip2_p77_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[163]),
+          .d(hw2reg[164]),
+          .qe(),
+          .q(),
+          .qs(ip2_p78_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[165]),
+          .d(hw2reg[166]),
+          .qe(),
+          .q(),
+          .qs(ip2_p79_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[167]),
+          .d(hw2reg[168]),
+          .qe(),
+          .q(),
+          .qs(ip2_p80_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[169]),
+          .d(hw2reg[170]),
+          .qe(),
+          .q(),
+          .qs(ip2_p81_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RO"),
+          .RESVAL(1'h0)
+  ) u_ip2_p82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(1'b0),
+          .wd(1'b0),
+          .de(hw2reg[171]),
+          .d(hw2reg[172]),
+          .qe(),
+          .q(),
+          .qs(ip2_p82_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le0_we),
+          .wd(le0_le0_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[261]),
+          .qs(le0_le0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le1_we),
+          .wd(le0_le1_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[262]),
+          .qs(le0_le1_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le2_we),
+          .wd(le0_le2_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[263]),
+          .qs(le0_le2_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le3_we),
+          .wd(le0_le3_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[264]),
+          .qs(le0_le3_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le4_we),
+          .wd(le0_le4_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[265]),
+          .qs(le0_le4_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le5_we),
+          .wd(le0_le5_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[266]),
+          .qs(le0_le5_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le6_we),
+          .wd(le0_le6_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[267]),
+          .qs(le0_le6_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le7_we),
+          .wd(le0_le7_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[268]),
+          .qs(le0_le7_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le8_we),
+          .wd(le0_le8_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[269]),
+          .qs(le0_le8_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le9_we),
+          .wd(le0_le9_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[270]),
+          .qs(le0_le9_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le10_we),
+          .wd(le0_le10_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[271]),
+          .qs(le0_le10_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le11_we),
+          .wd(le0_le11_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[272]),
+          .qs(le0_le11_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le12_we),
+          .wd(le0_le12_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[273]),
+          .qs(le0_le12_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le13_we),
+          .wd(le0_le13_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[274]),
+          .qs(le0_le13_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le14_we),
+          .wd(le0_le14_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[275]),
+          .qs(le0_le14_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le15_we),
+          .wd(le0_le15_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[276]),
+          .qs(le0_le15_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le16_we),
+          .wd(le0_le16_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[277]),
+          .qs(le0_le16_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le17_we),
+          .wd(le0_le17_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[278]),
+          .qs(le0_le17_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le18_we),
+          .wd(le0_le18_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[279]),
+          .qs(le0_le18_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le19_we),
+          .wd(le0_le19_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[280]),
+          .qs(le0_le19_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le20_we),
+          .wd(le0_le20_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[281]),
+          .qs(le0_le20_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le21_we),
+          .wd(le0_le21_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[282]),
+          .qs(le0_le21_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le22_we),
+          .wd(le0_le22_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[283]),
+          .qs(le0_le22_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le23_we),
+          .wd(le0_le23_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[284]),
+          .qs(le0_le23_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le24_we),
+          .wd(le0_le24_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[285]),
+          .qs(le0_le24_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le25_we),
+          .wd(le0_le25_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[286]),
+          .qs(le0_le25_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le26_we),
+          .wd(le0_le26_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[287]),
+          .qs(le0_le26_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le27_we),
+          .wd(le0_le27_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[288]),
+          .qs(le0_le27_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le28_we),
+          .wd(le0_le28_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[289]),
+          .qs(le0_le28_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le29_we),
+          .wd(le0_le29_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[290]),
+          .qs(le0_le29_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le30_we),
+          .wd(le0_le30_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[291]),
+          .qs(le0_le30_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le0_le31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le0_le31_we),
+          .wd(le0_le31_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[292]),
+          .qs(le0_le31_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le32_we),
+          .wd(le1_le32_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[293]),
+          .qs(le1_le32_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le33_we),
+          .wd(le1_le33_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[294]),
+          .qs(le1_le33_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le34_we),
+          .wd(le1_le34_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[295]),
+          .qs(le1_le34_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le35_we),
+          .wd(le1_le35_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[296]),
+          .qs(le1_le35_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le36_we),
+          .wd(le1_le36_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[297]),
+          .qs(le1_le36_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le37_we),
+          .wd(le1_le37_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[298]),
+          .qs(le1_le37_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le38_we),
+          .wd(le1_le38_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[299]),
+          .qs(le1_le38_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le39_we),
+          .wd(le1_le39_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[300]),
+          .qs(le1_le39_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le40_we),
+          .wd(le1_le40_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[301]),
+          .qs(le1_le40_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le41_we),
+          .wd(le1_le41_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[302]),
+          .qs(le1_le41_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le42_we),
+          .wd(le1_le42_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[303]),
+          .qs(le1_le42_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le43_we),
+          .wd(le1_le43_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[304]),
+          .qs(le1_le43_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le44_we),
+          .wd(le1_le44_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[305]),
+          .qs(le1_le44_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le45_we),
+          .wd(le1_le45_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[306]),
+          .qs(le1_le45_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le46_we),
+          .wd(le1_le46_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[307]),
+          .qs(le1_le46_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le47_we),
+          .wd(le1_le47_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[308]),
+          .qs(le1_le47_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le48_we),
+          .wd(le1_le48_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[309]),
+          .qs(le1_le48_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le49_we),
+          .wd(le1_le49_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[310]),
+          .qs(le1_le49_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le50_we),
+          .wd(le1_le50_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[311]),
+          .qs(le1_le50_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le51_we),
+          .wd(le1_le51_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[312]),
+          .qs(le1_le51_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le52_we),
+          .wd(le1_le52_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[313]),
+          .qs(le1_le52_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le53_we),
+          .wd(le1_le53_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[314]),
+          .qs(le1_le53_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le54_we),
+          .wd(le1_le54_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[315]),
+          .qs(le1_le54_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le55_we),
+          .wd(le1_le55_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[316]),
+          .qs(le1_le55_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le56_we),
+          .wd(le1_le56_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[317]),
+          .qs(le1_le56_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le57_we),
+          .wd(le1_le57_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[318]),
+          .qs(le1_le57_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le58_we),
+          .wd(le1_le58_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[319]),
+          .qs(le1_le58_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le59_we),
+          .wd(le1_le59_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[320]),
+          .qs(le1_le59_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le60_we),
+          .wd(le1_le60_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[321]),
+          .qs(le1_le60_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le61_we),
+          .wd(le1_le61_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[322]),
+          .qs(le1_le61_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le62_we),
+          .wd(le1_le62_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[323]),
+          .qs(le1_le62_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le1_le63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le1_le63_we),
+          .wd(le1_le63_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[324]),
+          .qs(le1_le63_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le64_we),
+          .wd(le2_le64_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[325]),
+          .qs(le2_le64_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le65_we),
+          .wd(le2_le65_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[326]),
+          .qs(le2_le65_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le66_we),
+          .wd(le2_le66_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[327]),
+          .qs(le2_le66_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le67_we),
+          .wd(le2_le67_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[328]),
+          .qs(le2_le67_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le68_we),
+          .wd(le2_le68_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[329]),
+          .qs(le2_le68_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le69_we),
+          .wd(le2_le69_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[330]),
+          .qs(le2_le69_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le70_we),
+          .wd(le2_le70_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[331]),
+          .qs(le2_le70_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le71_we),
+          .wd(le2_le71_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[332]),
+          .qs(le2_le71_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le72_we),
+          .wd(le2_le72_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[333]),
+          .qs(le2_le72_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le73_we),
+          .wd(le2_le73_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[334]),
+          .qs(le2_le73_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le74_we),
+          .wd(le2_le74_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[335]),
+          .qs(le2_le74_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le75_we),
+          .wd(le2_le75_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[336]),
+          .qs(le2_le75_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le76_we),
+          .wd(le2_le76_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[337]),
+          .qs(le2_le76_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le77_we),
+          .wd(le2_le77_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[338]),
+          .qs(le2_le77_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le78_we),
+          .wd(le2_le78_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[339]),
+          .qs(le2_le78_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le79_we),
+          .wd(le2_le79_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[340]),
+          .qs(le2_le79_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le80_we),
+          .wd(le2_le80_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[341]),
+          .qs(le2_le80_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le81_we),
+          .wd(le2_le81_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[342]),
+          .qs(le2_le81_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_le2_le82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(le2_le82_we),
+          .wd(le2_le82_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[343]),
+          .qs(le2_le82_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio0_we),
+          .wd(prio0_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[260-:2]),
+          .qs(prio0_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio1_we),
+          .wd(prio1_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[258-:2]),
+          .qs(prio1_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio2_we),
+          .wd(prio2_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[256-:2]),
+          .qs(prio2_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio3_we),
+          .wd(prio3_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[254-:2]),
+          .qs(prio3_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio4_we),
+          .wd(prio4_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[252-:2]),
+          .qs(prio4_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio5_we),
+          .wd(prio5_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[250-:2]),
+          .qs(prio5_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio6_we),
+          .wd(prio6_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[248-:2]),
+          .qs(prio6_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio7_we),
+          .wd(prio7_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[246-:2]),
+          .qs(prio7_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio8_we),
+          .wd(prio8_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[244-:2]),
+          .qs(prio8_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio9_we),
+          .wd(prio9_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[242-:2]),
+          .qs(prio9_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio10_we),
+          .wd(prio10_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[240-:2]),
+          .qs(prio10_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio11_we),
+          .wd(prio11_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[238-:2]),
+          .qs(prio11_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio12_we),
+          .wd(prio12_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[236-:2]),
+          .qs(prio12_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio13_we),
+          .wd(prio13_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[234-:2]),
+          .qs(prio13_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio14_we),
+          .wd(prio14_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[232-:2]),
+          .qs(prio14_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio15_we),
+          .wd(prio15_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[230-:2]),
+          .qs(prio15_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio16_we),
+          .wd(prio16_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[228-:2]),
+          .qs(prio16_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio17_we),
+          .wd(prio17_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[226-:2]),
+          .qs(prio17_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio18_we),
+          .wd(prio18_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[224-:2]),
+          .qs(prio18_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio19_we),
+          .wd(prio19_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[222-:2]),
+          .qs(prio19_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio20_we),
+          .wd(prio20_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[220-:2]),
+          .qs(prio20_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio21_we),
+          .wd(prio21_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[218-:2]),
+          .qs(prio21_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio22_we),
+          .wd(prio22_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[216-:2]),
+          .qs(prio22_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio23_we),
+          .wd(prio23_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[214-:2]),
+          .qs(prio23_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio24_we),
+          .wd(prio24_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[212-:2]),
+          .qs(prio24_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio25_we),
+          .wd(prio25_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[210-:2]),
+          .qs(prio25_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio26_we),
+          .wd(prio26_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[208-:2]),
+          .qs(prio26_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio27_we),
+          .wd(prio27_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[206-:2]),
+          .qs(prio27_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio28_we),
+          .wd(prio28_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[204-:2]),
+          .qs(prio28_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio29_we),
+          .wd(prio29_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[202-:2]),
+          .qs(prio29_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio30_we),
+          .wd(prio30_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[200-:2]),
+          .qs(prio30_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio31_we),
+          .wd(prio31_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[198-:2]),
+          .qs(prio31_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio32_we),
+          .wd(prio32_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[196-:2]),
+          .qs(prio32_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio33_we),
+          .wd(prio33_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[194-:2]),
+          .qs(prio33_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio34_we),
+          .wd(prio34_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[192-:2]),
+          .qs(prio34_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio35_we),
+          .wd(prio35_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[190-:2]),
+          .qs(prio35_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio36_we),
+          .wd(prio36_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[188-:2]),
+          .qs(prio36_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio37_we),
+          .wd(prio37_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[186-:2]),
+          .qs(prio37_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio38_we),
+          .wd(prio38_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[184-:2]),
+          .qs(prio38_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio39_we),
+          .wd(prio39_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[182-:2]),
+          .qs(prio39_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio40_we),
+          .wd(prio40_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[180-:2]),
+          .qs(prio40_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio41_we),
+          .wd(prio41_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[178-:2]),
+          .qs(prio41_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio42_we),
+          .wd(prio42_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[176-:2]),
+          .qs(prio42_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio43_we),
+          .wd(prio43_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[174-:2]),
+          .qs(prio43_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio44_we),
+          .wd(prio44_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[172-:2]),
+          .qs(prio44_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio45_we),
+          .wd(prio45_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[170-:2]),
+          .qs(prio45_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio46_we),
+          .wd(prio46_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[168-:2]),
+          .qs(prio46_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio47_we),
+          .wd(prio47_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[166-:2]),
+          .qs(prio47_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio48_we),
+          .wd(prio48_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[164-:2]),
+          .qs(prio48_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio49_we),
+          .wd(prio49_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[162-:2]),
+          .qs(prio49_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio50_we),
+          .wd(prio50_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[160-:2]),
+          .qs(prio50_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio51_we),
+          .wd(prio51_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[158-:2]),
+          .qs(prio51_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio52_we),
+          .wd(prio52_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[156-:2]),
+          .qs(prio52_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio53_we),
+          .wd(prio53_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[154-:2]),
+          .qs(prio53_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio54_we),
+          .wd(prio54_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[152-:2]),
+          .qs(prio54_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio55_we),
+          .wd(prio55_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[150-:2]),
+          .qs(prio55_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio56_we),
+          .wd(prio56_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[148-:2]),
+          .qs(prio56_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio57_we),
+          .wd(prio57_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[146-:2]),
+          .qs(prio57_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio58_we),
+          .wd(prio58_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[144-:2]),
+          .qs(prio58_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio59_we),
+          .wd(prio59_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[142-:2]),
+          .qs(prio59_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio60_we),
+          .wd(prio60_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[140-:2]),
+          .qs(prio60_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio61_we),
+          .wd(prio61_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[138-:2]),
+          .qs(prio61_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio62_we),
+          .wd(prio62_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[136-:2]),
+          .qs(prio62_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio63_we),
+          .wd(prio63_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[134-:2]),
+          .qs(prio63_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio64_we),
+          .wd(prio64_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[132-:2]),
+          .qs(prio64_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio65_we),
+          .wd(prio65_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[130-:2]),
+          .qs(prio65_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio66_we),
+          .wd(prio66_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[128-:2]),
+          .qs(prio66_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio67_we),
+          .wd(prio67_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[126-:2]),
+          .qs(prio67_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio68_we),
+          .wd(prio68_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[124-:2]),
+          .qs(prio68_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio69_we),
+          .wd(prio69_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[122-:2]),
+          .qs(prio69_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio70_we),
+          .wd(prio70_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[120-:2]),
+          .qs(prio70_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio71_we),
+          .wd(prio71_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[118-:2]),
+          .qs(prio71_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio72_we),
+          .wd(prio72_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[116-:2]),
+          .qs(prio72_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio73_we),
+          .wd(prio73_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[114-:2]),
+          .qs(prio73_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio74_we),
+          .wd(prio74_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[112-:2]),
+          .qs(prio74_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio75_we),
+          .wd(prio75_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[110-:2]),
+          .qs(prio75_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio76_we),
+          .wd(prio76_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[108-:2]),
+          .qs(prio76_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio77_we),
+          .wd(prio77_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[106-:2]),
+          .qs(prio77_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio78_we),
+          .wd(prio78_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[104-:2]),
+          .qs(prio78_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio79_we),
+          .wd(prio79_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[102-:2]),
+          .qs(prio79_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio80_we),
+          .wd(prio80_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[100-:2]),
+          .qs(prio80_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio81_we),
+          .wd(prio81_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[98-:2]),
+          .qs(prio81_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_prio82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(prio82_we),
+          .wd(prio82_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[96-:2]),
+          .qs(prio82_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e0_we),
+          .wd(ie00_e0_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[12]),
+          .qs(ie00_e0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e1(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e1_we),
+          .wd(ie00_e1_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[13]),
+          .qs(ie00_e1_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e2(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e2_we),
+          .wd(ie00_e2_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[14]),
+          .qs(ie00_e2_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e3(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e3_we),
+          .wd(ie00_e3_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[15]),
+          .qs(ie00_e3_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e4(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e4_we),
+          .wd(ie00_e4_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[16]),
+          .qs(ie00_e4_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e5(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e5_we),
+          .wd(ie00_e5_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[17]),
+          .qs(ie00_e5_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e6(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e6_we),
+          .wd(ie00_e6_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[18]),
+          .qs(ie00_e6_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e7(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e7_we),
+          .wd(ie00_e7_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[19]),
+          .qs(ie00_e7_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e8(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e8_we),
+          .wd(ie00_e8_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[20]),
+          .qs(ie00_e8_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e9(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e9_we),
+          .wd(ie00_e9_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[21]),
+          .qs(ie00_e9_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e10(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e10_we),
+          .wd(ie00_e10_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[22]),
+          .qs(ie00_e10_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e11(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e11_we),
+          .wd(ie00_e11_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[23]),
+          .qs(ie00_e11_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e12(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e12_we),
+          .wd(ie00_e12_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[24]),
+          .qs(ie00_e12_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e13(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e13_we),
+          .wd(ie00_e13_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[25]),
+          .qs(ie00_e13_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e14(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e14_we),
+          .wd(ie00_e14_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[26]),
+          .qs(ie00_e14_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e15(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e15_we),
+          .wd(ie00_e15_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[27]),
+          .qs(ie00_e15_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e16(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e16_we),
+          .wd(ie00_e16_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[28]),
+          .qs(ie00_e16_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e17(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e17_we),
+          .wd(ie00_e17_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[29]),
+          .qs(ie00_e17_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e18(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e18_we),
+          .wd(ie00_e18_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[30]),
+          .qs(ie00_e18_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e19(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e19_we),
+          .wd(ie00_e19_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[31]),
+          .qs(ie00_e19_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e20(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e20_we),
+          .wd(ie00_e20_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[32]),
+          .qs(ie00_e20_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e21(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e21_we),
+          .wd(ie00_e21_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[33]),
+          .qs(ie00_e21_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e22(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e22_we),
+          .wd(ie00_e22_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[34]),
+          .qs(ie00_e22_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e23(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e23_we),
+          .wd(ie00_e23_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[35]),
+          .qs(ie00_e23_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e24(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e24_we),
+          .wd(ie00_e24_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[36]),
+          .qs(ie00_e24_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e25(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e25_we),
+          .wd(ie00_e25_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[37]),
+          .qs(ie00_e25_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e26(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e26_we),
+          .wd(ie00_e26_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[38]),
+          .qs(ie00_e26_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e27(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e27_we),
+          .wd(ie00_e27_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[39]),
+          .qs(ie00_e27_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e28(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e28_we),
+          .wd(ie00_e28_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[40]),
+          .qs(ie00_e28_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e29(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e29_we),
+          .wd(ie00_e29_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[41]),
+          .qs(ie00_e29_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e30(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e30_we),
+          .wd(ie00_e30_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[42]),
+          .qs(ie00_e30_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie00_e31(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie00_e31_we),
+          .wd(ie00_e31_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[43]),
+          .qs(ie00_e31_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e32(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e32_we),
+          .wd(ie01_e32_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[44]),
+          .qs(ie01_e32_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e33(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e33_we),
+          .wd(ie01_e33_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[45]),
+          .qs(ie01_e33_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e34(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e34_we),
+          .wd(ie01_e34_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[46]),
+          .qs(ie01_e34_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e35(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e35_we),
+          .wd(ie01_e35_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[47]),
+          .qs(ie01_e35_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e36(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e36_we),
+          .wd(ie01_e36_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[48]),
+          .qs(ie01_e36_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e37(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e37_we),
+          .wd(ie01_e37_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[49]),
+          .qs(ie01_e37_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e38(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e38_we),
+          .wd(ie01_e38_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[50]),
+          .qs(ie01_e38_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e39(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e39_we),
+          .wd(ie01_e39_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[51]),
+          .qs(ie01_e39_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e40(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e40_we),
+          .wd(ie01_e40_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[52]),
+          .qs(ie01_e40_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e41(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e41_we),
+          .wd(ie01_e41_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[53]),
+          .qs(ie01_e41_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e42(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e42_we),
+          .wd(ie01_e42_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[54]),
+          .qs(ie01_e42_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e43(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e43_we),
+          .wd(ie01_e43_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[55]),
+          .qs(ie01_e43_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e44(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e44_we),
+          .wd(ie01_e44_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[56]),
+          .qs(ie01_e44_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e45(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e45_we),
+          .wd(ie01_e45_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[57]),
+          .qs(ie01_e45_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e46(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e46_we),
+          .wd(ie01_e46_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[58]),
+          .qs(ie01_e46_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e47(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e47_we),
+          .wd(ie01_e47_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[59]),
+          .qs(ie01_e47_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e48(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e48_we),
+          .wd(ie01_e48_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[60]),
+          .qs(ie01_e48_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e49(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e49_we),
+          .wd(ie01_e49_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[61]),
+          .qs(ie01_e49_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e50(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e50_we),
+          .wd(ie01_e50_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[62]),
+          .qs(ie01_e50_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e51(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e51_we),
+          .wd(ie01_e51_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[63]),
+          .qs(ie01_e51_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e52(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e52_we),
+          .wd(ie01_e52_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[64]),
+          .qs(ie01_e52_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e53(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e53_we),
+          .wd(ie01_e53_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[65]),
+          .qs(ie01_e53_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e54(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e54_we),
+          .wd(ie01_e54_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[66]),
+          .qs(ie01_e54_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e55(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e55_we),
+          .wd(ie01_e55_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[67]),
+          .qs(ie01_e55_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e56(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e56_we),
+          .wd(ie01_e56_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[68]),
+          .qs(ie01_e56_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e57(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e57_we),
+          .wd(ie01_e57_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[69]),
+          .qs(ie01_e57_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e58(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e58_we),
+          .wd(ie01_e58_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[70]),
+          .qs(ie01_e58_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e59(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e59_we),
+          .wd(ie01_e59_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[71]),
+          .qs(ie01_e59_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e60(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e60_we),
+          .wd(ie01_e60_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[72]),
+          .qs(ie01_e60_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e61(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e61_we),
+          .wd(ie01_e61_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[73]),
+          .qs(ie01_e61_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e62(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e62_we),
+          .wd(ie01_e62_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[74]),
+          .qs(ie01_e62_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie01_e63(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie01_e63_we),
+          .wd(ie01_e63_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[75]),
+          .qs(ie01_e63_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e64(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e64_we),
+          .wd(ie02_e64_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[76]),
+          .qs(ie02_e64_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e65(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e65_we),
+          .wd(ie02_e65_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[77]),
+          .qs(ie02_e65_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e66(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e66_we),
+          .wd(ie02_e66_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[78]),
+          .qs(ie02_e66_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e67(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e67_we),
+          .wd(ie02_e67_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[79]),
+          .qs(ie02_e67_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e68(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e68_we),
+          .wd(ie02_e68_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[80]),
+          .qs(ie02_e68_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e69(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e69_we),
+          .wd(ie02_e69_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[81]),
+          .qs(ie02_e69_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e70(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e70_we),
+          .wd(ie02_e70_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[82]),
+          .qs(ie02_e70_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e71(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e71_we),
+          .wd(ie02_e71_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[83]),
+          .qs(ie02_e71_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e72(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e72_we),
+          .wd(ie02_e72_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[84]),
+          .qs(ie02_e72_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e73(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e73_we),
+          .wd(ie02_e73_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[85]),
+          .qs(ie02_e73_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e74(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e74_we),
+          .wd(ie02_e74_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[86]),
+          .qs(ie02_e74_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e75(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e75_we),
+          .wd(ie02_e75_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[87]),
+          .qs(ie02_e75_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e76(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e76_we),
+          .wd(ie02_e76_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[88]),
+          .qs(ie02_e76_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e77(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e77_we),
+          .wd(ie02_e77_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[89]),
+          .qs(ie02_e77_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e78(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e78_we),
+          .wd(ie02_e78_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[90]),
+          .qs(ie02_e78_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e79(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e79_we),
+          .wd(ie02_e79_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[91]),
+          .qs(ie02_e79_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e80(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e80_we),
+          .wd(ie02_e80_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[92]),
+          .qs(ie02_e80_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e81(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e81_we),
+          .wd(ie02_e81_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[93]),
+          .qs(ie02_e81_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_ie02_e82(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(ie02_e82_we),
+          .wd(ie02_e82_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[94]),
+          .qs(ie02_e82_qs)
+  );
+  prim_subreg #(
+          .DW(2),
+          .SWACCESS("RW"),
+          .RESVAL(2'h0)
+  ) u_threshold0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(threshold0_we),
+          .wd(threshold0_wd),
+          .de(1'b0),
+          .d({2 {1'b0}}),
+          .qe(),
+          .q(reg2hw[11-:2]),
+          .qs(threshold0_qs)
+  );
+  prim_subreg_ext #(.DW(7)) u_cc0(
+          .re(cc0_re),
+          .we(cc0_we),
+          .wd(cc0_wd),
+          .d(hw2reg[6-:7]),
+          .qre(reg2hw[1]),
+          .qe(reg2hw[2]),
+          .q(reg2hw[9-:7]),
+          .qs(cc0_qs)
+  );
+  prim_subreg #(
+          .DW(1),
+          .SWACCESS("RW"),
+          .RESVAL(1'h0)
+  ) u_msip0(
+          .clk_i(clk_i),
+          .rst_ni(rst_ni),
+          .we(msip0_we),
+          .wd(msip0_wd),
+          .de(1'b0),
+          .d(1'b0),
+          .qe(),
+          .q(reg2hw[-0]),
+          .qs(msip0_qs)
   );
 
-
-  // R[cc0]: V(True)
-
-  prim_subreg_ext #(
-    .DW    (7)
-  ) u_cc0 (
-    .re     (cc0_re),
-    .we     (cc0_we),
-    .wd     (cc0_wd),
-    .d      (hw2reg.cc0.d),
-    .qre    (reg2hw.cc0.re),
-    .qe     (reg2hw.cc0.qe),
-    .q      (reg2hw.cc0.q ),
-    .qs     (cc0_qs)
-  );
-
-
-  // R[msip0]: V(False)
-
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_msip0 (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (msip0_we),
-    .wd     (msip0_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.msip0.q ),
-
-    // to register interface (read)
-    .qs     (msip0_qs)
-  );
-
-
-
-
   logic [94:0] addr_hit;
   always_comb begin
-    addr_hit = '0;
+    addr_hit = {95{1'b0}};
     addr_hit[ 0] = (reg_addr == RV_PLIC_IP0_OFFSET);
     addr_hit[ 1] = (reg_addr == RV_PLIC_IP1_OFFSET);
     addr_hit[ 2] = (reg_addr == RV_PLIC_IP2_OFFSET);
@@ -10694,7 +6984,7 @@ module rv_plic_reg_top (
 
   // Read data return
   always_comb begin
-    reg_rdata_next = '0;
+    reg_rdata_next = {DW{1'b0}};
     unique case (1'b1)
       addr_hit[0]: begin
         reg_rdata_next[0] = ip0_p0_qs;
@@ -11317,7 +7607,7 @@ module rv_plic_reg_top (
       end
 
       default: begin
-        reg_rdata_next = '1;
+        reg_rdata_next = {DW{1'b1}};
       end
     endcase
   end
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
index 61469937f..12f0a2bcd 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
@@ -133,8 +133,8 @@ module ibex_core #(
   logic [31:0] pc_if;                          // Program counter in IF stage
   logic [31:0] pc_id;                          // Program counter in ID stage
   logic [31:0] pc_wb;                          // Program counter in WB stage
-  logic [33:0] imd_val_d_ex[2];                // Intermediate register for multicycle Ops
-  logic [33:0] imd_val_q_ex[2];                // Intermediate register for multicycle Ops
+  logic [1:0][33:0] imd_val_d_ex;                // Intermediate register for multicycle Ops
+  logic [1:0][33:0] imd_val_q_ex;                // Intermediate register for multicycle Ops
   logic [1:0]  imd_val_we_ex;
 
   logic        data_ind_timing;
@@ -254,7 +254,7 @@ module ibex_core #(
   logic [31:0] csr_mepc, csr_depc;
 
   // PMP signals
-  logic [33:0] csr_pmp_addr [PMPNumRegions];
+  logic [PMPNumRegions-1:0][33:0] csr_pmp_addr;
   pmp_cfg_t    csr_pmp_cfg  [PMPNumRegions];
   logic        pmp_req_err  [PMP_NUM_CHAN];
   logic        instr_req_out;
@@ -932,16 +932,16 @@ module ibex_core #(
   `ASSERT_KNOWN_IF(IbexCsrWdataIntKnown, cs_registers_i.csr_wdata_int, csr_op_en)
 
   if (PMPEnable) begin : g_pmp
-    logic [33:0] pmp_req_addr [PMP_NUM_CHAN];
-    pmp_req_e    pmp_req_type [PMP_NUM_CHAN];
-    priv_lvl_e   pmp_priv_lvl [PMP_NUM_CHAN];
-
-    assign pmp_req_addr[PMP_I] = {2'b00,instr_addr_o[31:0]};
-    assign pmp_req_type[PMP_I] = PMP_ACC_EXEC;
-    assign pmp_priv_lvl[PMP_I] = priv_mode_if;
-    assign pmp_req_addr[PMP_D] = {2'b00,data_addr_o[31:0]};
-    assign pmp_req_type[PMP_D] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
-    assign pmp_priv_lvl[PMP_D] = priv_mode_lsu;
+    logic [PMP_NUM_CHAN-1:0][1:0]    pmp_req_type;
+    logic [PMP_NUM_CHAN-1:0][1:0]    pmp_priv_lvl;
+    logic [PMP_NUM_CHAN-1:0][33:0] pmp_req_addr;
+
+    assign pmp_req_addr[PMP_D] = {2'b00,instr_addr_o[31:0]};
+    assign pmp_req_type[PMP_D] = PMP_ACC_EXEC;
+    assign pmp_priv_lvl[PMP_D] = priv_mode_if;
+    assign pmp_req_addr[PMP_I] = {2'b00,data_addr_o[31:0]};
+    assign pmp_req_type[PMP_I] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
+    assign pmp_priv_lvl[PMP_I] = priv_mode_lsu;
 
     ibex_pmp #(
         .PMPGranularity        ( PMPGranularity ),
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
index 6e5eaf4dc..d99e087d6 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
@@ -64,7 +64,7 @@ module ibex_cs_registers #(
 
     // PMP
     output ibex_pkg::pmp_cfg_t   csr_pmp_cfg_o  [PMPNumRegions],
-    output logic [33:0]          csr_pmp_addr_o [PMPNumRegions],
+    output logic [PMPNumRegions-1:0][33:0]          csr_pmp_addr_o,
 
     // debug
     input  logic                 debug_mode_i,
@@ -196,8 +196,8 @@ module ibex_cs_registers #(
   logic  [5:0] mstack_cause_q, mstack_cause_d;
 
   // PMP Signals
-  logic [31:0]                 pmp_addr_rdata  [PMP_MAX_REGIONS];
-  logic [PMP_CFG_W-1:0]        pmp_cfg_rdata   [PMP_MAX_REGIONS];
+  logic [PMP_MAX_REGIONS-1:0][31:0]                 pmp_addr_rdata;
+  logic [PMP_MAX_REGIONS-1:0][PMP_CFG_W-1:0]        pmp_cfg_rdata;
 
   // Hardware performance monitor signals
   logic [31:0]                 mcountinhibit;
@@ -208,11 +208,11 @@ module ibex_cs_registers #(
   // mhpmcounter flops are elaborated below providing only the precise number that is required based
   // on MHPMCounterNum/MHPMCounterWidth. This signal connects to the Q output of these flops
   // where they exist and is otherwise 0.
-  logic [63:0] mhpmcounter [32];
+  logic [31:0][63:0] mhpmcounter;
   logic [31:0] mhpmcounter_we;
   logic [31:0] mhpmcounterh_we;
   logic [31:0] mhpmcounter_incr;
-  logic [31:0] mhpmevent [32];
+  logic [31:0][31:0] mhpmevent;
   logic  [4:0] mhpmcounter_idx;
 
   // Debug / trigger registers
@@ -736,12 +736,12 @@ module ibex_cs_registers #(
   // PMP registers
   // -----------------
 
+  pmp_cfg_t                    pmp_cfg         [PMPNumRegions];
+  pmp_cfg_t                    pmp_cfg_wdata   [PMPNumRegions];
+  logic [PMPNumRegions-1:0][31:0]                 pmp_addr;
+  logic [PMPNumRegions-1:0]    pmp_cfg_we;
+  logic [PMPNumRegions-1:0]    pmp_addr_we;
   if (PMPEnable) begin : g_pmp_registers
-    pmp_cfg_t                    pmp_cfg         [PMPNumRegions];
-    pmp_cfg_t                    pmp_cfg_wdata   [PMPNumRegions];
-    logic [31:0]                 pmp_addr        [PMPNumRegions];
-    logic [PMPNumRegions-1:0]    pmp_cfg_we;
-    logic [PMPNumRegions-1:0]    pmp_addr_we;
 
     // Expanded / qualified register read data
     for (genvar i = 0; i < PMP_MAX_REGIONS; i++) begin : g_exp_rd_data
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
index eccc68e95..06a672e88 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
@@ -42,8 +42,8 @@ module ibex_ex_block #(
 
     // intermediate val reg
     output logic [1:0]            imd_val_we_o,
-    output logic [33:0]           imd_val_d_o[2],
-    input  logic [33:0]           imd_val_q_i[2],
+    output logic [1:0][33:0]           imd_val_d_o,
+    input  logic [1:0][33:0]           imd_val_q_i,
 
     // Outputs
     output logic [31:0]           alu_adder_result_ex_o, // to LSU
@@ -63,10 +63,10 @@ module ibex_ex_block #(
   logic        alu_cmp_result, alu_is_equal_result;
   logic        multdiv_valid;
   logic        multdiv_sel;
-  logic [31:0] alu_imd_val_q[2];
-  logic [31:0] alu_imd_val_d[2];
+  logic [1:0][31:0] alu_imd_val_q;
+  logic [1:0][31:0] alu_imd_val_d;
   logic [ 1:0] alu_imd_val_we;
-  logic [33:0] multdiv_imd_val_d[2];
+  logic [1:0][33:0] multdiv_imd_val_d;
   logic [ 1:0] multdiv_imd_val_we;
 
   /*
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
index bba4c2af8..a4fbb8da6 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
@@ -21,9 +21,9 @@ module ibex_id_stage #(
     parameter bit               RV32M           = 1,
     parameter ibex_pkg::rv32b_e RV32B           = ibex_pkg::RV32BNone,
     parameter bit               DataIndTiming   = 1'b0,
-    parameter bit               BranchTargetALU = 0,
-    parameter bit               SpecBranch      = 0,
-    parameter bit               WritebackStage  = 0
+    parameter bit               BranchTargetALU = 1,
+    parameter bit               SpecBranch      = 1,
+    parameter bit               WritebackStage  = 1
 ) (
     input  logic                      clk_i,
     input  logic                      rst_ni,
@@ -69,8 +69,8 @@ module ibex_id_stage #(
 
     // Multicycle Operation Stage Register
     input  logic [1:0]                imd_val_we_ex_i,
-    input  logic [33:0]               imd_val_d_ex_i[2],
-    output logic [33:0]               imd_val_q_ex_o[2],
+    input  logic [1:0][33:0]               imd_val_d_ex_i,
+    output logic [1:0][33:0]               imd_val_q_ex_o,
 
     // Branch target ALU
     output logic [31:0]               bt_a_operand_o,
@@ -247,7 +247,7 @@ module ibex_id_stage #(
   logic        alu_multicycle_dec;
   logic        stall_alu;
 
-  logic [33:0] imd_val_q[2];
+  logic [1:0][33:0] imd_val_q;
 
   op_a_sel_e   bt_a_mux_sel;
   imm_b_sel_e  bt_b_mux_sel;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
index 617bb5162..e1890da38 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
@@ -35,8 +35,8 @@ module ibex_multdiv_fast #(
     output logic [32:0]      alu_operand_a_o,
     output logic [32:0]      alu_operand_b_o,
 
-    input  logic [33:0]      imd_val_q_i[2],
-    output logic [33:0]      imd_val_d_o[2],
+    input  logic [1:0][33:0]      imd_val_q_i,
+    output logic [1:0][33:0]      imd_val_d_o,
     output logic [1:0]       imd_val_we_o,
 
     input  logic             multdiv_ready_id_i,
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
index 1b48693a0..4621be034 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_pmp.sv
@@ -30,8 +30,8 @@ module ibex_pmp #(
   import ibex_pkg::*;
 
   // Access Checking Signals
-  logic [33:0]                                region_start_addr [PMPNumRegions];
-  logic [33:PMPGranularity+2]                 region_addr_mask  [PMPNumRegions];
+  logic [PMPNumRegions-1:0][33:0]                                region_start_addr;
+  logic [PMPNumRegions-1:0][33:0]                 region_addr_mask;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_gt;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_lt;
   logic [PMPNumChan-1:0][PMPNumRegions-1:0]   region_match_eq;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv
index 4dd429df8..8c95e2492 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_register_file_ff.sv
@@ -42,8 +42,8 @@ module ibex_register_file #(
   localparam int unsigned NUM_WORDS  = 2**ADDR_WIDTH;
 
   logic [NUM_WORDS-1:0][DataWidth-1:0] rf_reg;
-  logic [NUM_WORDS-1:1][DataWidth-1:0] rf_reg_q;
-  logic [NUM_WORDS-1:1]                we_a_dec;
+  logic [NUM_WORDS-1:0][DataWidth-1:0] rf_reg_q;
+  logic [NUM_WORDS-1:0]                we_a_dec;
 
   always_comb begin : we_a_decoder
     for (int unsigned i = 1; i < NUM_WORDS; i++) begin
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv
index ffe380ff4..6f518796f 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv
@@ -51,7 +51,7 @@ module ibex_wb_stage #(
 
   // 0 == RF write from ID
   // 1 == RF write from LSU
-  logic [31:0] rf_wdata_wb_mux    [2];
+  logic [1:0][31:0] rf_wdata_wb_mux;
   logic [1:0]  rf_wdata_wb_mux_we;
 
   if(WritebackStage) begin : g_writeback_stage
diff --git a/hw/vendor/pulp_riscv_dbg/src/dm_mem.sv b/hw/vendor/pulp_riscv_dbg/src/dm_mem.sv
index 550b7cc36..c65fe30c4 100755
--- a/hw/vendor/pulp_riscv_dbg/src/dm_mem.sv
+++ b/hw/vendor/pulp_riscv_dbg/src/dm_mem.sv
@@ -216,7 +216,7 @@ module dm_mem #(
   // read/write logic
   logic [63:0] data_bits;
   logic [7:0][7:0] rdata;
-  always_comb begin : p_rw_logic
+  always begin : p_rw_logic
 
     halted_d_aligned   = NrHartsAligned'(halted_q);
     resuming_d_aligned = NrHartsAligned'(resuming_q);
diff --git a/hw/vendor/pulp_riscv_dbg/src/dm_sba.sv b/hw/vendor/pulp_riscv_dbg/src/dm_sba.sv
index c97f9565a..4aa3646f4 100644
--- a/hw/vendor/pulp_riscv_dbg/src/dm_sba.sv
+++ b/hw/vendor/pulp_riscv_dbg/src/dm_sba.sv
@@ -98,16 +98,16 @@ module dm_sba #(
         // generate byte enable mask
         unique case (sbaccess_i)
           3'b000: begin
-            be[be_idx] = '1;
+            be[be_idx] = 4'b1111;
           end
           3'b001: begin
-            be[int'({be_idx[$high(be_idx):1], 1'b0}) +: 2] = '1;
+            be[int'({be_idx[$high(be_idx):1], 1'b0}) +: 2] = 2'b11;
           end
           3'b010: begin
-            if (BusWidth == 32'd64) be[int'({be_idx[$high(be_idx)], 2'h0}) +: 4] = '1;
-            else                    be = '1;
+            if (BusWidth == 32'd64) be[int'({be_idx[$high(be_idx)], 2'h0}) +: 4] = 2'b11;
+            else                    be = 4'b1111;
           end
-          3'b011: be = '1;
+          3'b011: be = 4'b1111;
           default: ;
         endcase
         if (gnt) state_d = WaitWrite;
