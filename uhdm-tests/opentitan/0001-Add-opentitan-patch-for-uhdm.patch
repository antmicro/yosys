diff --git a/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv b/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
index 962d3b559..d6430bc5a 100644
--- a/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
+++ b/hw/ip/prim_generic/rtl/prim_generic_pad_wrapper.sv
@@ -70,10 +70,10 @@ module prim_generic_pad_wrapper #(
     assign oe       = oe_i & ((od & ~out) | ~od);
 
   // driving strength attributes are not supported by verilator
-`ifdef VERILATOR
-    assign inout_io = (oe)   ? out : 1'bz;
+`ifdef SYNTHESIS
+    assign inout_io = out;
     // received data driver
-    assign in_o     = (ie_i) ? in  : 1'bz;
+    assign in_o     = in;
 `else
     // different driver types
     assign (strong0, strong1) inout_io = (oe && drv != DRIVE_00) ? out : 1'bz;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
index 61469937f..54e9f7ec1 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_core.sv
@@ -133,8 +133,8 @@ module ibex_core #(
   logic [31:0] pc_if;                          // Program counter in IF stage
   logic [31:0] pc_id;                          // Program counter in ID stage
   logic [31:0] pc_wb;                          // Program counter in WB stage
-  logic [33:0] imd_val_d_ex[2];                // Intermediate register for multicycle Ops
-  logic [33:0] imd_val_q_ex[2];                // Intermediate register for multicycle Ops
+  logic [1:0][33:0] imd_val_d_ex;                // Intermediate register for multicycle Ops
+  logic [1:0][33:0] imd_val_q_ex;                // Intermediate register for multicycle Ops
   logic [1:0]  imd_val_we_ex;
 
   logic        data_ind_timing;
@@ -254,7 +254,7 @@ module ibex_core #(
   logic [31:0] csr_mepc, csr_depc;
 
   // PMP signals
-  logic [33:0] csr_pmp_addr [PMPNumRegions];
+  logic [PMPNumRegions-1:0][33:0] csr_pmp_addr;
   pmp_cfg_t    csr_pmp_cfg  [PMPNumRegions];
   logic        pmp_req_err  [PMP_NUM_CHAN];
   logic        instr_req_out;
@@ -931,17 +931,17 @@ module ibex_core #(
       })
   `ASSERT_KNOWN_IF(IbexCsrWdataIntKnown, cs_registers_i.csr_wdata_int, csr_op_en)
 
+  logic [PMP_NUM_CHAN-1:0][1:0]    pmp_req_type;
+  logic [PMP_NUM_CHAN-1:0][1:0]    pmp_priv_lvl;
+  logic [PMP_NUM_CHAN-1:0][33:0] pmp_req_addr;
   if (PMPEnable) begin : g_pmp
-    logic [33:0] pmp_req_addr [PMP_NUM_CHAN];
-    pmp_req_e    pmp_req_type [PMP_NUM_CHAN];
-    priv_lvl_e   pmp_priv_lvl [PMP_NUM_CHAN];
-
-    assign pmp_req_addr[PMP_I] = {2'b00,instr_addr_o[31:0]};
-    assign pmp_req_type[PMP_I] = PMP_ACC_EXEC;
-    assign pmp_priv_lvl[PMP_I] = priv_mode_if;
-    assign pmp_req_addr[PMP_D] = {2'b00,data_addr_o[31:0]};
-    assign pmp_req_type[PMP_D] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
-    assign pmp_priv_lvl[PMP_D] = priv_mode_lsu;
+
+    assign pmp_req_addr[PMP_D] = {2'b00,instr_addr_o[31:0]};
+    assign pmp_req_type[PMP_D] = PMP_ACC_EXEC;
+    assign pmp_priv_lvl[PMP_D] = priv_mode_if;
+    assign pmp_req_addr[PMP_I] = {2'b00,data_addr_o[31:0]};
+    assign pmp_req_type[PMP_I] = data_we_o ? PMP_ACC_WRITE : PMP_ACC_READ;
+    assign pmp_priv_lvl[PMP_I] = priv_mode_lsu;
 
     ibex_pmp #(
         .PMPGranularity        ( PMPGranularity ),
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
index 6e5eaf4dc..63a0dacca 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_cs_registers.sv
@@ -64,7 +64,7 @@ module ibex_cs_registers #(
 
     // PMP
     output ibex_pkg::pmp_cfg_t   csr_pmp_cfg_o  [PMPNumRegions],
-    output logic [33:0]          csr_pmp_addr_o [PMPNumRegions],
+    output logic [PMPNumRegions-1:0][33:0]          csr_pmp_addr_o,
 
     // debug
     input  logic                 debug_mode_i,
@@ -117,8 +117,8 @@ module ibex_cs_registers #(
   import ibex_pkg::*;
 
   // misa
-  localparam logic [31:0] MISA_VALUE =
-      (0                 <<  0)  // A - Atomic Instructions extension
+  localparam logic [31:0] MISA_VALUE = 32'd1074794756;
+/*      (0                 <<  0)  // A - Atomic Instructions extension
     | (1                 <<  2)  // C - Compressed extension
     | (0                 <<  3)  // D - Double precision floating-point extension
     | (32'(RV32E)        <<  4)  // E - RV32E base ISA
@@ -129,7 +129,7 @@ module ibex_cs_registers #(
     | (0                 << 18)  // S - Supervisor mode implemented
     | (1                 << 20)  // U - User mode implemented
     | (0                 << 23)  // X - Non-standard extensions present
-    | (32'(CSR_MISA_MXL) << 30); // M-XLEN
+    | (32'(CSR_MISA_MXL) << 30); // M-XLEN*/
 
   typedef struct packed {
     logic      mie;
@@ -196,8 +196,8 @@ module ibex_cs_registers #(
   logic  [5:0] mstack_cause_q, mstack_cause_d;
 
   // PMP Signals
-  logic [31:0]                 pmp_addr_rdata  [PMP_MAX_REGIONS];
-  logic [PMP_CFG_W-1:0]        pmp_cfg_rdata   [PMP_MAX_REGIONS];
+  logic [PMP_MAX_REGIONS-1:0][31:0]                 pmp_addr_rdata;
+  logic [PMP_MAX_REGIONS-1:0][PMP_CFG_W-1:0]        pmp_cfg_rdata;
 
   // Hardware performance monitor signals
   logic [31:0]                 mcountinhibit;
@@ -208,11 +208,11 @@ module ibex_cs_registers #(
   // mhpmcounter flops are elaborated below providing only the precise number that is required based
   // on MHPMCounterNum/MHPMCounterWidth. This signal connects to the Q output of these flops
   // where they exist and is otherwise 0.
-  logic [63:0] mhpmcounter [32];
+  logic [31:0][63:0] mhpmcounter;
   logic [31:0] mhpmcounter_we;
   logic [31:0] mhpmcounterh_we;
   logic [31:0] mhpmcounter_incr;
-  logic [31:0] mhpmevent [32];
+  logic [31:0][31:0] mhpmevent;
   logic  [4:0] mhpmcounter_idx;
 
   // Debug / trigger registers
@@ -736,12 +736,12 @@ module ibex_cs_registers #(
   // PMP registers
   // -----------------
 
+  pmp_cfg_t                    pmp_cfg         [PMPNumRegions];
+  pmp_cfg_t                    pmp_cfg_wdata   [PMPNumRegions];
+  logic [PMPNumRegions-1:0][31:0]                 pmp_addr;
+  logic [PMPNumRegions-1:0]    pmp_cfg_we;
+  logic [PMPNumRegions-1:0]    pmp_addr_we;
   if (PMPEnable) begin : g_pmp_registers
-    pmp_cfg_t                    pmp_cfg         [PMPNumRegions];
-    pmp_cfg_t                    pmp_cfg_wdata   [PMPNumRegions];
-    logic [31:0]                 pmp_addr        [PMPNumRegions];
-    logic [PMPNumRegions-1:0]    pmp_cfg_we;
-    logic [PMPNumRegions-1:0]    pmp_addr_we;
 
     // Expanded / qualified register read data
     for (genvar i = 0; i < PMP_MAX_REGIONS; i++) begin : g_exp_rd_data
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
index eccc68e95..06a672e88 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_ex_block.sv
@@ -42,8 +42,8 @@ module ibex_ex_block #(
 
     // intermediate val reg
     output logic [1:0]            imd_val_we_o,
-    output logic [33:0]           imd_val_d_o[2],
-    input  logic [33:0]           imd_val_q_i[2],
+    output logic [1:0][33:0]           imd_val_d_o,
+    input  logic [1:0][33:0]           imd_val_q_i,
 
     // Outputs
     output logic [31:0]           alu_adder_result_ex_o, // to LSU
@@ -63,10 +63,10 @@ module ibex_ex_block #(
   logic        alu_cmp_result, alu_is_equal_result;
   logic        multdiv_valid;
   logic        multdiv_sel;
-  logic [31:0] alu_imd_val_q[2];
-  logic [31:0] alu_imd_val_d[2];
+  logic [1:0][31:0] alu_imd_val_q;
+  logic [1:0][31:0] alu_imd_val_d;
   logic [ 1:0] alu_imd_val_we;
-  logic [33:0] multdiv_imd_val_d[2];
+  logic [1:0][33:0] multdiv_imd_val_d;
   logic [ 1:0] multdiv_imd_val_we;
 
   /*
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
index bba4c2af8..a4fbb8da6 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_id_stage.sv
@@ -21,9 +21,9 @@ module ibex_id_stage #(
     parameter bit               RV32M           = 1,
     parameter ibex_pkg::rv32b_e RV32B           = ibex_pkg::RV32BNone,
     parameter bit               DataIndTiming   = 1'b0,
-    parameter bit               BranchTargetALU = 0,
-    parameter bit               SpecBranch      = 0,
-    parameter bit               WritebackStage  = 0
+    parameter bit               BranchTargetALU = 1,
+    parameter bit               SpecBranch      = 1,
+    parameter bit               WritebackStage  = 1
 ) (
     input  logic                      clk_i,
     input  logic                      rst_ni,
@@ -69,8 +69,8 @@ module ibex_id_stage #(
 
     // Multicycle Operation Stage Register
     input  logic [1:0]                imd_val_we_ex_i,
-    input  logic [33:0]               imd_val_d_ex_i[2],
-    output logic [33:0]               imd_val_q_ex_o[2],
+    input  logic [1:0][33:0]               imd_val_d_ex_i,
+    output logic [1:0][33:0]               imd_val_q_ex_o,
 
     // Branch target ALU
     output logic [31:0]               bt_a_operand_o,
@@ -247,7 +247,7 @@ module ibex_id_stage #(
   logic        alu_multicycle_dec;
   logic        stall_alu;
 
-  logic [33:0] imd_val_q[2];
+  logic [1:0][33:0] imd_val_q;
 
   op_a_sel_e   bt_a_mux_sel;
   imm_b_sel_e  bt_b_mux_sel;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
index 617bb5162..a60816d59 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_multdiv_fast.sv
@@ -35,8 +35,8 @@ module ibex_multdiv_fast #(
     output logic [32:0]      alu_operand_a_o,
     output logic [32:0]      alu_operand_b_o,
 
-    input  logic [33:0]      imd_val_q_i[2],
-    output logic [33:0]      imd_val_d_o[2],
+    input  logic [1:0][33:0]      imd_val_q_i,
+    output logic [1:0][33:0]      imd_val_d_o,
     output logic [1:0]       imd_val_we_o,
 
     input  logic             multdiv_ready_id_i,
@@ -132,13 +132,11 @@ module ibex_multdiv_fast #(
 
   // The single cycle multiplier uses three 17 bit multipliers to compute MUL instructions in a
   // single cycle and MULH instructions in two cycles.
+  typedef enum logic {
+    MULL, MULH
+  } mult_fsm_e;
+  mult_fsm_e mult_state_q, mult_state_d;
   if (SingleCycleMultiply) begin : gen_multiv_single_cycle
-
-    typedef enum logic {
-      MULL, MULH
-    } mult_fsm_e;
-    mult_fsm_e mult_state_q, mult_state_d;
-
     logic signed [33:0] mult1_res, mult2_res, mult3_res;
     logic [15:0]        mult1_op_a, mult1_op_b;
     logic [15:0]        mult2_op_a, mult2_op_b;
diff --git a/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv b/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv
index ffe380ff4..07f267017 100644
--- a/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv
+++ b/hw/vendor/lowrisc_ibex/rtl/ibex_wb_stage.sv
@@ -51,8 +51,9 @@ module ibex_wb_stage #(
 
   // 0 == RF write from ID
   // 1 == RF write from LSU
-  logic [31:0] rf_wdata_wb_mux    [2];
+  logic [1:0][31:0] rf_wdata_wb_mux;
   logic [1:0]  rf_wdata_wb_mux_we;
+  wb_instr_type_e wb_instr_type_q;
 
   if(WritebackStage) begin : g_writeback_stage
     logic [31:0]    rf_wdata_wb_q;
@@ -63,7 +64,6 @@ module ibex_wb_stage #(
 
     logic           wb_valid_q;
     logic [31:0]    wb_pc_q;
-    wb_instr_type_e wb_instr_type_q;
 
     logic           wb_valid_d;
 
